name: CI
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags: '*'
  schedule:
    - cron: 0 0 1 * *
defaults:
  run:
    shell: bash
jobs:
  test:
    name: Julia ${{ matrix.version }} / generate=${{ matrix.generate }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.4'
          - '1.5.0'
          - '1.5.1'
          # - '1'
          - 'nightly'
        os:
          - ubuntu-latest
          - macOS-latest
          # - windows-latest
        arch:
          - x64
          - x86
        exclude:
          - os: macOS-latest
            arch: x86
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - if: ${{ matrix.generate == 'true' }}
        run: |
          rm -rf src/autogenerated/*
          rm -rf ~/.julia
          julia --project=.ci/generate .ci/generate/develop.jl
          julia --project=.ci/generate .ci/generate/generate.jl
      - run: rm -rf ~/.julia
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - run: rm -rf src/autogenerated/*
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          # version: '1'
          version: 'nightly'
      - run: julia --color=yes -e 'using Pkg; VERSION >= v"1.5-" && !isdir(joinpath(DEPOT_PATH[1], "registries", "General")) && Pkg.Registry.add("General")'
        shell: bash
        env:
          # We set `JULIA_PKG_SERVER` only for this step to enforce
          # `Pkg.Registry.add` to use Git.  This way, Pkg.jl can send
          # the request metadata to pkg.julialang.org when installing
          # packages via `Pkg.test`.
          JULIA_PKG_SERVER: ""
      - run: julia --project=docs docs/develop.jl
      - run: |
          julia --project=docs -e '
            using Documenter: doctest
            using FHIRClient
            using Generate
            doctest(FHIRClient)'
      - run: |
          julia --project=docs -e '
            using Documenter: doctest
            using FHIRClient
            using Generate
            doctest(Generate; manual = joinpath(pwd(), "docs", "src"))'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
