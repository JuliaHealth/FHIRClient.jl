abstract type AbstractFHIRType
end

export AbstractResource

abstract type AbstractResource <: AbstractFHIRType
end

const Date = Dates.Date
const DateTime = Dates.DateTime
const SafeInt32 = SaferIntegers.SafeInt32
const Time = Dates.Time
const ZonedDateTime = TimeZones.ZonedDateTime
const string_fhir = String

# const FHIRNumber = Float64
const FHIRInt32 = SafeInt32

struct FHIRNumber <: AbstractFHIRType
    value::String
end
@inline Base.getindex(x::FHIRNumber) = x.value::String
@inline StructTypes.StructType(::Type{T}) where {T <: FHIRNumber} = JSON3.RawType()
@inline StructTypes.construct(::Type{T}, x::JSON3.RawValue) where {T <: FHIRNumber} = FHIRNumber(unsafe_string(pointer(x.bytes, x.pos), x.len))
@inline JSON3.rawbytes(x::FHIRNumber) = codeunits(x.value)

struct FHIRDateTime <: AbstractFHIRType
    value::String
end
@inline Base.getindex(x::FHIRDateTime) = x.value::String
@inline StructTypes.StructType(::Type{T}) where {T <: FHIRDateTime} = JSON3.RawType()
@inline StructTypes.construct(::Type{T}, x::JSON3.RawValue) where {T <: FHIRDateTime} = FHIRDateTime(unsafe_string(pointer(x.bytes, x.pos), x.len))
@inline JSON3.rawbytes(x::FHIRDateTime) = codeunits(x.value)

abstract type AbstractContainer{T} <: AbstractFHIRType
end

struct ResourceList
end

export Account

export ActivityDefinition

export AdverseEvent

export AllergyIntolerance

export Appointment

export AppointmentResponse

export AuditEvent

export Basic

export Binary

export BiologicallyDerivedProduct

export BodyStructure

export Bundle

export CapabilityStatement

export CarePlan

export CareTeam

export CatalogEntry

export ChargeItem

export ChargeItemDefinition

export Claim

export ClaimResponse

export ClinicalImpression

export CodeSystem

export Communication

export CommunicationRequest

export CompartmentDefinition

export Composition

export ConceptMap

export Condition

export Consent

export Contract

export Coverage

export CoverageEligibilityRequest

export CoverageEligibilityResponse

export DetectedIssue

export Device

export DeviceDefinition

export DeviceMetric

export DeviceRequest

export DeviceUseStatement

export DiagnosticReport

export DocumentManifest

export DocumentReference

export EffectEvidenceSynthesis

export Encounter

export Endpoint

export EnrollmentRequest

export EnrollmentResponse

export EpisodeOfCare

export EventDefinition

export Evidence

export EvidenceVariable

export ExampleScenario

export ExampleScenario_Instance

export ExplanationOfBenefit

export FamilyMemberHistory

export Flag

export Goal

export GraphDefinition

export Group

export GuidanceResponse

export HealthcareService

export ImagingStudy

export Immunization

export ImmunizationEvaluation

export ImmunizationRecommendation

export ImplementationGuide

export InsurancePlan

export Invoice

export Library

export Linkage

export List

export Location

export Measure

export MeasureReport

export Media

export Medication

export MedicationAdministration

export MedicationDispense

export MedicationKnowledge

export MedicationRequest

export MedicationStatement

export MedicinalProduct

export MedicinalProductAuthorization

export MedicinalProductContraindication

export MedicinalProductIndication

export MedicinalProductIngredient

export MedicinalProductInteraction

export MedicinalProductManufactured

export MedicinalProductPackaged

export MedicinalProductPharmaceutical

export MedicinalProductUndesirableEffect

export MessageDefinition

export MessageHeader

export MolecularSequence

export NamingSystem

export NutritionOrder

export Observation

export ObservationDefinition

export OperationDefinition

export OperationOutcome

export Organization

export OrganizationAffiliation

export Parameters

export Patient

export PaymentNotice

export PaymentReconciliation

export Person

export PlanDefinition

export Practitioner

export PractitionerRole

export Procedure

export Provenance

export Questionnaire

export QuestionnaireResponse

export RelatedPerson

export RequestGroup

export ResearchDefinition

export ResearchElementDefinition

export ResearchStudy

export ResearchSubject

export RiskAssessment

export RiskEvidenceSynthesis

export Schedule

export SearchParameter

export ServiceRequest

export Slot

export Specimen

export SpecimenDefinition

export StructureDefinition

export StructureMap

export Subscription

export Substance

export SubstanceNucleicAcid

export SubstancePolymer

export SubstanceProtein

export SubstanceReferenceInformation

export SubstanceSourceMaterial

export SubstanceSpecification

export SupplyDelivery

export SupplyRequest

export Task

export TerminologyCapabilities

export TestReport

export TestScript

export ValueSet

export VerificationResult

export VisionPrescription

abstract type AbstractElement <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElement} = StructTypes.AbstractType()

abstract type AbstractExtension <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExtension} = StructTypes.AbstractType()

abstract type AbstractNarrative <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNarrative} = StructTypes.AbstractType()

abstract type AbstractAnnotation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAnnotation} = StructTypes.AbstractType()

abstract type AbstractAttachment <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAttachment} = StructTypes.AbstractType()

abstract type AbstractIdentifier <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractIdentifier} = StructTypes.AbstractType()

abstract type AbstractCodeableConcept <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeableConcept} = StructTypes.AbstractType()

abstract type AbstractCoding <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoding} = StructTypes.AbstractType()

abstract type AbstractQuantity <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuantity} = StructTypes.AbstractType()

abstract type AbstractDuration <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDuration} = StructTypes.AbstractType()

abstract type AbstractDistance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDistance} = StructTypes.AbstractType()

abstract type AbstractCount <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCount} = StructTypes.AbstractType()

abstract type AbstractMoney <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMoney} = StructTypes.AbstractType()

abstract type AbstractAge <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAge} = StructTypes.AbstractType()

abstract type AbstractRange <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRange} = StructTypes.AbstractType()

abstract type AbstractPeriod <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPeriod} = StructTypes.AbstractType()

abstract type AbstractRatio <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRatio} = StructTypes.AbstractType()

abstract type AbstractReference <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractReference} = StructTypes.AbstractType()

abstract type AbstractSampledData <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSampledData} = StructTypes.AbstractType()

abstract type AbstractSignature <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSignature} = StructTypes.AbstractType()

abstract type AbstractHumanName <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractHumanName} = StructTypes.AbstractType()

abstract type AbstractAddress <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAddress} = StructTypes.AbstractType()

abstract type AbstractContactPoint <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContactPoint} = StructTypes.AbstractType()

abstract type AbstractTiming <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTiming} = StructTypes.AbstractType()

abstract type AbstractTiming_Repeat <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTiming_Repeat} = StructTypes.AbstractType()

abstract type AbstractMeta <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeta} = StructTypes.AbstractType()

abstract type AbstractContactDetail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContactDetail} = StructTypes.AbstractType()

abstract type AbstractContributor <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContributor} = StructTypes.AbstractType()

abstract type AbstractDataRequirement <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDataRequirement} = StructTypes.AbstractType()

abstract type AbstractDataRequirement_CodeFilter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDataRequirement_CodeFilter} = StructTypes.AbstractType()

abstract type AbstractDataRequirement_DateFilter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDataRequirement_DateFilter} = StructTypes.AbstractType()

abstract type AbstractDataRequirement_Sort <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDataRequirement_Sort} = StructTypes.AbstractType()

abstract type AbstractParameterDefinition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractParameterDefinition} = StructTypes.AbstractType()

abstract type AbstractRelatedArtifact <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRelatedArtifact} = StructTypes.AbstractType()

abstract type AbstractTriggerDefinition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTriggerDefinition} = StructTypes.AbstractType()

abstract type AbstractUsageContext <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractUsageContext} = StructTypes.AbstractType()

abstract type AbstractDosage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDosage} = StructTypes.AbstractType()

abstract type AbstractDosage_DoseAndRate <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDosage_DoseAndRate} = StructTypes.AbstractType()

abstract type AbstractPopulation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPopulation} = StructTypes.AbstractType()

abstract type AbstractProductShelfLife <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProductShelfLife} = StructTypes.AbstractType()

abstract type AbstractProdCharacteristic <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProdCharacteristic} = StructTypes.AbstractType()

abstract type AbstractMarketingStatus <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMarketingStatus} = StructTypes.AbstractType()

abstract type AbstractSubstanceAmount <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceAmount} = StructTypes.AbstractType()

abstract type AbstractSubstanceAmount_ReferenceRange <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceAmount_ReferenceRange} = StructTypes.AbstractType()

abstract type AbstractExpression <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExpression} = StructTypes.AbstractType()

abstract type AbstractElementDefinition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Slicing <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Slicing} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Discriminator <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Discriminator} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Base <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Base} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Type <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Type} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Example <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Example} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Constraint <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Constraint} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Binding <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Binding} = StructTypes.AbstractType()

abstract type AbstractElementDefinition_Mapping <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractElementDefinition_Mapping} = StructTypes.AbstractType()

abstract type AbstractAccount <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAccount} = StructTypes.AbstractType()

abstract type AbstractAccount_Coverage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAccount_Coverage} = StructTypes.AbstractType()

abstract type AbstractAccount_Guarantor <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAccount_Guarantor} = StructTypes.AbstractType()

abstract type AbstractActivityDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractActivityDefinition} = StructTypes.AbstractType()

abstract type AbstractActivityDefinition_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractActivityDefinition_Participant} = StructTypes.AbstractType()

abstract type AbstractActivityDefinition_DynamicValue <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractActivityDefinition_DynamicValue} = StructTypes.AbstractType()

abstract type AbstractAdverseEvent <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAdverseEvent} = StructTypes.AbstractType()

abstract type AbstractAdverseEvent_SuspectEntity <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAdverseEvent_SuspectEntity} = StructTypes.AbstractType()

abstract type AbstractAdverseEvent_Causality <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAdverseEvent_Causality} = StructTypes.AbstractType()

abstract type AbstractAllergyIntolerance <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAllergyIntolerance} = StructTypes.AbstractType()

abstract type AbstractAllergyIntolerance_Reaction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAllergyIntolerance_Reaction} = StructTypes.AbstractType()

abstract type AbstractAppointment <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAppointment} = StructTypes.AbstractType()

abstract type AbstractAppointment_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAppointment_Participant} = StructTypes.AbstractType()

abstract type AbstractAppointmentResponse <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAppointmentResponse} = StructTypes.AbstractType()

abstract type AbstractAuditEvent <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAuditEvent} = StructTypes.AbstractType()

abstract type AbstractAuditEvent_Agent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAuditEvent_Agent} = StructTypes.AbstractType()

abstract type AbstractAuditEvent_Network <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAuditEvent_Network} = StructTypes.AbstractType()

abstract type AbstractAuditEvent_Source <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAuditEvent_Source} = StructTypes.AbstractType()

abstract type AbstractAuditEvent_Entity <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAuditEvent_Entity} = StructTypes.AbstractType()

abstract type AbstractAuditEvent_Detail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractAuditEvent_Detail} = StructTypes.AbstractType()

abstract type AbstractBasic <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBasic} = StructTypes.AbstractType()

abstract type AbstractBinary <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBinary} = StructTypes.AbstractType()

abstract type AbstractBiologicallyDerivedProduct <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct} = StructTypes.AbstractType()

abstract type AbstractBiologicallyDerivedProduct_Collection <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Collection} = StructTypes.AbstractType()

abstract type AbstractBiologicallyDerivedProduct_Processing <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Processing} = StructTypes.AbstractType()

abstract type AbstractBiologicallyDerivedProduct_Manipulation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Manipulation} = StructTypes.AbstractType()

abstract type AbstractBiologicallyDerivedProduct_Storage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Storage} = StructTypes.AbstractType()

abstract type AbstractBodyStructure <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBodyStructure} = StructTypes.AbstractType()

abstract type AbstractBundle <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBundle} = StructTypes.AbstractType()

abstract type AbstractBundle_Link <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBundle_Link} = StructTypes.AbstractType()

abstract type AbstractBundle_Entry <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBundle_Entry} = StructTypes.AbstractType()

abstract type AbstractBundle_Search <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBundle_Search} = StructTypes.AbstractType()

abstract type AbstractBundle_Request <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBundle_Request} = StructTypes.AbstractType()

abstract type AbstractBundle_Response <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractBundle_Response} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Software <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Software} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Implementation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Implementation} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Rest <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Rest} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Security <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Security} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Resource <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Resource} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Interaction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Interaction} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_SearchParam <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_SearchParam} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Operation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Operation} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Interaction1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Interaction1} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Messaging <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Messaging} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Endpoint <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Endpoint} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_SupportedMessage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_SupportedMessage} = StructTypes.AbstractType()

abstract type AbstractCapabilityStatement_Document <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCapabilityStatement_Document} = StructTypes.AbstractType()

abstract type AbstractCarePlan <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCarePlan} = StructTypes.AbstractType()

abstract type AbstractCarePlan_Activity <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCarePlan_Activity} = StructTypes.AbstractType()

abstract type AbstractCarePlan_Detail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCarePlan_Detail} = StructTypes.AbstractType()

abstract type AbstractCareTeam <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCareTeam} = StructTypes.AbstractType()

abstract type AbstractCareTeam_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCareTeam_Participant} = StructTypes.AbstractType()

abstract type AbstractCatalogEntry <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCatalogEntry} = StructTypes.AbstractType()

abstract type AbstractCatalogEntry_RelatedEntry <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCatalogEntry_RelatedEntry} = StructTypes.AbstractType()

abstract type AbstractChargeItem <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractChargeItem} = StructTypes.AbstractType()

abstract type AbstractChargeItem_Performer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractChargeItem_Performer} = StructTypes.AbstractType()

abstract type AbstractChargeItemDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractChargeItemDefinition} = StructTypes.AbstractType()

abstract type AbstractChargeItemDefinition_Applicability <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractChargeItemDefinition_Applicability} = StructTypes.AbstractType()

abstract type AbstractChargeItemDefinition_PropertyGroup <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractChargeItemDefinition_PropertyGroup} = StructTypes.AbstractType()

abstract type AbstractChargeItemDefinition_PriceComponent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractChargeItemDefinition_PriceComponent} = StructTypes.AbstractType()

abstract type AbstractClaim <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim} = StructTypes.AbstractType()

abstract type AbstractClaim_Related <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Related} = StructTypes.AbstractType()

abstract type AbstractClaim_Payee <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Payee} = StructTypes.AbstractType()

abstract type AbstractClaim_CareTeam <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_CareTeam} = StructTypes.AbstractType()

abstract type AbstractClaim_SupportingInfo <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_SupportingInfo} = StructTypes.AbstractType()

abstract type AbstractClaim_Diagnosis <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Diagnosis} = StructTypes.AbstractType()

abstract type AbstractClaim_Procedure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Procedure} = StructTypes.AbstractType()

abstract type AbstractClaim_Insurance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Insurance} = StructTypes.AbstractType()

abstract type AbstractClaim_Accident <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Accident} = StructTypes.AbstractType()

abstract type AbstractClaim_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Item} = StructTypes.AbstractType()

abstract type AbstractClaim_Detail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_Detail} = StructTypes.AbstractType()

abstract type AbstractClaim_SubDetail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaim_SubDetail} = StructTypes.AbstractType()

abstract type AbstractClaimResponse <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Item} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Adjudication <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Adjudication} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Detail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Detail} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_SubDetail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_SubDetail} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_AddItem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_AddItem} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Detail1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Detail1} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_SubDetail1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_SubDetail1} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Total <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Total} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Payment <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Payment} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_ProcessNote <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_ProcessNote} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Insurance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Insurance} = StructTypes.AbstractType()

abstract type AbstractClaimResponse_Error <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClaimResponse_Error} = StructTypes.AbstractType()

abstract type AbstractClinicalImpression <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClinicalImpression} = StructTypes.AbstractType()

abstract type AbstractClinicalImpression_Investigation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClinicalImpression_Investigation} = StructTypes.AbstractType()

abstract type AbstractClinicalImpression_Finding <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractClinicalImpression_Finding} = StructTypes.AbstractType()

abstract type AbstractCodeSystem <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeSystem} = StructTypes.AbstractType()

abstract type AbstractCodeSystem_Filter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeSystem_Filter} = StructTypes.AbstractType()

abstract type AbstractCodeSystem_Property <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeSystem_Property} = StructTypes.AbstractType()

abstract type AbstractCodeSystem_Concept <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeSystem_Concept} = StructTypes.AbstractType()

abstract type AbstractCodeSystem_Designation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeSystem_Designation} = StructTypes.AbstractType()

abstract type AbstractCodeSystem_Property1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCodeSystem_Property1} = StructTypes.AbstractType()

abstract type AbstractCommunication <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCommunication} = StructTypes.AbstractType()

abstract type AbstractCommunication_Payload <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCommunication_Payload} = StructTypes.AbstractType()

abstract type AbstractCommunicationRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCommunicationRequest} = StructTypes.AbstractType()

abstract type AbstractCommunicationRequest_Payload <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCommunicationRequest_Payload} = StructTypes.AbstractType()

abstract type AbstractCompartmentDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCompartmentDefinition} = StructTypes.AbstractType()

abstract type AbstractCompartmentDefinition_Resource <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCompartmentDefinition_Resource} = StructTypes.AbstractType()

abstract type AbstractComposition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractComposition} = StructTypes.AbstractType()

abstract type AbstractComposition_Attester <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractComposition_Attester} = StructTypes.AbstractType()

abstract type AbstractComposition_RelatesTo <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractComposition_RelatesTo} = StructTypes.AbstractType()

abstract type AbstractComposition_Event <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractComposition_Event} = StructTypes.AbstractType()

abstract type AbstractComposition_Section <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractComposition_Section} = StructTypes.AbstractType()

abstract type AbstractConceptMap <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConceptMap} = StructTypes.AbstractType()

abstract type AbstractConceptMap_Group <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConceptMap_Group} = StructTypes.AbstractType()

abstract type AbstractConceptMap_Element <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConceptMap_Element} = StructTypes.AbstractType()

abstract type AbstractConceptMap_Target <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConceptMap_Target} = StructTypes.AbstractType()

abstract type AbstractConceptMap_DependsOn <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConceptMap_DependsOn} = StructTypes.AbstractType()

abstract type AbstractConceptMap_Unmapped <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConceptMap_Unmapped} = StructTypes.AbstractType()

abstract type AbstractCondition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCondition} = StructTypes.AbstractType()

abstract type AbstractCondition_Stage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCondition_Stage} = StructTypes.AbstractType()

abstract type AbstractCondition_Evidence <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCondition_Evidence} = StructTypes.AbstractType()

abstract type AbstractConsent <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConsent} = StructTypes.AbstractType()

abstract type AbstractConsent_Policy <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConsent_Policy} = StructTypes.AbstractType()

abstract type AbstractConsent_Verification <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConsent_Verification} = StructTypes.AbstractType()

abstract type AbstractConsent_Provision <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConsent_Provision} = StructTypes.AbstractType()

abstract type AbstractConsent_Actor <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConsent_Actor} = StructTypes.AbstractType()

abstract type AbstractConsent_Data <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractConsent_Data} = StructTypes.AbstractType()

abstract type AbstractContract <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract} = StructTypes.AbstractType()

abstract type AbstractContract_ContentDefinition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_ContentDefinition} = StructTypes.AbstractType()

abstract type AbstractContract_Term <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Term} = StructTypes.AbstractType()

abstract type AbstractContract_SecurityLabel <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_SecurityLabel} = StructTypes.AbstractType()

abstract type AbstractContract_Offer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Offer} = StructTypes.AbstractType()

abstract type AbstractContract_Party <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Party} = StructTypes.AbstractType()

abstract type AbstractContract_Answer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Answer} = StructTypes.AbstractType()

abstract type AbstractContract_Asset <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Asset} = StructTypes.AbstractType()

abstract type AbstractContract_Context <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Context} = StructTypes.AbstractType()

abstract type AbstractContract_ValuedItem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_ValuedItem} = StructTypes.AbstractType()

abstract type AbstractContract_Action <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Action} = StructTypes.AbstractType()

abstract type AbstractContract_Subject <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Subject} = StructTypes.AbstractType()

abstract type AbstractContract_Signer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Signer} = StructTypes.AbstractType()

abstract type AbstractContract_Friendly <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Friendly} = StructTypes.AbstractType()

abstract type AbstractContract_Legal <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Legal} = StructTypes.AbstractType()

abstract type AbstractContract_Rule <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractContract_Rule} = StructTypes.AbstractType()

abstract type AbstractCoverage <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverage} = StructTypes.AbstractType()

abstract type AbstractCoverage_Class <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverage_Class} = StructTypes.AbstractType()

abstract type AbstractCoverage_CostToBeneficiary <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverage_CostToBeneficiary} = StructTypes.AbstractType()

abstract type AbstractCoverage_Exception <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverage_Exception} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityRequest} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityRequest_SupportingInfo <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_SupportingInfo} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityRequest_Insurance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_Insurance} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityRequest_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_Item} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityRequest_Diagnosis <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_Diagnosis} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityResponse <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityResponse} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityResponse_Insurance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Insurance} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityResponse_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Item} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityResponse_Benefit <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Benefit} = StructTypes.AbstractType()

abstract type AbstractCoverageEligibilityResponse_Error <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Error} = StructTypes.AbstractType()

abstract type AbstractDetectedIssue <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDetectedIssue} = StructTypes.AbstractType()

abstract type AbstractDetectedIssue_Evidence <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDetectedIssue_Evidence} = StructTypes.AbstractType()

abstract type AbstractDetectedIssue_Mitigation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDetectedIssue_Mitigation} = StructTypes.AbstractType()

abstract type AbstractDevice <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDevice} = StructTypes.AbstractType()

abstract type AbstractDevice_UdiCarrier <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDevice_UdiCarrier} = StructTypes.AbstractType()

abstract type AbstractDevice_DeviceName <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDevice_DeviceName} = StructTypes.AbstractType()

abstract type AbstractDevice_Specialization <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDevice_Specialization} = StructTypes.AbstractType()

abstract type AbstractDevice_Version <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDevice_Version} = StructTypes.AbstractType()

abstract type AbstractDevice_Property <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDevice_Property} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition_UdiDeviceIdentifier <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition_UdiDeviceIdentifier} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition_DeviceName <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition_DeviceName} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition_Specialization <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition_Specialization} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition_Capability <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition_Capability} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition_Property <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition_Property} = StructTypes.AbstractType()

abstract type AbstractDeviceDefinition_Material <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceDefinition_Material} = StructTypes.AbstractType()

abstract type AbstractDeviceMetric <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceMetric} = StructTypes.AbstractType()

abstract type AbstractDeviceMetric_Calibration <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceMetric_Calibration} = StructTypes.AbstractType()

abstract type AbstractDeviceRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceRequest} = StructTypes.AbstractType()

abstract type AbstractDeviceRequest_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceRequest_Parameter} = StructTypes.AbstractType()

abstract type AbstractDeviceUseStatement <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDeviceUseStatement} = StructTypes.AbstractType()

abstract type AbstractDiagnosticReport <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDiagnosticReport} = StructTypes.AbstractType()

abstract type AbstractDiagnosticReport_Media <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDiagnosticReport_Media} = StructTypes.AbstractType()

abstract type AbstractDocumentManifest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDocumentManifest} = StructTypes.AbstractType()

abstract type AbstractDocumentManifest_Related <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDocumentManifest_Related} = StructTypes.AbstractType()

abstract type AbstractDocumentReference <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDocumentReference} = StructTypes.AbstractType()

abstract type AbstractDocumentReference_RelatesTo <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDocumentReference_RelatesTo} = StructTypes.AbstractType()

abstract type AbstractDocumentReference_Content <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDocumentReference_Content} = StructTypes.AbstractType()

abstract type AbstractDocumentReference_Context <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractDocumentReference_Context} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis_SampleSize <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_SampleSize} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis_ResultsByExposure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_ResultsByExposure} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis_EffectEstimate <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_EffectEstimate} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis_PrecisionEstimate <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_PrecisionEstimate} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis_Certainty <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_Certainty} = StructTypes.AbstractType()

abstract type AbstractEffectEvidenceSynthesis_CertaintySubcomponent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_CertaintySubcomponent} = StructTypes.AbstractType()

abstract type AbstractEncounter <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter} = StructTypes.AbstractType()

abstract type AbstractEncounter_StatusHistory <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter_StatusHistory} = StructTypes.AbstractType()

abstract type AbstractEncounter_ClassHistory <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter_ClassHistory} = StructTypes.AbstractType()

abstract type AbstractEncounter_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter_Participant} = StructTypes.AbstractType()

abstract type AbstractEncounter_Diagnosis <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter_Diagnosis} = StructTypes.AbstractType()

abstract type AbstractEncounter_Hospitalization <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter_Hospitalization} = StructTypes.AbstractType()

abstract type AbstractEncounter_Location <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEncounter_Location} = StructTypes.AbstractType()

abstract type AbstractEndpoint <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEndpoint} = StructTypes.AbstractType()

abstract type AbstractEnrollmentRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEnrollmentRequest} = StructTypes.AbstractType()

abstract type AbstractEnrollmentResponse <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEnrollmentResponse} = StructTypes.AbstractType()

abstract type AbstractEpisodeOfCare <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEpisodeOfCare} = StructTypes.AbstractType()

abstract type AbstractEpisodeOfCare_StatusHistory <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEpisodeOfCare_StatusHistory} = StructTypes.AbstractType()

abstract type AbstractEpisodeOfCare_Diagnosis <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEpisodeOfCare_Diagnosis} = StructTypes.AbstractType()

abstract type AbstractEventDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEventDefinition} = StructTypes.AbstractType()

abstract type AbstractEvidence <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEvidence} = StructTypes.AbstractType()

abstract type AbstractEvidenceVariable <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEvidenceVariable} = StructTypes.AbstractType()

abstract type AbstractEvidenceVariable_Characteristic <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractEvidenceVariable_Characteristic} = StructTypes.AbstractType()

abstract type AbstractExampleScenario <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Actor <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Actor} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Instance <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Instance} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Version <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Version} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_ContainedInstance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_ContainedInstance} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Process <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Process} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Step <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Step} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Operation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Operation} = StructTypes.AbstractType()

abstract type AbstractExampleScenario_Alternative <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExampleScenario_Alternative} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Related <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Related} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Payee <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Payee} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_CareTeam <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_CareTeam} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_SupportingInfo <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_SupportingInfo} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Diagnosis <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Diagnosis} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Procedure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Procedure} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Insurance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Insurance} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Accident <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Accident} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Item} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Adjudication <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Adjudication} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Detail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Detail} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_SubDetail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_SubDetail} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_AddItem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_AddItem} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Detail1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Detail1} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_SubDetail1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_SubDetail1} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Total <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Total} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Payment <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Payment} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_ProcessNote <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_ProcessNote} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_BenefitBalance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_BenefitBalance} = StructTypes.AbstractType()

abstract type AbstractExplanationOfBenefit_Financial <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractExplanationOfBenefit_Financial} = StructTypes.AbstractType()

abstract type AbstractFamilyMemberHistory <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractFamilyMemberHistory} = StructTypes.AbstractType()

abstract type AbstractFamilyMemberHistory_Condition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractFamilyMemberHistory_Condition} = StructTypes.AbstractType()

abstract type AbstractFlag <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractFlag} = StructTypes.AbstractType()

abstract type AbstractGoal <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGoal} = StructTypes.AbstractType()

abstract type AbstractGoal_Target <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGoal_Target} = StructTypes.AbstractType()

abstract type AbstractGraphDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGraphDefinition} = StructTypes.AbstractType()

abstract type AbstractGraphDefinition_Link <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGraphDefinition_Link} = StructTypes.AbstractType()

abstract type AbstractGraphDefinition_Target <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGraphDefinition_Target} = StructTypes.AbstractType()

abstract type AbstractGraphDefinition_Compartment <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGraphDefinition_Compartment} = StructTypes.AbstractType()

abstract type AbstractGroup <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGroup} = StructTypes.AbstractType()

abstract type AbstractGroup_Characteristic <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGroup_Characteristic} = StructTypes.AbstractType()

abstract type AbstractGroup_Member <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGroup_Member} = StructTypes.AbstractType()

abstract type AbstractGuidanceResponse <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractGuidanceResponse} = StructTypes.AbstractType()

abstract type AbstractHealthcareService <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractHealthcareService} = StructTypes.AbstractType()

abstract type AbstractHealthcareService_Eligibility <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractHealthcareService_Eligibility} = StructTypes.AbstractType()

abstract type AbstractHealthcareService_AvailableTime <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractHealthcareService_AvailableTime} = StructTypes.AbstractType()

abstract type AbstractHealthcareService_NotAvailable <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractHealthcareService_NotAvailable} = StructTypes.AbstractType()

abstract type AbstractImagingStudy <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImagingStudy} = StructTypes.AbstractType()

abstract type AbstractImagingStudy_Series <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImagingStudy_Series} = StructTypes.AbstractType()

abstract type AbstractImagingStudy_Performer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImagingStudy_Performer} = StructTypes.AbstractType()

abstract type AbstractImagingStudy_Instance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImagingStudy_Instance} = StructTypes.AbstractType()

abstract type AbstractImmunization <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunization} = StructTypes.AbstractType()

abstract type AbstractImmunization_Performer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunization_Performer} = StructTypes.AbstractType()

abstract type AbstractImmunization_Education <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunization_Education} = StructTypes.AbstractType()

abstract type AbstractImmunization_Reaction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunization_Reaction} = StructTypes.AbstractType()

abstract type AbstractImmunization_ProtocolApplied <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunization_ProtocolApplied} = StructTypes.AbstractType()

abstract type AbstractImmunizationEvaluation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunizationEvaluation} = StructTypes.AbstractType()

abstract type AbstractImmunizationRecommendation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunizationRecommendation} = StructTypes.AbstractType()

abstract type AbstractImmunizationRecommendation_Recommendation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunizationRecommendation_Recommendation} = StructTypes.AbstractType()

abstract type AbstractImmunizationRecommendation_DateCriterion <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImmunizationRecommendation_DateCriterion} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_DependsOn <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_DependsOn} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Global <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Global} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Definition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Definition} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Grouping <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Grouping} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Resource <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Resource} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Page <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Page} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Parameter} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Template <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Template} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Manifest <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Manifest} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Resource1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Resource1} = StructTypes.AbstractType()

abstract type AbstractImplementationGuide_Page1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractImplementationGuide_Page1} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Contact <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Contact} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Coverage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Coverage} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Benefit <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Benefit} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Limit <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Limit} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Plan <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Plan} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_GeneralCost <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_GeneralCost} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_SpecificCost <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_SpecificCost} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Benefit1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Benefit1} = StructTypes.AbstractType()

abstract type AbstractInsurancePlan_Cost <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInsurancePlan_Cost} = StructTypes.AbstractType()

abstract type AbstractInvoice <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInvoice} = StructTypes.AbstractType()

abstract type AbstractInvoice_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInvoice_Participant} = StructTypes.AbstractType()

abstract type AbstractInvoice_LineItem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInvoice_LineItem} = StructTypes.AbstractType()

abstract type AbstractInvoice_PriceComponent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractInvoice_PriceComponent} = StructTypes.AbstractType()

abstract type AbstractLibrary <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractLibrary} = StructTypes.AbstractType()

abstract type AbstractLinkage <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractLinkage} = StructTypes.AbstractType()

abstract type AbstractLinkage_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractLinkage_Item} = StructTypes.AbstractType()

abstract type AbstractList <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractList} = StructTypes.AbstractType()

abstract type AbstractList_Entry <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractList_Entry} = StructTypes.AbstractType()

abstract type AbstractLocation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractLocation} = StructTypes.AbstractType()

abstract type AbstractLocation_Position <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractLocation_Position} = StructTypes.AbstractType()

abstract type AbstractLocation_HoursOfOperation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractLocation_HoursOfOperation} = StructTypes.AbstractType()

abstract type AbstractMeasure <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasure} = StructTypes.AbstractType()

abstract type AbstractMeasure_Group <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasure_Group} = StructTypes.AbstractType()

abstract type AbstractMeasure_Population <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasure_Population} = StructTypes.AbstractType()

abstract type AbstractMeasure_Stratifier <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasure_Stratifier} = StructTypes.AbstractType()

abstract type AbstractMeasure_Component <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasure_Component} = StructTypes.AbstractType()

abstract type AbstractMeasure_SupplementalData <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasure_SupplementalData} = StructTypes.AbstractType()

abstract type AbstractMeasureReport <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport} = StructTypes.AbstractType()

abstract type AbstractMeasureReport_Group <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport_Group} = StructTypes.AbstractType()

abstract type AbstractMeasureReport_Population <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport_Population} = StructTypes.AbstractType()

abstract type AbstractMeasureReport_Stratifier <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport_Stratifier} = StructTypes.AbstractType()

abstract type AbstractMeasureReport_Stratum <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport_Stratum} = StructTypes.AbstractType()

abstract type AbstractMeasureReport_Component <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport_Component} = StructTypes.AbstractType()

abstract type AbstractMeasureReport_Population1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMeasureReport_Population1} = StructTypes.AbstractType()

abstract type AbstractMedia <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedia} = StructTypes.AbstractType()

abstract type AbstractMedication <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedication} = StructTypes.AbstractType()

abstract type AbstractMedication_Ingredient <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedication_Ingredient} = StructTypes.AbstractType()

abstract type AbstractMedication_Batch <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedication_Batch} = StructTypes.AbstractType()

abstract type AbstractMedicationAdministration <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationAdministration} = StructTypes.AbstractType()

abstract type AbstractMedicationAdministration_Performer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationAdministration_Performer} = StructTypes.AbstractType()

abstract type AbstractMedicationAdministration_Dosage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationAdministration_Dosage} = StructTypes.AbstractType()

abstract type AbstractMedicationDispense <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationDispense} = StructTypes.AbstractType()

abstract type AbstractMedicationDispense_Performer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationDispense_Performer} = StructTypes.AbstractType()

abstract type AbstractMedicationDispense_Substitution <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationDispense_Substitution} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_RelatedMedicationKnowledge <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_RelatedMedicationKnowledge} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Monograph <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Monograph} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Ingredient <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Ingredient} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Cost <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Cost} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_MonitoringProgram <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_MonitoringProgram} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_AdministrationGuidelines <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_AdministrationGuidelines} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Dosage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Dosage} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_PatientCharacteristics <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_PatientCharacteristics} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_MedicineClassification <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_MedicineClassification} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Packaging <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Packaging} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_DrugCharacteristic <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_DrugCharacteristic} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Regulatory <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Regulatory} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Substitution <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Substitution} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Schedule <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Schedule} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_MaxDispense <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_MaxDispense} = StructTypes.AbstractType()

abstract type AbstractMedicationKnowledge_Kinetics <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationKnowledge_Kinetics} = StructTypes.AbstractType()

abstract type AbstractMedicationRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationRequest} = StructTypes.AbstractType()

abstract type AbstractMedicationRequest_DispenseRequest <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationRequest_DispenseRequest} = StructTypes.AbstractType()

abstract type AbstractMedicationRequest_InitialFill <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationRequest_InitialFill} = StructTypes.AbstractType()

abstract type AbstractMedicationRequest_Substitution <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationRequest_Substitution} = StructTypes.AbstractType()

abstract type AbstractMedicationStatement <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicationStatement} = StructTypes.AbstractType()

abstract type AbstractMedicinalProduct <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProduct} = StructTypes.AbstractType()

abstract type AbstractMedicinalProduct_Name <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProduct_Name} = StructTypes.AbstractType()

abstract type AbstractMedicinalProduct_NamePart <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProduct_NamePart} = StructTypes.AbstractType()

abstract type AbstractMedicinalProduct_CountryLanguage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProduct_CountryLanguage} = StructTypes.AbstractType()

abstract type AbstractMedicinalProduct_ManufacturingBusinessOperation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProduct_ManufacturingBusinessOperation} = StructTypes.AbstractType()

abstract type AbstractMedicinalProduct_SpecialDesignation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProduct_SpecialDesignation} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductAuthorization <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductAuthorization} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductAuthorization_JurisdictionalAuthorization <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductAuthorization_JurisdictionalAuthorization} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductAuthorization_Procedure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductAuthorization_Procedure} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductContraindication <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductContraindication} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductContraindication_OtherTherapy <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductContraindication_OtherTherapy} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIndication <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIndication} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIndication_OtherTherapy <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIndication_OtherTherapy} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIngredient <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIngredient} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIngredient_SpecifiedSubstance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIngredient_SpecifiedSubstance} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIngredient_Strength <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIngredient_Strength} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIngredient_ReferenceStrength <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIngredient_ReferenceStrength} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductIngredient_Substance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductIngredient_Substance} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductInteraction <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductInteraction} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductInteraction_Interactant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductInteraction_Interactant} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductManufactured <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductManufactured} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPackaged <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPackaged} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPackaged_BatchIdentifier <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPackaged_BatchIdentifier} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPackaged_PackageItem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPackaged_PackageItem} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPharmaceutical <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPharmaceutical_Characteristics <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_Characteristics} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPharmaceutical_RouteOfAdministration <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_RouteOfAdministration} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPharmaceutical_TargetSpecies <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_TargetSpecies} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductPharmaceutical_WithdrawalPeriod <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_WithdrawalPeriod} = StructTypes.AbstractType()

abstract type AbstractMedicinalProductUndesirableEffect <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMedicinalProductUndesirableEffect} = StructTypes.AbstractType()

abstract type AbstractMessageDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageDefinition} = StructTypes.AbstractType()

abstract type AbstractMessageDefinition_Focus <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageDefinition_Focus} = StructTypes.AbstractType()

abstract type AbstractMessageDefinition_AllowedResponse <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageDefinition_AllowedResponse} = StructTypes.AbstractType()

abstract type AbstractMessageHeader <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageHeader} = StructTypes.AbstractType()

abstract type AbstractMessageHeader_Destination <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageHeader_Destination} = StructTypes.AbstractType()

abstract type AbstractMessageHeader_Source <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageHeader_Source} = StructTypes.AbstractType()

abstract type AbstractMessageHeader_Response <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMessageHeader_Response} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_ReferenceSeq <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_ReferenceSeq} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_Variant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_Variant} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_Quality <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_Quality} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_Roc <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_Roc} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_Repository <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_Repository} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_StructureVariant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_StructureVariant} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_Outer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_Outer} = StructTypes.AbstractType()

abstract type AbstractMolecularSequence_Inner <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractMolecularSequence_Inner} = StructTypes.AbstractType()

abstract type AbstractNamingSystem <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNamingSystem} = StructTypes.AbstractType()

abstract type AbstractNamingSystem_UniqueId <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNamingSystem_UniqueId} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder_OralDiet <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder_OralDiet} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder_Nutrient <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder_Nutrient} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder_Texture <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder_Texture} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder_Supplement <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder_Supplement} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder_EnteralFormula <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder_EnteralFormula} = StructTypes.AbstractType()

abstract type AbstractNutritionOrder_Administration <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractNutritionOrder_Administration} = StructTypes.AbstractType()

abstract type AbstractObservation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractObservation} = StructTypes.AbstractType()

abstract type AbstractObservation_ReferenceRange <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractObservation_ReferenceRange} = StructTypes.AbstractType()

abstract type AbstractObservation_Component <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractObservation_Component} = StructTypes.AbstractType()

abstract type AbstractObservationDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractObservationDefinition} = StructTypes.AbstractType()

abstract type AbstractObservationDefinition_QuantitativeDetails <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractObservationDefinition_QuantitativeDetails} = StructTypes.AbstractType()

abstract type AbstractObservationDefinition_QualifiedInterval <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractObservationDefinition_QualifiedInterval} = StructTypes.AbstractType()

abstract type AbstractOperationDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationDefinition} = StructTypes.AbstractType()

abstract type AbstractOperationDefinition_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationDefinition_Parameter} = StructTypes.AbstractType()

abstract type AbstractOperationDefinition_Binding <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationDefinition_Binding} = StructTypes.AbstractType()

abstract type AbstractOperationDefinition_ReferencedFrom <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationDefinition_ReferencedFrom} = StructTypes.AbstractType()

abstract type AbstractOperationDefinition_Overload <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationDefinition_Overload} = StructTypes.AbstractType()

abstract type AbstractOperationOutcome <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationOutcome} = StructTypes.AbstractType()

abstract type AbstractOperationOutcome_Issue <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOperationOutcome_Issue} = StructTypes.AbstractType()

abstract type AbstractOrganization <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOrganization} = StructTypes.AbstractType()

abstract type AbstractOrganization_Contact <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOrganization_Contact} = StructTypes.AbstractType()

abstract type AbstractOrganizationAffiliation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractOrganizationAffiliation} = StructTypes.AbstractType()

abstract type AbstractParameters <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractParameters} = StructTypes.AbstractType()

abstract type AbstractParameters_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractParameters_Parameter} = StructTypes.AbstractType()

abstract type AbstractPatient <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPatient} = StructTypes.AbstractType()

abstract type AbstractPatient_Contact <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPatient_Contact} = StructTypes.AbstractType()

abstract type AbstractPatient_Communication <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPatient_Communication} = StructTypes.AbstractType()

abstract type AbstractPatient_Link <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPatient_Link} = StructTypes.AbstractType()

abstract type AbstractPaymentNotice <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPaymentNotice} = StructTypes.AbstractType()

abstract type AbstractPaymentReconciliation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPaymentReconciliation} = StructTypes.AbstractType()

abstract type AbstractPaymentReconciliation_Detail <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPaymentReconciliation_Detail} = StructTypes.AbstractType()

abstract type AbstractPaymentReconciliation_ProcessNote <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPaymentReconciliation_ProcessNote} = StructTypes.AbstractType()

abstract type AbstractPerson <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPerson} = StructTypes.AbstractType()

abstract type AbstractPerson_Link <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPerson_Link} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_Goal <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_Goal} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_Target <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_Target} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_Action <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_Action} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_Condition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_Condition} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_RelatedAction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_RelatedAction} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_Participant} = StructTypes.AbstractType()

abstract type AbstractPlanDefinition_DynamicValue <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPlanDefinition_DynamicValue} = StructTypes.AbstractType()

abstract type AbstractPractitioner <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPractitioner} = StructTypes.AbstractType()

abstract type AbstractPractitioner_Qualification <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPractitioner_Qualification} = StructTypes.AbstractType()

abstract type AbstractPractitionerRole <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPractitionerRole} = StructTypes.AbstractType()

abstract type AbstractPractitionerRole_AvailableTime <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPractitionerRole_AvailableTime} = StructTypes.AbstractType()

abstract type AbstractPractitionerRole_NotAvailable <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractPractitionerRole_NotAvailable} = StructTypes.AbstractType()

abstract type AbstractProcedure <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProcedure} = StructTypes.AbstractType()

abstract type AbstractProcedure_Performer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProcedure_Performer} = StructTypes.AbstractType()

abstract type AbstractProcedure_FocalDevice <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProcedure_FocalDevice} = StructTypes.AbstractType()

abstract type AbstractProvenance <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProvenance} = StructTypes.AbstractType()

abstract type AbstractProvenance_Agent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProvenance_Agent} = StructTypes.AbstractType()

abstract type AbstractProvenance_Entity <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractProvenance_Entity} = StructTypes.AbstractType()

abstract type AbstractQuestionnaire <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaire} = StructTypes.AbstractType()

abstract type AbstractQuestionnaire_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaire_Item} = StructTypes.AbstractType()

abstract type AbstractQuestionnaire_EnableWhen <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaire_EnableWhen} = StructTypes.AbstractType()

abstract type AbstractQuestionnaire_AnswerOption <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaire_AnswerOption} = StructTypes.AbstractType()

abstract type AbstractQuestionnaire_Initial <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaire_Initial} = StructTypes.AbstractType()

abstract type AbstractQuestionnaireResponse <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaireResponse} = StructTypes.AbstractType()

abstract type AbstractQuestionnaireResponse_Item <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaireResponse_Item} = StructTypes.AbstractType()

abstract type AbstractQuestionnaireResponse_Answer <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractQuestionnaireResponse_Answer} = StructTypes.AbstractType()

abstract type AbstractRelatedPerson <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRelatedPerson} = StructTypes.AbstractType()

abstract type AbstractRelatedPerson_Communication <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRelatedPerson_Communication} = StructTypes.AbstractType()

abstract type AbstractRequestGroup <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRequestGroup} = StructTypes.AbstractType()

abstract type AbstractRequestGroup_Action <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRequestGroup_Action} = StructTypes.AbstractType()

abstract type AbstractRequestGroup_Condition <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRequestGroup_Condition} = StructTypes.AbstractType()

abstract type AbstractRequestGroup_RelatedAction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRequestGroup_RelatedAction} = StructTypes.AbstractType()

abstract type AbstractResearchDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchDefinition} = StructTypes.AbstractType()

abstract type AbstractResearchElementDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchElementDefinition} = StructTypes.AbstractType()

abstract type AbstractResearchElementDefinition_Characteristic <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchElementDefinition_Characteristic} = StructTypes.AbstractType()

abstract type AbstractResearchStudy <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchStudy} = StructTypes.AbstractType()

abstract type AbstractResearchStudy_Arm <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchStudy_Arm} = StructTypes.AbstractType()

abstract type AbstractResearchStudy_Objective <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchStudy_Objective} = StructTypes.AbstractType()

abstract type AbstractResearchSubject <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractResearchSubject} = StructTypes.AbstractType()

abstract type AbstractRiskAssessment <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskAssessment} = StructTypes.AbstractType()

abstract type AbstractRiskAssessment_Prediction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskAssessment_Prediction} = StructTypes.AbstractType()

abstract type AbstractRiskEvidenceSynthesis <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis} = StructTypes.AbstractType()

abstract type AbstractRiskEvidenceSynthesis_SampleSize <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_SampleSize} = StructTypes.AbstractType()

abstract type AbstractRiskEvidenceSynthesis_RiskEstimate <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_RiskEstimate} = StructTypes.AbstractType()

abstract type AbstractRiskEvidenceSynthesis_PrecisionEstimate <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_PrecisionEstimate} = StructTypes.AbstractType()

abstract type AbstractRiskEvidenceSynthesis_Certainty <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_Certainty} = StructTypes.AbstractType()

abstract type AbstractRiskEvidenceSynthesis_CertaintySubcomponent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_CertaintySubcomponent} = StructTypes.AbstractType()

abstract type AbstractSchedule <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSchedule} = StructTypes.AbstractType()

abstract type AbstractSearchParameter <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSearchParameter} = StructTypes.AbstractType()

abstract type AbstractSearchParameter_Component <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSearchParameter_Component} = StructTypes.AbstractType()

abstract type AbstractServiceRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractServiceRequest} = StructTypes.AbstractType()

abstract type AbstractSlot <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSlot} = StructTypes.AbstractType()

abstract type AbstractSpecimen <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimen} = StructTypes.AbstractType()

abstract type AbstractSpecimen_Collection <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimen_Collection} = StructTypes.AbstractType()

abstract type AbstractSpecimen_Processing <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimen_Processing} = StructTypes.AbstractType()

abstract type AbstractSpecimen_Container <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimen_Container} = StructTypes.AbstractType()

abstract type AbstractSpecimenDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimenDefinition} = StructTypes.AbstractType()

abstract type AbstractSpecimenDefinition_TypeTested <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimenDefinition_TypeTested} = StructTypes.AbstractType()

abstract type AbstractSpecimenDefinition_Container <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimenDefinition_Container} = StructTypes.AbstractType()

abstract type AbstractSpecimenDefinition_Additive <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimenDefinition_Additive} = StructTypes.AbstractType()

abstract type AbstractSpecimenDefinition_Handling <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSpecimenDefinition_Handling} = StructTypes.AbstractType()

abstract type AbstractStructureDefinition <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureDefinition} = StructTypes.AbstractType()

abstract type AbstractStructureDefinition_Mapping <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureDefinition_Mapping} = StructTypes.AbstractType()

abstract type AbstractStructureDefinition_Context <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureDefinition_Context} = StructTypes.AbstractType()

abstract type AbstractStructureDefinition_Snapshot <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureDefinition_Snapshot} = StructTypes.AbstractType()

abstract type AbstractStructureDefinition_Differential <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureDefinition_Differential} = StructTypes.AbstractType()

abstract type AbstractStructureMap <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Structure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Structure} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Group <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Group} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Input <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Input} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Rule <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Rule} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Source <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Source} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Target <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Target} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Parameter} = StructTypes.AbstractType()

abstract type AbstractStructureMap_Dependent <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractStructureMap_Dependent} = StructTypes.AbstractType()

abstract type AbstractSubscription <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubscription} = StructTypes.AbstractType()

abstract type AbstractSubscription_Channel <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubscription_Channel} = StructTypes.AbstractType()

abstract type AbstractSubstance <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstance} = StructTypes.AbstractType()

abstract type AbstractSubstance_Instance <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstance_Instance} = StructTypes.AbstractType()

abstract type AbstractSubstance_Ingredient <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstance_Ingredient} = StructTypes.AbstractType()

abstract type AbstractSubstanceNucleicAcid <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceNucleicAcid} = StructTypes.AbstractType()

abstract type AbstractSubstanceNucleicAcid_Subunit <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceNucleicAcid_Subunit} = StructTypes.AbstractType()

abstract type AbstractSubstanceNucleicAcid_Linkage <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceNucleicAcid_Linkage} = StructTypes.AbstractType()

abstract type AbstractSubstanceNucleicAcid_Sugar <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceNucleicAcid_Sugar} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer_MonomerSet <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer_MonomerSet} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer_StartingMaterial <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer_StartingMaterial} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer_Repeat <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer_Repeat} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer_RepeatUnit <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer_RepeatUnit} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer_DegreeOfPolymerisation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer_DegreeOfPolymerisation} = StructTypes.AbstractType()

abstract type AbstractSubstancePolymer_StructuralRepresentation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstancePolymer_StructuralRepresentation} = StructTypes.AbstractType()

abstract type AbstractSubstanceProtein <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceProtein} = StructTypes.AbstractType()

abstract type AbstractSubstanceProtein_Subunit <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceProtein_Subunit} = StructTypes.AbstractType()

abstract type AbstractSubstanceReferenceInformation <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceReferenceInformation} = StructTypes.AbstractType()

abstract type AbstractSubstanceReferenceInformation_Gene <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_Gene} = StructTypes.AbstractType()

abstract type AbstractSubstanceReferenceInformation_GeneElement <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_GeneElement} = StructTypes.AbstractType()

abstract type AbstractSubstanceReferenceInformation_Classification <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_Classification} = StructTypes.AbstractType()

abstract type AbstractSubstanceReferenceInformation_Target <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_Target} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial_FractionDescription <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_FractionDescription} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial_Organism <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_Organism} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial_Author <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_Author} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial_Hybrid <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_Hybrid} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial_OrganismGeneral <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_OrganismGeneral} = StructTypes.AbstractType()

abstract type AbstractSubstanceSourceMaterial_PartDescription <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_PartDescription} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Moiety <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Moiety} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Property <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Property} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Structure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Structure} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Isotope <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Isotope} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_MolecularWeight <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_MolecularWeight} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Representation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Representation} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Code <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Code} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Name <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Name} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Official <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Official} = StructTypes.AbstractType()

abstract type AbstractSubstanceSpecification_Relationship <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSubstanceSpecification_Relationship} = StructTypes.AbstractType()

abstract type AbstractSupplyDelivery <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSupplyDelivery} = StructTypes.AbstractType()

abstract type AbstractSupplyDelivery_SuppliedItem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSupplyDelivery_SuppliedItem} = StructTypes.AbstractType()

abstract type AbstractSupplyRequest <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSupplyRequest} = StructTypes.AbstractType()

abstract type AbstractSupplyRequest_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractSupplyRequest_Parameter} = StructTypes.AbstractType()

abstract type AbstractTask <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTask} = StructTypes.AbstractType()

abstract type AbstractTask_Restriction <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTask_Restriction} = StructTypes.AbstractType()

abstract type AbstractTask_Input <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTask_Input} = StructTypes.AbstractType()

abstract type AbstractTask_Output <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTask_Output} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Software <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Software} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Implementation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Implementation} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_CodeSystem <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_CodeSystem} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Version <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Version} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Filter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Filter} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Expansion <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Expansion} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Parameter} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_ValidateCode <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_ValidateCode} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Translation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Translation} = StructTypes.AbstractType()

abstract type AbstractTerminologyCapabilities_Closure <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTerminologyCapabilities_Closure} = StructTypes.AbstractType()

abstract type AbstractTestReport <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport} = StructTypes.AbstractType()

abstract type AbstractTestReport_Participant <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Participant} = StructTypes.AbstractType()

abstract type AbstractTestReport_Setup <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Setup} = StructTypes.AbstractType()

abstract type AbstractTestReport_Action <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Action} = StructTypes.AbstractType()

abstract type AbstractTestReport_Operation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Operation} = StructTypes.AbstractType()

abstract type AbstractTestReport_Assert <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Assert} = StructTypes.AbstractType()

abstract type AbstractTestReport_Test <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Test} = StructTypes.AbstractType()

abstract type AbstractTestReport_Action1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Action1} = StructTypes.AbstractType()

abstract type AbstractTestReport_Teardown <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Teardown} = StructTypes.AbstractType()

abstract type AbstractTestReport_Action2 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestReport_Action2} = StructTypes.AbstractType()

abstract type AbstractTestScript <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript} = StructTypes.AbstractType()

abstract type AbstractTestScript_Origin <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Origin} = StructTypes.AbstractType()

abstract type AbstractTestScript_Destination <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Destination} = StructTypes.AbstractType()

abstract type AbstractTestScript_Metadata <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Metadata} = StructTypes.AbstractType()

abstract type AbstractTestScript_Link <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Link} = StructTypes.AbstractType()

abstract type AbstractTestScript_Capability <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Capability} = StructTypes.AbstractType()

abstract type AbstractTestScript_Fixture <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Fixture} = StructTypes.AbstractType()

abstract type AbstractTestScript_Variable <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Variable} = StructTypes.AbstractType()

abstract type AbstractTestScript_Setup <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Setup} = StructTypes.AbstractType()

abstract type AbstractTestScript_Action <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Action} = StructTypes.AbstractType()

abstract type AbstractTestScript_Operation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Operation} = StructTypes.AbstractType()

abstract type AbstractTestScript_RequestHeader <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_RequestHeader} = StructTypes.AbstractType()

abstract type AbstractTestScript_Assert <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Assert} = StructTypes.AbstractType()

abstract type AbstractTestScript_Test <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Test} = StructTypes.AbstractType()

abstract type AbstractTestScript_Action1 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Action1} = StructTypes.AbstractType()

abstract type AbstractTestScript_Teardown <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Teardown} = StructTypes.AbstractType()

abstract type AbstractTestScript_Action2 <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractTestScript_Action2} = StructTypes.AbstractType()

abstract type AbstractValueSet <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet} = StructTypes.AbstractType()

abstract type AbstractValueSet_Compose <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Compose} = StructTypes.AbstractType()

abstract type AbstractValueSet_Include <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Include} = StructTypes.AbstractType()

abstract type AbstractValueSet_Concept <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Concept} = StructTypes.AbstractType()

abstract type AbstractValueSet_Designation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Designation} = StructTypes.AbstractType()

abstract type AbstractValueSet_Filter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Filter} = StructTypes.AbstractType()

abstract type AbstractValueSet_Expansion <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Expansion} = StructTypes.AbstractType()

abstract type AbstractValueSet_Parameter <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Parameter} = StructTypes.AbstractType()

abstract type AbstractValueSet_Contains <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractValueSet_Contains} = StructTypes.AbstractType()

abstract type AbstractVerificationResult <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVerificationResult} = StructTypes.AbstractType()

abstract type AbstractVerificationResult_PrimarySource <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVerificationResult_PrimarySource} = StructTypes.AbstractType()

abstract type AbstractVerificationResult_Attestation <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVerificationResult_Attestation} = StructTypes.AbstractType()

abstract type AbstractVerificationResult_Validator <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVerificationResult_Validator} = StructTypes.AbstractType()

abstract type AbstractVisionPrescription <: AbstractResource end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVisionPrescription} = StructTypes.AbstractType()

abstract type AbstractVisionPrescription_LensSpecification <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVisionPrescription_LensSpecification} = StructTypes.AbstractType()

abstract type AbstractVisionPrescription_Prism <: AbstractFHIRType end

@inline StructTypes.StructType(::Type{T}) where {T <: AbstractVisionPrescription_Prism} = StructTypes.AbstractType()

Base.@kwdef mutable struct Element <: AbstractElement
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Element} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Element} = true



Base.@kwdef mutable struct Extension <: AbstractExtension
    _url::Union{AbstractElement, Nothing} = nothing
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCanonical::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueId::Union{AbstractElement, Nothing} = nothing
    _valueInstant::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueMarkdown::Union{AbstractElement, Nothing} = nothing
    _valueOid::Union{AbstractElement, Nothing} = nothing
    _valuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    _valueUrl::Union{AbstractElement, Nothing} = nothing
    _valueUuid::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    valueAddress::Union{AbstractAddress, Nothing} = nothing
    valueAge::Union{AbstractAge, Nothing} = nothing
    valueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCanonical::Union{String, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    valueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    valueContributor::Union{AbstractContributor, Nothing} = nothing
    valueCount::Union{AbstractCount, Nothing} = nothing
    valueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueDistance::Union{AbstractDistance, Nothing} = nothing
    valueDosage::Union{AbstractDosage, Nothing} = nothing
    valueDuration::Union{AbstractDuration, Nothing} = nothing
    valueExpression::Union{AbstractExpression, Nothing} = nothing
    valueHumanName::Union{AbstractHumanName, Nothing} = nothing
    valueId::Union{String, Nothing} = nothing
    valueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    valueInstant::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueMarkdown::Union{String, Nothing} = nothing
    valueMeta::Union{AbstractMeta, Nothing} = nothing
    valueMoney::Union{AbstractMoney, Nothing} = nothing
    valueOid::Union{String, Nothing} = nothing
    valueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueSignature::Union{AbstractSignature, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueTiming::Union{AbstractTiming, Nothing} = nothing
    valueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    valueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
    valueUrl::Union{String, Nothing} = nothing
    valueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    valueUuid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Extension} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Extension} = true



Base.@kwdef mutable struct Narrative <: AbstractNarrative
    _status::Union{AbstractElement, Nothing} = nothing
    div::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Narrative} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Narrative} = true



Base.@kwdef mutable struct Annotation <: AbstractAnnotation
    _authorString::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    _time::Union{AbstractElement, Nothing} = nothing
    authorReference::Union{AbstractReference, Nothing} = nothing
    authorString::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    time::Union{FHIRDateTime, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Annotation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Annotation} = true



Base.@kwdef mutable struct Attachment <: AbstractAttachment
    _contentType::Union{AbstractElement, Nothing} = nothing
    _creation::Union{AbstractElement, Nothing} = nothing
    _data::Union{AbstractElement, Nothing} = nothing
    _hash::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _size::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    contentType::Union{String, Nothing} = nothing
    creation::Union{FHIRDateTime, Nothing} = nothing
    data::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    hash::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    size::Union{SafeInt32, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Attachment} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Attachment} = true



Base.@kwdef mutable struct Identifier <: AbstractIdentifier
    _system::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    assigner::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    use::Union{String, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Identifier} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Identifier} = true



Base.@kwdef mutable struct CodeableConcept <: AbstractCodeableConcept
    _text::Union{AbstractElement, Nothing} = nothing
    coding::Vector{AbstractCoding} = AbstractCoding[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    text::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeableConcept} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeableConcept} = true



Base.@kwdef mutable struct Coding <: AbstractCoding
    _code::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _userSelected::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    userSelected::Union{Bool, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Coding} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Coding} = true



Base.@kwdef mutable struct Quantity <: AbstractQuantity
    _code::Union{AbstractElement, Nothing} = nothing
    _comparator::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _unit::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comparator::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    unit::Union{String, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Quantity} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Quantity} = true



Base.@kwdef mutable struct Duration <: AbstractDuration
    _code::Union{AbstractElement, Nothing} = nothing
    _comparator::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _unit::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comparator::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    unit::Union{String, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Duration} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Duration} = true



Base.@kwdef mutable struct Distance <: AbstractDistance
    _code::Union{AbstractElement, Nothing} = nothing
    _comparator::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _unit::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comparator::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    unit::Union{String, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Distance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Distance} = true



Base.@kwdef mutable struct Count <: AbstractCount
    _code::Union{AbstractElement, Nothing} = nothing
    _comparator::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _unit::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comparator::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    unit::Union{String, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Count} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Count} = true



Base.@kwdef mutable struct Money <: AbstractMoney
    _currency::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    currency::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Money} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Money} = true



Base.@kwdef mutable struct Age <: AbstractAge
    _code::Union{AbstractElement, Nothing} = nothing
    _comparator::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _unit::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comparator::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    unit::Union{String, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Age} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Age} = true



Base.@kwdef mutable struct Range <: AbstractRange
    extension::Vector{AbstractExtension} = AbstractExtension[]
    high::Union{AbstractQuantity, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    low::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Range} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Range} = true



Base.@kwdef mutable struct Period <: AbstractPeriod
    _end::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    end_fhir::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    start::Union{FHIRDateTime, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Period} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Period} = true



Base.@kwdef mutable struct Ratio <: AbstractRatio
    denominator::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    numerator::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Ratio} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Ratio} = true



Base.@kwdef mutable struct Reference <: AbstractReference
    _display::Union{AbstractElement, Nothing} = nothing
    _reference::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    reference::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Reference} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Reference} = true



Base.@kwdef mutable struct SampledData <: AbstractSampledData
    _data::Union{AbstractElement, Nothing} = nothing
    _dimensions::Union{AbstractElement, Nothing} = nothing
    _factor::Union{AbstractElement, Nothing} = nothing
    _lowerLimit::Union{AbstractElement, Nothing} = nothing
    _period::Union{AbstractElement, Nothing} = nothing
    _upperLimit::Union{AbstractElement, Nothing} = nothing
    data::Union{String, Nothing} = nothing
    dimensions::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    lowerLimit::Union{FHIRNumber, Nothing} = nothing
    origin::Union{AbstractQuantity, Nothing} = nothing
    period::Union{FHIRNumber, Nothing} = nothing
    upperLimit::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SampledData} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SampledData} = true



Base.@kwdef mutable struct Signature <: AbstractSignature
    _data::Union{AbstractElement, Nothing} = nothing
    _sigFormat::Union{AbstractElement, Nothing} = nothing
    _targetFormat::Union{AbstractElement, Nothing} = nothing
    _when::Union{AbstractElement, Nothing} = nothing
    data::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    onBehalfOf::Union{AbstractReference, Nothing} = nothing
    sigFormat::Union{String, Nothing} = nothing
    targetFormat::Union{String, Nothing} = nothing
    type::Vector{AbstractCoding} = AbstractCoding[]
    when::Union{ZonedDateTime, Nothing} = nothing
    who::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Signature} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Signature} = true



Base.@kwdef mutable struct HumanName <: AbstractHumanName
    _family::Union{AbstractElement, Nothing} = nothing
    _given::Vector{AbstractElement} = AbstractElement[]
    _prefix::Vector{AbstractElement} = AbstractElement[]
    _suffix::Vector{AbstractElement} = AbstractElement[]
    _text::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    family::Union{String, Nothing} = nothing
    given::Vector{String} = String[]
    id::Union{String, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    prefix::Vector{String} = String[]
    suffix::Vector{String} = String[]
    text::Union{String, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: HumanName} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: HumanName} = true



Base.@kwdef mutable struct Address <: AbstractAddress
    _city::Union{AbstractElement, Nothing} = nothing
    _country::Union{AbstractElement, Nothing} = nothing
    _district::Union{AbstractElement, Nothing} = nothing
    _line::Vector{AbstractElement} = AbstractElement[]
    _postalCode::Union{AbstractElement, Nothing} = nothing
    _state::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    city::Union{String, Nothing} = nothing
    country::Union{String, Nothing} = nothing
    district::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    line::Vector{String} = String[]
    period::Union{AbstractPeriod, Nothing} = nothing
    postalCode::Union{String, Nothing} = nothing
    state::Union{String, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Address} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Address} = true



Base.@kwdef mutable struct ContactPoint <: AbstractContactPoint
    _rank::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    rank::Union{SafeInt32, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    use::Union{String, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ContactPoint} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ContactPoint} = true



Base.@kwdef mutable struct Timing <: AbstractTiming
    _event::Vector{AbstractElement} = AbstractElement[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    event::Vector{FHIRDateTime} = FHIRDateTime[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    repeat::Union{AbstractTiming_Repeat, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Timing} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Timing} = true



Base.@kwdef mutable struct Timing_Repeat <: AbstractTiming_Repeat
    _count::Union{AbstractElement, Nothing} = nothing
    _countMax::Union{AbstractElement, Nothing} = nothing
    _dayOfWeek::Vector{AbstractElement} = AbstractElement[]
    _duration::Union{AbstractElement, Nothing} = nothing
    _durationMax::Union{AbstractElement, Nothing} = nothing
    _durationUnit::Union{AbstractElement, Nothing} = nothing
    _frequency::Union{AbstractElement, Nothing} = nothing
    _frequencyMax::Union{AbstractElement, Nothing} = nothing
    _offset::Union{AbstractElement, Nothing} = nothing
    _period::Union{AbstractElement, Nothing} = nothing
    _periodMax::Union{AbstractElement, Nothing} = nothing
    _periodUnit::Union{AbstractElement, Nothing} = nothing
    _timeOfDay::Vector{AbstractElement} = AbstractElement[]
    _when::Vector{AbstractElement} = AbstractElement[]
    boundsDuration::Union{AbstractDuration, Nothing} = nothing
    boundsPeriod::Union{AbstractPeriod, Nothing} = nothing
    boundsRange::Union{AbstractRange, Nothing} = nothing
    count::Union{SafeInt32, Nothing} = nothing
    countMax::Union{SafeInt32, Nothing} = nothing
    dayOfWeek::Vector{String} = String[]
    duration::Union{FHIRNumber, Nothing} = nothing
    durationMax::Union{FHIRNumber, Nothing} = nothing
    durationUnit::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    frequency::Union{SafeInt32, Nothing} = nothing
    frequencyMax::Union{SafeInt32, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    offset::Union{SafeInt32, Nothing} = nothing
    period::Union{FHIRNumber, Nothing} = nothing
    periodMax::Union{FHIRNumber, Nothing} = nothing
    periodUnit::Union{String, Nothing} = nothing
    timeOfDay::Vector{Time} = Time[]
    when::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Timing_Repeat} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Timing_Repeat} = true



Base.@kwdef mutable struct Meta <: AbstractMeta
    _lastUpdated::Union{AbstractElement, Nothing} = nothing
    _source::Union{AbstractElement, Nothing} = nothing
    _versionId::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    lastUpdated::Union{ZonedDateTime, Nothing} = nothing
    profile::Vector{String} = String[]
    security::Vector{AbstractCoding} = AbstractCoding[]
    source::Union{String, Nothing} = nothing
    tag::Vector{AbstractCoding} = AbstractCoding[]
    versionId::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Meta} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Meta} = true



Base.@kwdef mutable struct ContactDetail <: AbstractContactDetail
    _name::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ContactDetail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ContactDetail} = true



Base.@kwdef mutable struct Contributor <: AbstractContributor
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contributor} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contributor} = true



Base.@kwdef mutable struct DataRequirement <: AbstractDataRequirement
    _limit::Union{AbstractElement, Nothing} = nothing
    _mustSupport::Vector{AbstractElement} = AbstractElement[]
    _type::Union{AbstractElement, Nothing} = nothing
    codeFilter::Vector{AbstractDataRequirement_CodeFilter} = AbstractDataRequirement_CodeFilter[]
    dateFilter::Vector{AbstractDataRequirement_DateFilter} = AbstractDataRequirement_DateFilter[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    limit::Union{SafeInt32, Nothing} = nothing
    mustSupport::Vector{String} = String[]
    profile::Vector{String} = String[]
    sort::Vector{AbstractDataRequirement_Sort} = AbstractDataRequirement_Sort[]
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DataRequirement} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DataRequirement} = true



Base.@kwdef mutable struct DataRequirement_CodeFilter <: AbstractDataRequirement_CodeFilter
    _path::Union{AbstractElement, Nothing} = nothing
    _searchParam::Union{AbstractElement, Nothing} = nothing
    code::Vector{AbstractCoding} = AbstractCoding[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
    searchParam::Union{String, Nothing} = nothing
    valueSet::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DataRequirement_CodeFilter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DataRequirement_CodeFilter} = true



Base.@kwdef mutable struct DataRequirement_DateFilter <: AbstractDataRequirement_DateFilter
    _path::Union{AbstractElement, Nothing} = nothing
    _searchParam::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
    searchParam::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDuration::Union{AbstractDuration, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DataRequirement_DateFilter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DataRequirement_DateFilter} = true



Base.@kwdef mutable struct DataRequirement_Sort <: AbstractDataRequirement_Sort
    _direction::Union{AbstractElement, Nothing} = nothing
    _path::Union{AbstractElement, Nothing} = nothing
    direction::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DataRequirement_Sort} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DataRequirement_Sort} = true



Base.@kwdef mutable struct ParameterDefinition <: AbstractParameterDefinition
    _documentation::Union{AbstractElement, Nothing} = nothing
    _max::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    max::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    profile::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ParameterDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ParameterDefinition} = true



Base.@kwdef mutable struct RelatedArtifact <: AbstractRelatedArtifact
    _citation::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    _label::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    citation::Union{String, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    document::Union{AbstractAttachment, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    label::Union{String, Nothing} = nothing
    resource::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RelatedArtifact} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RelatedArtifact} = true



Base.@kwdef mutable struct TriggerDefinition <: AbstractTriggerDefinition
    _name::Union{AbstractElement, Nothing} = nothing
    _timingDate::Union{AbstractElement, Nothing} = nothing
    _timingDateTime::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    condition::Union{AbstractExpression, Nothing} = nothing
    data::Vector{AbstractDataRequirement} = AbstractDataRequirement[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    timingDate::Union{String, Nothing} = nothing
    timingDateTime::Union{String, Nothing} = nothing
    timingReference::Union{AbstractReference, Nothing} = nothing
    timingTiming::Union{AbstractTiming, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TriggerDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TriggerDefinition} = true



Base.@kwdef mutable struct UsageContext <: AbstractUsageContext
    code::Union{AbstractCoding, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: UsageContext} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: UsageContext} = true



Base.@kwdef mutable struct Dosage <: AbstractDosage
    _asNeededBoolean::Union{AbstractElement, Nothing} = nothing
    _patientInstruction::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    additionalInstruction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    asNeededBoolean::Union{Bool, Nothing} = nothing
    asNeededCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    doseAndRate::Vector{AbstractDosage_DoseAndRate} = AbstractDosage_DoseAndRate[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    maxDosePerAdministration::Union{AbstractQuantity, Nothing} = nothing
    maxDosePerLifetime::Union{AbstractQuantity, Nothing} = nothing
    maxDosePerPeriod::Union{AbstractRatio, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patientInstruction::Union{String, Nothing} = nothing
    route::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    site::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    timing::Union{AbstractTiming, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Dosage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Dosage} = true



Base.@kwdef mutable struct Dosage_DoseAndRate <: AbstractDosage_DoseAndRate
    doseQuantity::Union{AbstractQuantity, Nothing} = nothing
    doseRange::Union{AbstractRange, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    rateQuantity::Union{AbstractQuantity, Nothing} = nothing
    rateRange::Union{AbstractRange, Nothing} = nothing
    rateRatio::Union{AbstractRatio, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Dosage_DoseAndRate} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Dosage_DoseAndRate} = true



Base.@kwdef mutable struct Population <: AbstractPopulation
    ageCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    ageRange::Union{AbstractRange, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    physiologicalCondition::Union{AbstractCodeableConcept, Nothing} = nothing
    race::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Population} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Population} = true



Base.@kwdef mutable struct ProductShelfLife <: AbstractProductShelfLife
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractQuantity, Nothing} = nothing
    specialPrecautionsForStorage::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ProductShelfLife} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ProductShelfLife} = true



Base.@kwdef mutable struct ProdCharacteristic <: AbstractProdCharacteristic
    _color::Vector{AbstractElement} = AbstractElement[]
    _imprint::Vector{AbstractElement} = AbstractElement[]
    _shape::Union{AbstractElement, Nothing} = nothing
    color::Vector{String} = String[]
    depth::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    externalDiameter::Union{AbstractQuantity, Nothing} = nothing
    height::Union{AbstractQuantity, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    image::Vector{AbstractAttachment} = AbstractAttachment[]
    imprint::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    nominalVolume::Union{AbstractQuantity, Nothing} = nothing
    scoring::Union{AbstractCodeableConcept, Nothing} = nothing
    shape::Union{String, Nothing} = nothing
    weight::Union{AbstractQuantity, Nothing} = nothing
    width::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ProdCharacteristic} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ProdCharacteristic} = true



Base.@kwdef mutable struct MarketingStatus <: AbstractMarketingStatus
    _restoreDate::Union{AbstractElement, Nothing} = nothing
    country::Union{AbstractCodeableConcept, Nothing} = nothing
    dateRange::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    jurisdiction::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    restoreDate::Union{FHIRDateTime, Nothing} = nothing
    status::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MarketingStatus} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MarketingStatus} = true



Base.@kwdef mutable struct SubstanceAmount <: AbstractSubstanceAmount
    _amountString::Union{AbstractElement, Nothing} = nothing
    _amountText::Union{AbstractElement, Nothing} = nothing
    amountQuantity::Union{AbstractQuantity, Nothing} = nothing
    amountRange::Union{AbstractRange, Nothing} = nothing
    amountString::Union{String, Nothing} = nothing
    amountText::Union{String, Nothing} = nothing
    amountType::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    referenceRange::Union{AbstractSubstanceAmount_ReferenceRange, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceAmount} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceAmount} = true



Base.@kwdef mutable struct SubstanceAmount_ReferenceRange <: AbstractSubstanceAmount_ReferenceRange
    extension::Vector{AbstractExtension} = AbstractExtension[]
    highLimit::Union{AbstractQuantity, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    lowLimit::Union{AbstractQuantity, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceAmount_ReferenceRange} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceAmount_ReferenceRange} = true



Base.@kwdef mutable struct Expression <: AbstractExpression
    _description::Union{AbstractElement, Nothing} = nothing
    _expression::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _reference::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    reference::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Expression} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Expression} = true



Base.@kwdef mutable struct ElementDefinition <: AbstractElementDefinition
    _alias::Vector{AbstractElement} = AbstractElement[]
    _comment::Union{AbstractElement, Nothing} = nothing
    _condition::Vector{AbstractElement} = AbstractElement[]
    _contentReference::Union{AbstractElement, Nothing} = nothing
    _defaultValueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _defaultValueBoolean::Union{AbstractElement, Nothing} = nothing
    _defaultValueCanonical::Union{AbstractElement, Nothing} = nothing
    _defaultValueCode::Union{AbstractElement, Nothing} = nothing
    _defaultValueDate::Union{AbstractElement, Nothing} = nothing
    _defaultValueDateTime::Union{AbstractElement, Nothing} = nothing
    _defaultValueDecimal::Union{AbstractElement, Nothing} = nothing
    _defaultValueId::Union{AbstractElement, Nothing} = nothing
    _defaultValueInstant::Union{AbstractElement, Nothing} = nothing
    _defaultValueInteger::Union{AbstractElement, Nothing} = nothing
    _defaultValueMarkdown::Union{AbstractElement, Nothing} = nothing
    _defaultValueOid::Union{AbstractElement, Nothing} = nothing
    _defaultValuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _defaultValueString::Union{AbstractElement, Nothing} = nothing
    _defaultValueTime::Union{AbstractElement, Nothing} = nothing
    _defaultValueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _defaultValueUri::Union{AbstractElement, Nothing} = nothing
    _defaultValueUrl::Union{AbstractElement, Nothing} = nothing
    _defaultValueUuid::Union{AbstractElement, Nothing} = nothing
    _definition::Union{AbstractElement, Nothing} = nothing
    _fixedBase64Binary::Union{AbstractElement, Nothing} = nothing
    _fixedBoolean::Union{AbstractElement, Nothing} = nothing
    _fixedCanonical::Union{AbstractElement, Nothing} = nothing
    _fixedCode::Union{AbstractElement, Nothing} = nothing
    _fixedDate::Union{AbstractElement, Nothing} = nothing
    _fixedDateTime::Union{AbstractElement, Nothing} = nothing
    _fixedDecimal::Union{AbstractElement, Nothing} = nothing
    _fixedId::Union{AbstractElement, Nothing} = nothing
    _fixedInstant::Union{AbstractElement, Nothing} = nothing
    _fixedInteger::Union{AbstractElement, Nothing} = nothing
    _fixedMarkdown::Union{AbstractElement, Nothing} = nothing
    _fixedOid::Union{AbstractElement, Nothing} = nothing
    _fixedPositiveInt::Union{AbstractElement, Nothing} = nothing
    _fixedString::Union{AbstractElement, Nothing} = nothing
    _fixedTime::Union{AbstractElement, Nothing} = nothing
    _fixedUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _fixedUri::Union{AbstractElement, Nothing} = nothing
    _fixedUrl::Union{AbstractElement, Nothing} = nothing
    _fixedUuid::Union{AbstractElement, Nothing} = nothing
    _isModifier::Union{AbstractElement, Nothing} = nothing
    _isModifierReason::Union{AbstractElement, Nothing} = nothing
    _isSummary::Union{AbstractElement, Nothing} = nothing
    _label::Union{AbstractElement, Nothing} = nothing
    _max::Union{AbstractElement, Nothing} = nothing
    _maxLength::Union{AbstractElement, Nothing} = nothing
    _maxValueDate::Union{AbstractElement, Nothing} = nothing
    _maxValueDateTime::Union{AbstractElement, Nothing} = nothing
    _maxValueDecimal::Union{AbstractElement, Nothing} = nothing
    _maxValueInstant::Union{AbstractElement, Nothing} = nothing
    _maxValueInteger::Union{AbstractElement, Nothing} = nothing
    _maxValuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _maxValueTime::Union{AbstractElement, Nothing} = nothing
    _maxValueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _meaningWhenMissing::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    _minValueDate::Union{AbstractElement, Nothing} = nothing
    _minValueDateTime::Union{AbstractElement, Nothing} = nothing
    _minValueDecimal::Union{AbstractElement, Nothing} = nothing
    _minValueInstant::Union{AbstractElement, Nothing} = nothing
    _minValueInteger::Union{AbstractElement, Nothing} = nothing
    _minValuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _minValueTime::Union{AbstractElement, Nothing} = nothing
    _minValueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _mustSupport::Union{AbstractElement, Nothing} = nothing
    _orderMeaning::Union{AbstractElement, Nothing} = nothing
    _path::Union{AbstractElement, Nothing} = nothing
    _patternBase64Binary::Union{AbstractElement, Nothing} = nothing
    _patternBoolean::Union{AbstractElement, Nothing} = nothing
    _patternCanonical::Union{AbstractElement, Nothing} = nothing
    _patternCode::Union{AbstractElement, Nothing} = nothing
    _patternDate::Union{AbstractElement, Nothing} = nothing
    _patternDateTime::Union{AbstractElement, Nothing} = nothing
    _patternDecimal::Union{AbstractElement, Nothing} = nothing
    _patternId::Union{AbstractElement, Nothing} = nothing
    _patternInstant::Union{AbstractElement, Nothing} = nothing
    _patternInteger::Union{AbstractElement, Nothing} = nothing
    _patternMarkdown::Union{AbstractElement, Nothing} = nothing
    _patternOid::Union{AbstractElement, Nothing} = nothing
    _patternPositiveInt::Union{AbstractElement, Nothing} = nothing
    _patternString::Union{AbstractElement, Nothing} = nothing
    _patternTime::Union{AbstractElement, Nothing} = nothing
    _patternUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _patternUri::Union{AbstractElement, Nothing} = nothing
    _patternUrl::Union{AbstractElement, Nothing} = nothing
    _patternUuid::Union{AbstractElement, Nothing} = nothing
    _representation::Vector{AbstractElement} = AbstractElement[]
    _requirements::Union{AbstractElement, Nothing} = nothing
    _short::Union{AbstractElement, Nothing} = nothing
    _sliceIsConstraining::Union{AbstractElement, Nothing} = nothing
    _sliceName::Union{AbstractElement, Nothing} = nothing
    alias::Vector{String} = String[]
    base::Union{AbstractElementDefinition_Base, Nothing} = nothing
    binding::Union{AbstractElementDefinition_Binding, Nothing} = nothing
    code::Vector{AbstractCoding} = AbstractCoding[]
    comment::Union{String, Nothing} = nothing
    condition::Vector{String} = String[]
    constraint::Vector{AbstractElementDefinition_Constraint} = AbstractElementDefinition_Constraint[]
    contentReference::Union{String, Nothing} = nothing
    defaultValueAddress::Union{AbstractAddress, Nothing} = nothing
    defaultValueAge::Union{AbstractAge, Nothing} = nothing
    defaultValueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    defaultValueAttachment::Union{AbstractAttachment, Nothing} = nothing
    defaultValueBase64Binary::Union{String, Nothing} = nothing
    defaultValueBoolean::Union{Bool, Nothing} = nothing
    defaultValueCanonical::Union{String, Nothing} = nothing
    defaultValueCode::Union{String, Nothing} = nothing
    defaultValueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    defaultValueCoding::Union{AbstractCoding, Nothing} = nothing
    defaultValueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    defaultValueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    defaultValueContributor::Union{AbstractContributor, Nothing} = nothing
    defaultValueCount::Union{AbstractCount, Nothing} = nothing
    defaultValueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    defaultValueDate::Union{String, Nothing} = nothing
    defaultValueDateTime::Union{String, Nothing} = nothing
    defaultValueDecimal::Union{FHIRNumber, Nothing} = nothing
    defaultValueDistance::Union{AbstractDistance, Nothing} = nothing
    defaultValueDosage::Union{AbstractDosage, Nothing} = nothing
    defaultValueDuration::Union{AbstractDuration, Nothing} = nothing
    defaultValueExpression::Union{AbstractExpression, Nothing} = nothing
    defaultValueHumanName::Union{AbstractHumanName, Nothing} = nothing
    defaultValueId::Union{String, Nothing} = nothing
    defaultValueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    defaultValueInstant::Union{String, Nothing} = nothing
    defaultValueInteger::Union{FHIRInt32, Nothing} = nothing
    defaultValueMarkdown::Union{String, Nothing} = nothing
    defaultValueMeta::Union{AbstractMeta, Nothing} = nothing
    defaultValueMoney::Union{AbstractMoney, Nothing} = nothing
    defaultValueOid::Union{String, Nothing} = nothing
    defaultValueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    defaultValuePeriod::Union{AbstractPeriod, Nothing} = nothing
    defaultValuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    defaultValueQuantity::Union{AbstractQuantity, Nothing} = nothing
    defaultValueRange::Union{AbstractRange, Nothing} = nothing
    defaultValueRatio::Union{AbstractRatio, Nothing} = nothing
    defaultValueReference::Union{AbstractReference, Nothing} = nothing
    defaultValueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    defaultValueSampledData::Union{AbstractSampledData, Nothing} = nothing
    defaultValueSignature::Union{AbstractSignature, Nothing} = nothing
    defaultValueString::Union{String, Nothing} = nothing
    defaultValueTime::Union{String, Nothing} = nothing
    defaultValueTiming::Union{AbstractTiming, Nothing} = nothing
    defaultValueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    defaultValueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    defaultValueUri::Union{String, Nothing} = nothing
    defaultValueUrl::Union{String, Nothing} = nothing
    defaultValueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    defaultValueUuid::Union{String, Nothing} = nothing
    definition::Union{String, Nothing} = nothing
    example::Vector{AbstractElementDefinition_Example} = AbstractElementDefinition_Example[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fixedAddress::Union{AbstractAddress, Nothing} = nothing
    fixedAge::Union{AbstractAge, Nothing} = nothing
    fixedAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    fixedAttachment::Union{AbstractAttachment, Nothing} = nothing
    fixedBase64Binary::Union{String, Nothing} = nothing
    fixedBoolean::Union{Bool, Nothing} = nothing
    fixedCanonical::Union{String, Nothing} = nothing
    fixedCode::Union{String, Nothing} = nothing
    fixedCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    fixedCoding::Union{AbstractCoding, Nothing} = nothing
    fixedContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    fixedContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    fixedContributor::Union{AbstractContributor, Nothing} = nothing
    fixedCount::Union{AbstractCount, Nothing} = nothing
    fixedDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    fixedDate::Union{String, Nothing} = nothing
    fixedDateTime::Union{String, Nothing} = nothing
    fixedDecimal::Union{FHIRNumber, Nothing} = nothing
    fixedDistance::Union{AbstractDistance, Nothing} = nothing
    fixedDosage::Union{AbstractDosage, Nothing} = nothing
    fixedDuration::Union{AbstractDuration, Nothing} = nothing
    fixedExpression::Union{AbstractExpression, Nothing} = nothing
    fixedHumanName::Union{AbstractHumanName, Nothing} = nothing
    fixedId::Union{String, Nothing} = nothing
    fixedIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    fixedInstant::Union{String, Nothing} = nothing
    fixedInteger::Union{FHIRInt32, Nothing} = nothing
    fixedMarkdown::Union{String, Nothing} = nothing
    fixedMeta::Union{AbstractMeta, Nothing} = nothing
    fixedMoney::Union{AbstractMoney, Nothing} = nothing
    fixedOid::Union{String, Nothing} = nothing
    fixedParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    fixedPeriod::Union{AbstractPeriod, Nothing} = nothing
    fixedPositiveInt::Union{FHIRInt32, Nothing} = nothing
    fixedQuantity::Union{AbstractQuantity, Nothing} = nothing
    fixedRange::Union{AbstractRange, Nothing} = nothing
    fixedRatio::Union{AbstractRatio, Nothing} = nothing
    fixedReference::Union{AbstractReference, Nothing} = nothing
    fixedRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    fixedSampledData::Union{AbstractSampledData, Nothing} = nothing
    fixedSignature::Union{AbstractSignature, Nothing} = nothing
    fixedString::Union{String, Nothing} = nothing
    fixedTime::Union{String, Nothing} = nothing
    fixedTiming::Union{AbstractTiming, Nothing} = nothing
    fixedTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    fixedUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    fixedUri::Union{String, Nothing} = nothing
    fixedUrl::Union{String, Nothing} = nothing
    fixedUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    fixedUuid::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    isModifier::Union{Bool, Nothing} = nothing
    isModifierReason::Union{String, Nothing} = nothing
    isSummary::Union{Bool, Nothing} = nothing
    label::Union{String, Nothing} = nothing
    mapping::Vector{AbstractElementDefinition_Mapping} = AbstractElementDefinition_Mapping[]
    max::Union{String, Nothing} = nothing
    maxLength::Union{SafeInt32, Nothing} = nothing
    maxValueDate::Union{String, Nothing} = nothing
    maxValueDateTime::Union{String, Nothing} = nothing
    maxValueDecimal::Union{FHIRNumber, Nothing} = nothing
    maxValueInstant::Union{String, Nothing} = nothing
    maxValueInteger::Union{FHIRInt32, Nothing} = nothing
    maxValuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    maxValueQuantity::Union{AbstractQuantity, Nothing} = nothing
    maxValueTime::Union{String, Nothing} = nothing
    maxValueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    meaningWhenMissing::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    minValueDate::Union{String, Nothing} = nothing
    minValueDateTime::Union{String, Nothing} = nothing
    minValueDecimal::Union{FHIRNumber, Nothing} = nothing
    minValueInstant::Union{String, Nothing} = nothing
    minValueInteger::Union{FHIRInt32, Nothing} = nothing
    minValuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    minValueQuantity::Union{AbstractQuantity, Nothing} = nothing
    minValueTime::Union{String, Nothing} = nothing
    minValueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    mustSupport::Union{Bool, Nothing} = nothing
    orderMeaning::Union{String, Nothing} = nothing
    path::Union{String, Nothing} = nothing
    patternAddress::Union{AbstractAddress, Nothing} = nothing
    patternAge::Union{AbstractAge, Nothing} = nothing
    patternAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    patternAttachment::Union{AbstractAttachment, Nothing} = nothing
    patternBase64Binary::Union{String, Nothing} = nothing
    patternBoolean::Union{Bool, Nothing} = nothing
    patternCanonical::Union{String, Nothing} = nothing
    patternCode::Union{String, Nothing} = nothing
    patternCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    patternCoding::Union{AbstractCoding, Nothing} = nothing
    patternContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    patternContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    patternContributor::Union{AbstractContributor, Nothing} = nothing
    patternCount::Union{AbstractCount, Nothing} = nothing
    patternDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    patternDate::Union{String, Nothing} = nothing
    patternDateTime::Union{String, Nothing} = nothing
    patternDecimal::Union{FHIRNumber, Nothing} = nothing
    patternDistance::Union{AbstractDistance, Nothing} = nothing
    patternDosage::Union{AbstractDosage, Nothing} = nothing
    patternDuration::Union{AbstractDuration, Nothing} = nothing
    patternExpression::Union{AbstractExpression, Nothing} = nothing
    patternHumanName::Union{AbstractHumanName, Nothing} = nothing
    patternId::Union{String, Nothing} = nothing
    patternIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    patternInstant::Union{String, Nothing} = nothing
    patternInteger::Union{FHIRNumber, Nothing} = nothing
    patternMarkdown::Union{String, Nothing} = nothing
    patternMeta::Union{AbstractMeta, Nothing} = nothing
    patternMoney::Union{AbstractMoney, Nothing} = nothing
    patternOid::Union{String, Nothing} = nothing
    patternParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    patternPeriod::Union{AbstractPeriod, Nothing} = nothing
    patternPositiveInt::Union{FHIRNumber, Nothing} = nothing
    patternQuantity::Union{AbstractQuantity, Nothing} = nothing
    patternRange::Union{AbstractRange, Nothing} = nothing
    patternRatio::Union{AbstractRatio, Nothing} = nothing
    patternReference::Union{AbstractReference, Nothing} = nothing
    patternRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    patternSampledData::Union{AbstractSampledData, Nothing} = nothing
    patternSignature::Union{AbstractSignature, Nothing} = nothing
    patternString::Union{String, Nothing} = nothing
    patternTime::Union{String, Nothing} = nothing
    patternTiming::Union{AbstractTiming, Nothing} = nothing
    patternTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    patternUnsignedInt::Union{FHIRNumber, Nothing} = nothing
    patternUri::Union{String, Nothing} = nothing
    patternUrl::Union{String, Nothing} = nothing
    patternUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    patternUuid::Union{String, Nothing} = nothing
    representation::Vector{String} = String[]
    requirements::Union{String, Nothing} = nothing
    short::Union{String, Nothing} = nothing
    sliceIsConstraining::Union{Bool, Nothing} = nothing
    sliceName::Union{String, Nothing} = nothing
    slicing::Union{AbstractElementDefinition_Slicing, Nothing} = nothing
    type::Vector{AbstractElementDefinition_Type} = AbstractElementDefinition_Type[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition} = true



Base.@kwdef mutable struct ElementDefinition_Slicing <: AbstractElementDefinition_Slicing
    _description::Union{AbstractElement, Nothing} = nothing
    _ordered::Union{AbstractElement, Nothing} = nothing
    _rules::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    discriminator::Vector{AbstractElementDefinition_Discriminator} = AbstractElementDefinition_Discriminator[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    ordered::Union{Bool, Nothing} = nothing
    rules::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Slicing} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Slicing} = true



Base.@kwdef mutable struct ElementDefinition_Discriminator <: AbstractElementDefinition_Discriminator
    _path::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Discriminator} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Discriminator} = true



Base.@kwdef mutable struct ElementDefinition_Base <: AbstractElementDefinition_Base
    _max::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    _path::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    max::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Base} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Base} = true



Base.@kwdef mutable struct ElementDefinition_Type <: AbstractElementDefinition_Type
    _aggregation::Vector{AbstractElement} = AbstractElement[]
    _code::Union{AbstractElement, Nothing} = nothing
    _versioning::Union{AbstractElement, Nothing} = nothing
    aggregation::Vector{String} = String[]
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    profile::Vector{String} = String[]
    targetProfile::Vector{String} = String[]
    versioning::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Type} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Type} = true



Base.@kwdef mutable struct ElementDefinition_Example <: AbstractElementDefinition_Example
    _label::Union{AbstractElement, Nothing} = nothing
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCanonical::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueId::Union{AbstractElement, Nothing} = nothing
    _valueInstant::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueMarkdown::Union{AbstractElement, Nothing} = nothing
    _valueOid::Union{AbstractElement, Nothing} = nothing
    _valuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    _valueUrl::Union{AbstractElement, Nothing} = nothing
    _valueUuid::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    label::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueAddress::Union{AbstractAddress, Nothing} = nothing
    valueAge::Union{AbstractAge, Nothing} = nothing
    valueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCanonical::Union{String, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    valueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    valueContributor::Union{AbstractContributor, Nothing} = nothing
    valueCount::Union{AbstractCount, Nothing} = nothing
    valueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueDistance::Union{AbstractDistance, Nothing} = nothing
    valueDosage::Union{AbstractDosage, Nothing} = nothing
    valueDuration::Union{AbstractDuration, Nothing} = nothing
    valueExpression::Union{AbstractExpression, Nothing} = nothing
    valueHumanName::Union{AbstractHumanName, Nothing} = nothing
    valueId::Union{String, Nothing} = nothing
    valueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    valueInstant::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueMarkdown::Union{String, Nothing} = nothing
    valueMeta::Union{AbstractMeta, Nothing} = nothing
    valueMoney::Union{AbstractMoney, Nothing} = nothing
    valueOid::Union{String, Nothing} = nothing
    valueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueSignature::Union{AbstractSignature, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueTiming::Union{AbstractTiming, Nothing} = nothing
    valueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    valueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
    valueUrl::Union{String, Nothing} = nothing
    valueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    valueUuid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Example} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Example} = true



Base.@kwdef mutable struct ElementDefinition_Constraint <: AbstractElementDefinition_Constraint
    _expression::Union{AbstractElement, Nothing} = nothing
    _human::Union{AbstractElement, Nothing} = nothing
    _key::Union{AbstractElement, Nothing} = nothing
    _requirements::Union{AbstractElement, Nothing} = nothing
    _severity::Union{AbstractElement, Nothing} = nothing
    _xpath::Union{AbstractElement, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    human::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    key::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    requirements::Union{String, Nothing} = nothing
    severity::Union{String, Nothing} = nothing
    source::Union{String, Nothing} = nothing
    xpath::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Constraint} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Constraint} = true



Base.@kwdef mutable struct ElementDefinition_Binding <: AbstractElementDefinition_Binding
    _description::Union{AbstractElement, Nothing} = nothing
    _strength::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Union{String, Nothing} = nothing
    valueSet::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Binding} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Binding} = true



Base.@kwdef mutable struct ElementDefinition_Mapping <: AbstractElementDefinition_Mapping
    _comment::Union{AbstractElement, Nothing} = nothing
    _identity::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _map::Union{AbstractElement, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identity::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    map::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ElementDefinition_Mapping} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ElementDefinition_Mapping} = true



Base.@kwdef mutable struct Account <: AbstractAccount
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    coverage::Vector{AbstractAccount_Coverage} = AbstractAccount_Coverage[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    guarantor::Vector{AbstractAccount_Guarantor} = AbstractAccount_Guarantor[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    owner::Union{AbstractReference, Nothing} = nothing
    partOf::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "Account"
    servicePeriod::Union{AbstractPeriod, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Account} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Account} = true



Base.@kwdef mutable struct Account_Coverage <: AbstractAccount_Coverage
    _priority::Union{AbstractElement, Nothing} = nothing
    coverage::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    priority::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Account_Coverage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Account_Coverage} = true



Base.@kwdef mutable struct Account_Guarantor <: AbstractAccount_Guarantor
    _onHold::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onHold::Union{Bool, Nothing} = nothing
    party::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Account_Guarantor} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Account_Guarantor} = true



Base.@kwdef mutable struct ActivityDefinition <: AbstractActivityDefinition
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _doNotPerform::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _intent::Union{AbstractElement, Nothing} = nothing
    _kind::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _timingDateTime::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    bodySite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    doNotPerform::Union{Bool, Nothing} = nothing
    dosage::Vector{AbstractDosage} = AbstractDosage[]
    dynamicValue::Vector{AbstractActivityDefinition_DynamicValue} = AbstractActivityDefinition_DynamicValue[]
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    intent::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    kind::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    library::Vector{String} = String[]
    location::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    observationRequirement::Vector{AbstractReference} = AbstractReference[]
    observationResultRequirement::Vector{AbstractReference} = AbstractReference[]
    participant::Vector{AbstractActivityDefinition_Participant} = AbstractActivityDefinition_Participant[]
    priority::Union{String, Nothing} = nothing
    productCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    productReference::Union{AbstractReference, Nothing} = nothing
    profile::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "ActivityDefinition"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    specimenRequirement::Vector{AbstractReference} = AbstractReference[]
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    timingAge::Union{AbstractAge, Nothing} = nothing
    timingDateTime::Union{String, Nothing} = nothing
    timingDuration::Union{AbstractDuration, Nothing} = nothing
    timingPeriod::Union{AbstractPeriod, Nothing} = nothing
    timingRange::Union{AbstractRange, Nothing} = nothing
    timingTiming::Union{AbstractTiming, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    transform::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ActivityDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ActivityDefinition} = true



Base.@kwdef mutable struct ActivityDefinition_Participant <: AbstractActivityDefinition_Participant
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    role::Union{AbstractCodeableConcept, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ActivityDefinition_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ActivityDefinition_Participant} = true



Base.@kwdef mutable struct ActivityDefinition_DynamicValue <: AbstractActivityDefinition_DynamicValue
    _path::Union{AbstractElement, Nothing} = nothing
    expression::Union{AbstractExpression, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ActivityDefinition_DynamicValue} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ActivityDefinition_DynamicValue} = true



Base.@kwdef mutable struct AdverseEvent <: AbstractAdverseEvent
    _actuality::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _detected::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _recordedDate::Union{AbstractElement, Nothing} = nothing
    actuality::Union{String, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    contributor::Vector{AbstractReference} = AbstractReference[]
    date::Union{FHIRDateTime, Nothing} = nothing
    detected::Union{FHIRDateTime, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    event::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{AbstractCodeableConcept, Nothing} = nothing
    recordedDate::Union{FHIRDateTime, Nothing} = nothing
    recorder::Union{AbstractReference, Nothing} = nothing
    referenceDocument::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "AdverseEvent"
    resultingCondition::Vector{AbstractReference} = AbstractReference[]
    seriousness::Union{AbstractCodeableConcept, Nothing} = nothing
    severity::Union{AbstractCodeableConcept, Nothing} = nothing
    study::Vector{AbstractReference} = AbstractReference[]
    subject::Union{AbstractReference, Nothing} = nothing
    subjectMedicalHistory::Vector{AbstractReference} = AbstractReference[]
    suspectEntity::Vector{AbstractAdverseEvent_SuspectEntity} = AbstractAdverseEvent_SuspectEntity[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AdverseEvent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AdverseEvent} = true



Base.@kwdef mutable struct AdverseEvent_SuspectEntity <: AbstractAdverseEvent_SuspectEntity
    causality::Vector{AbstractAdverseEvent_Causality} = AbstractAdverseEvent_Causality[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    instance::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: AdverseEvent_SuspectEntity} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AdverseEvent_SuspectEntity} = true



Base.@kwdef mutable struct AdverseEvent_Causality <: AbstractAdverseEvent_Causality
    _productRelatedness::Union{AbstractElement, Nothing} = nothing
    assessment::Union{AbstractCodeableConcept, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    productRelatedness::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AdverseEvent_Causality} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AdverseEvent_Causality} = true



Base.@kwdef mutable struct AllergyIntolerance <: AbstractAllergyIntolerance
    _category::Vector{AbstractElement} = AbstractElement[]
    _criticality::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastOccurrence::Union{AbstractElement, Nothing} = nothing
    _onsetDateTime::Union{AbstractElement, Nothing} = nothing
    _onsetString::Union{AbstractElement, Nothing} = nothing
    _recordedDate::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    asserter::Union{AbstractReference, Nothing} = nothing
    category::Vector{String} = String[]
    clinicalStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    criticality::Union{String, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lastOccurrence::Union{FHIRDateTime, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    onsetAge::Union{AbstractAge, Nothing} = nothing
    onsetDateTime::Union{String, Nothing} = nothing
    onsetPeriod::Union{AbstractPeriod, Nothing} = nothing
    onsetRange::Union{AbstractRange, Nothing} = nothing
    onsetString::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    reaction::Vector{AbstractAllergyIntolerance_Reaction} = AbstractAllergyIntolerance_Reaction[]
    recordedDate::Union{FHIRDateTime, Nothing} = nothing
    recorder::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "AllergyIntolerance"
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    verificationStatus::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AllergyIntolerance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AllergyIntolerance} = true



Base.@kwdef mutable struct AllergyIntolerance_Reaction <: AbstractAllergyIntolerance_Reaction
    _description::Union{AbstractElement, Nothing} = nothing
    _onset::Union{AbstractElement, Nothing} = nothing
    _severity::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    exposureRoute::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    manifestation::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    onset::Union{FHIRDateTime, Nothing} = nothing
    severity::Union{String, Nothing} = nothing
    substance::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AllergyIntolerance_Reaction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AllergyIntolerance_Reaction} = true



Base.@kwdef mutable struct Appointment <: AbstractAppointment
    _comment::Union{AbstractElement, Nothing} = nothing
    _created::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _end::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _minutesDuration::Union{AbstractElement, Nothing} = nothing
    _patientInstruction::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    appointmentType::Union{AbstractCodeableConcept, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    cancelationReason::Union{AbstractCodeableConcept, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    end_fhir::Union{ZonedDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    minutesDuration::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    participant::Vector{AbstractAppointment_Participant} = AbstractAppointment_Participant[]
    patientInstruction::Union{String, Nothing} = nothing
    priority::Union{SafeInt32, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    requestedPeriod::Vector{AbstractPeriod} = AbstractPeriod[]
    resourceType::String = "Appointment"
    serviceCategory::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    serviceType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    slot::Vector{AbstractReference} = AbstractReference[]
    specialty::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    start::Union{ZonedDateTime, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    supportingInformation::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Appointment} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Appointment} = true



Base.@kwdef mutable struct Appointment_Participant <: AbstractAppointment_Participant
    _required::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    required::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Appointment_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Appointment_Participant} = true



Base.@kwdef mutable struct AppointmentResponse <: AbstractAppointmentResponse
    _comment::Union{AbstractElement, Nothing} = nothing
    _end::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _participantStatus::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    actor::Union{AbstractReference, Nothing} = nothing
    appointment::Union{AbstractReference, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    end_fhir::Union{ZonedDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    participantStatus::Union{String, Nothing} = nothing
    participantType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    resourceType::String = "AppointmentResponse"
    start::Union{ZonedDateTime, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AppointmentResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AppointmentResponse} = true



Base.@kwdef mutable struct AuditEvent <: AbstractAuditEvent
    _action::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _outcome::Union{AbstractElement, Nothing} = nothing
    _outcomeDesc::Union{AbstractElement, Nothing} = nothing
    _recorded::Union{AbstractElement, Nothing} = nothing
    action::Union{String, Nothing} = nothing
    agent::Vector{AbstractAuditEvent_Agent} = AbstractAuditEvent_Agent[]
    contained::Vector{ResourceList} = ResourceList[]
    entity::Vector{AbstractAuditEvent_Entity} = AbstractAuditEvent_Entity[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{String, Nothing} = nothing
    outcomeDesc::Union{String, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    purposeOfEvent::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    recorded::Union{ZonedDateTime, Nothing} = nothing
    resourceType::String = "AuditEvent"
    source::Union{AbstractAuditEvent_Source, Nothing} = nothing
    subtype::Vector{AbstractCoding} = AbstractCoding[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCoding, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AuditEvent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AuditEvent} = true



Base.@kwdef mutable struct AuditEvent_Agent <: AbstractAuditEvent_Agent
    _altId::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _policy::Vector{AbstractElement} = AbstractElement[]
    _requestor::Union{AbstractElement, Nothing} = nothing
    altId::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    media::Union{AbstractCoding, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    network::Union{AbstractAuditEvent_Network, Nothing} = nothing
    policy::Vector{String} = String[]
    purposeOfUse::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    requestor::Union{Bool, Nothing} = nothing
    role::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    who::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AuditEvent_Agent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AuditEvent_Agent} = true



Base.@kwdef mutable struct AuditEvent_Network <: AbstractAuditEvent_Network
    _address::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    address::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AuditEvent_Network} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AuditEvent_Network} = true



Base.@kwdef mutable struct AuditEvent_Source <: AbstractAuditEvent_Source
    _site::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    observer::Union{AbstractReference, Nothing} = nothing
    site::Union{String, Nothing} = nothing
    type::Vector{AbstractCoding} = AbstractCoding[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: AuditEvent_Source} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AuditEvent_Source} = true



Base.@kwdef mutable struct AuditEvent_Entity <: AbstractAuditEvent_Entity
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _query::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    detail::Vector{AbstractAuditEvent_Detail} = AbstractAuditEvent_Detail[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    lifecycle::Union{AbstractCoding, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    query::Union{String, Nothing} = nothing
    role::Union{AbstractCoding, Nothing} = nothing
    securityLabel::Vector{AbstractCoding} = AbstractCoding[]
    type::Union{AbstractCoding, Nothing} = nothing
    what::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AuditEvent_Entity} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AuditEvent_Entity} = true



Base.@kwdef mutable struct AuditEvent_Detail <: AbstractAuditEvent_Detail
    _type::Union{AbstractElement, Nothing} = nothing
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: AuditEvent_Detail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: AuditEvent_Detail} = true



Base.@kwdef mutable struct Basic <: AbstractBasic
    _created::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "Basic"
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Basic} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Basic} = true



Base.@kwdef mutable struct Binary <: AbstractBinary
    _contentType::Union{AbstractElement, Nothing} = nothing
    _data::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    contentType::Union{String, Nothing} = nothing
    data::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    resourceType::String = "Binary"
    securityContext::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Binary} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Binary} = true



Base.@kwdef mutable struct BiologicallyDerivedProduct <: AbstractBiologicallyDerivedProduct
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _productCategory::Union{AbstractElement, Nothing} = nothing
    _quantity::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    collection::Union{AbstractBiologicallyDerivedProduct_Collection, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    manipulation::Union{AbstractBiologicallyDerivedProduct_Manipulation, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    parent::Vector{AbstractReference} = AbstractReference[]
    processing::Vector{AbstractBiologicallyDerivedProduct_Processing} = AbstractBiologicallyDerivedProduct_Processing[]
    productCategory::Union{String, Nothing} = nothing
    productCode::Union{AbstractCodeableConcept, Nothing} = nothing
    quantity::Union{SafeInt32, Nothing} = nothing
    request::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "BiologicallyDerivedProduct"
    status::Union{String, Nothing} = nothing
    storage::Vector{AbstractBiologicallyDerivedProduct_Storage} = AbstractBiologicallyDerivedProduct_Storage[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: BiologicallyDerivedProduct} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: BiologicallyDerivedProduct} = true



Base.@kwdef mutable struct BiologicallyDerivedProduct_Collection <: AbstractBiologicallyDerivedProduct_Collection
    _collectedDateTime::Union{AbstractElement, Nothing} = nothing
    collectedDateTime::Union{String, Nothing} = nothing
    collectedPeriod::Union{AbstractPeriod, Nothing} = nothing
    collector::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: BiologicallyDerivedProduct_Collection} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: BiologicallyDerivedProduct_Collection} = true



Base.@kwdef mutable struct BiologicallyDerivedProduct_Processing <: AbstractBiologicallyDerivedProduct_Processing
    _description::Union{AbstractElement, Nothing} = nothing
    _timeDateTime::Union{AbstractElement, Nothing} = nothing
    additive::Union{AbstractReference, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    procedure::Union{AbstractCodeableConcept, Nothing} = nothing
    timeDateTime::Union{String, Nothing} = nothing
    timePeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: BiologicallyDerivedProduct_Processing} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: BiologicallyDerivedProduct_Processing} = true



Base.@kwdef mutable struct BiologicallyDerivedProduct_Manipulation <: AbstractBiologicallyDerivedProduct_Manipulation
    _description::Union{AbstractElement, Nothing} = nothing
    _timeDateTime::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    timeDateTime::Union{String, Nothing} = nothing
    timePeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: BiologicallyDerivedProduct_Manipulation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: BiologicallyDerivedProduct_Manipulation} = true



Base.@kwdef mutable struct BiologicallyDerivedProduct_Storage <: AbstractBiologicallyDerivedProduct_Storage
    _description::Union{AbstractElement, Nothing} = nothing
    _scale::Union{AbstractElement, Nothing} = nothing
    _temperature::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    duration::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    scale::Union{String, Nothing} = nothing
    temperature::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: BiologicallyDerivedProduct_Storage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: BiologicallyDerivedProduct_Storage} = true



Base.@kwdef mutable struct BodyStructure <: AbstractBodyStructure
    _active::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    image::Vector{AbstractAttachment} = AbstractAttachment[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Union{AbstractCodeableConcept, Nothing} = nothing
    locationQualifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    morphology::Union{AbstractCodeableConcept, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "BodyStructure"
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: BodyStructure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: BodyStructure} = true



Base.@kwdef mutable struct Bundle <: AbstractBundle
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _timestamp::Union{AbstractElement, Nothing} = nothing
    _total::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    entry::Vector{AbstractBundle_Entry} = AbstractBundle_Entry[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    link::Vector{AbstractBundle_Link} = AbstractBundle_Link[]
    meta::Union{AbstractMeta, Nothing} = nothing
    resourceType::String = "Bundle"
    signature::Union{AbstractSignature, Nothing} = nothing
    timestamp::Union{ZonedDateTime, Nothing} = nothing
    total::Union{SafeInt32, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Bundle} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Bundle} = true



Base.@kwdef mutable struct Bundle_Link <: AbstractBundle_Link
    _relation::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    relation::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Bundle_Link} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Bundle_Link} = true



Base.@kwdef mutable struct Bundle_Entry <: AbstractBundle_Entry
    _fullUrl::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fullUrl::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    link::Vector{AbstractBundle_Link} = AbstractBundle_Link[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    request::Union{AbstractBundle_Request, Nothing} = nothing
    resource::Union{ResourceList, Nothing} = nothing
    response::Union{AbstractBundle_Response, Nothing} = nothing
    search::Union{AbstractBundle_Search, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Bundle_Entry} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Bundle_Entry} = true



Base.@kwdef mutable struct Bundle_Search <: AbstractBundle_Search
    _mode::Union{AbstractElement, Nothing} = nothing
    _score::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    score::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Bundle_Search} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Bundle_Search} = true



Base.@kwdef mutable struct Bundle_Request <: AbstractBundle_Request
    _ifMatch::Union{AbstractElement, Nothing} = nothing
    _ifModifiedSince::Union{AbstractElement, Nothing} = nothing
    _ifNoneExist::Union{AbstractElement, Nothing} = nothing
    _ifNoneMatch::Union{AbstractElement, Nothing} = nothing
    _method::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    ifMatch::Union{String, Nothing} = nothing
    ifModifiedSince::Union{ZonedDateTime, Nothing} = nothing
    ifNoneExist::Union{String, Nothing} = nothing
    ifNoneMatch::Union{String, Nothing} = nothing
    method::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Bundle_Request} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Bundle_Request} = true



Base.@kwdef mutable struct Bundle_Response <: AbstractBundle_Response
    _etag::Union{AbstractElement, Nothing} = nothing
    _lastModified::Union{AbstractElement, Nothing} = nothing
    _location::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    etag::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    lastModified::Union{ZonedDateTime, Nothing} = nothing
    location::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{ResourceList, Nothing} = nothing
    status::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Bundle_Response} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Bundle_Response} = true



Base.@kwdef mutable struct CapabilityStatement <: AbstractCapabilityStatement
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _fhirVersion::Union{AbstractElement, Nothing} = nothing
    _format::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _kind::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _patchFormat::Vector{AbstractElement} = AbstractElement[]
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    document::Vector{AbstractCapabilityStatement_Document} = AbstractCapabilityStatement_Document[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fhirVersion::Union{String, Nothing} = nothing
    format::Vector{String} = String[]
    id::Union{String, Nothing} = nothing
    implementation::Union{AbstractCapabilityStatement_Implementation, Nothing} = nothing
    implementationGuide::Vector{String} = String[]
    implicitRules::Union{String, Nothing} = nothing
    imports::Vector{String} = String[]
    instantiates::Vector{String} = String[]
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    kind::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    messaging::Vector{AbstractCapabilityStatement_Messaging} = AbstractCapabilityStatement_Messaging[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    patchFormat::Vector{String} = String[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "CapabilityStatement"
    rest::Vector{AbstractCapabilityStatement_Rest} = AbstractCapabilityStatement_Rest[]
    software::Union{AbstractCapabilityStatement_Software, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement} = true



Base.@kwdef mutable struct CapabilityStatement_Software <: AbstractCapabilityStatement_Software
    _name::Union{AbstractElement, Nothing} = nothing
    _releaseDate::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    releaseDate::Union{FHIRDateTime, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Software} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Software} = true



Base.@kwdef mutable struct CapabilityStatement_Implementation <: AbstractCapabilityStatement_Implementation
    _description::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    custodian::Union{AbstractReference, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Implementation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Implementation} = true



Base.@kwdef mutable struct CapabilityStatement_Rest <: AbstractCapabilityStatement_Rest
    _documentation::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    compartment::Vector{String} = String[]
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    interaction::Vector{AbstractCapabilityStatement_Interaction1} = AbstractCapabilityStatement_Interaction1[]
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Vector{AbstractCapabilityStatement_Operation} = AbstractCapabilityStatement_Operation[]
    resource::Vector{AbstractCapabilityStatement_Resource} = AbstractCapabilityStatement_Resource[]
    searchParam::Vector{AbstractCapabilityStatement_SearchParam} = AbstractCapabilityStatement_SearchParam[]
    security::Union{AbstractCapabilityStatement_Security, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Rest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Rest} = true



Base.@kwdef mutable struct CapabilityStatement_Security <: AbstractCapabilityStatement_Security
    _cors::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    cors::Union{Bool, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    service::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Security} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Security} = true



Base.@kwdef mutable struct CapabilityStatement_Resource <: AbstractCapabilityStatement_Resource
    _conditionalCreate::Union{AbstractElement, Nothing} = nothing
    _conditionalDelete::Union{AbstractElement, Nothing} = nothing
    _conditionalRead::Union{AbstractElement, Nothing} = nothing
    _conditionalUpdate::Union{AbstractElement, Nothing} = nothing
    _documentation::Union{AbstractElement, Nothing} = nothing
    _readHistory::Union{AbstractElement, Nothing} = nothing
    _referencePolicy::Vector{AbstractElement} = AbstractElement[]
    _searchInclude::Vector{AbstractElement} = AbstractElement[]
    _searchRevInclude::Vector{AbstractElement} = AbstractElement[]
    _type::Union{AbstractElement, Nothing} = nothing
    _updateCreate::Union{AbstractElement, Nothing} = nothing
    _versioning::Union{AbstractElement, Nothing} = nothing
    conditionalCreate::Union{Bool, Nothing} = nothing
    conditionalDelete::Union{String, Nothing} = nothing
    conditionalRead::Union{String, Nothing} = nothing
    conditionalUpdate::Union{Bool, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    interaction::Vector{AbstractCapabilityStatement_Interaction} = AbstractCapabilityStatement_Interaction[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Vector{AbstractCapabilityStatement_Operation} = AbstractCapabilityStatement_Operation[]
    profile::Union{String, Nothing} = nothing
    readHistory::Union{Bool, Nothing} = nothing
    referencePolicy::Vector{String} = String[]
    searchInclude::Vector{String} = String[]
    searchParam::Vector{AbstractCapabilityStatement_SearchParam} = AbstractCapabilityStatement_SearchParam[]
    searchRevInclude::Vector{String} = String[]
    supportedProfile::Vector{String} = String[]
    type::Union{String, Nothing} = nothing
    updateCreate::Union{Bool, Nothing} = nothing
    versioning::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Resource} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Resource} = true



Base.@kwdef mutable struct CapabilityStatement_Interaction <: AbstractCapabilityStatement_Interaction
    _code::Union{AbstractElement, Nothing} = nothing
    _documentation::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Interaction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Interaction} = true



Base.@kwdef mutable struct CapabilityStatement_SearchParam <: AbstractCapabilityStatement_SearchParam
    _documentation::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    definition::Union{String, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_SearchParam} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_SearchParam} = true



Base.@kwdef mutable struct CapabilityStatement_Operation <: AbstractCapabilityStatement_Operation
    _documentation::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    definition::Union{String, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Operation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Operation} = true



Base.@kwdef mutable struct CapabilityStatement_Interaction1 <: AbstractCapabilityStatement_Interaction1
    _code::Union{AbstractElement, Nothing} = nothing
    _documentation::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Interaction1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Interaction1} = true



Base.@kwdef mutable struct CapabilityStatement_Messaging <: AbstractCapabilityStatement_Messaging
    _documentation::Union{AbstractElement, Nothing} = nothing
    _reliableCache::Union{AbstractElement, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    endpoint::Vector{AbstractCapabilityStatement_Endpoint} = AbstractCapabilityStatement_Endpoint[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reliableCache::Union{SafeInt32, Nothing} = nothing
    supportedMessage::Vector{AbstractCapabilityStatement_SupportedMessage} = AbstractCapabilityStatement_SupportedMessage[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Messaging} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Messaging} = true



Base.@kwdef mutable struct CapabilityStatement_Endpoint <: AbstractCapabilityStatement_Endpoint
    _address::Union{AbstractElement, Nothing} = nothing
    address::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    protocol::Union{AbstractCoding, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Endpoint} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Endpoint} = true



Base.@kwdef mutable struct CapabilityStatement_SupportedMessage <: AbstractCapabilityStatement_SupportedMessage
    _mode::Union{AbstractElement, Nothing} = nothing
    definition::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_SupportedMessage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_SupportedMessage} = true



Base.@kwdef mutable struct CapabilityStatement_Document <: AbstractCapabilityStatement_Document
    _documentation::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    profile::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CapabilityStatement_Document} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CapabilityStatement_Document} = true



Base.@kwdef mutable struct CarePlan <: AbstractCarePlan
    _created::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    activity::Vector{AbstractCarePlan_Activity} = AbstractCarePlan_Activity[]
    addresses::Vector{AbstractReference} = AbstractReference[]
    author::Union{AbstractReference, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    careTeam::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    contributor::Vector{AbstractReference} = AbstractReference[]
    created::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    goal::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    period::Union{AbstractPeriod, Nothing} = nothing
    replaces::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "CarePlan"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    supportingInfo::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CarePlan} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CarePlan} = true



Base.@kwdef mutable struct CarePlan_Activity <: AbstractCarePlan_Activity
    detail::Union{AbstractCarePlan_Detail, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcomeCodeableConcept::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    outcomeReference::Vector{AbstractReference} = AbstractReference[]
    progress::Vector{AbstractAnnotation} = AbstractAnnotation[]
    reference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CarePlan_Activity} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CarePlan_Activity} = true



Base.@kwdef mutable struct CarePlan_Detail <: AbstractCarePlan_Detail
    _description::Union{AbstractElement, Nothing} = nothing
    _doNotPerform::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _kind::Union{AbstractElement, Nothing} = nothing
    _scheduledString::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    dailyAmount::Union{AbstractQuantity, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    doNotPerform::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    goal::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    kind::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    performer::Vector{AbstractReference} = AbstractReference[]
    productCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    productReference::Union{AbstractReference, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    scheduledPeriod::Union{AbstractPeriod, Nothing} = nothing
    scheduledString::Union{String, Nothing} = nothing
    scheduledTiming::Union{AbstractTiming, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CarePlan_Detail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CarePlan_Detail} = true



Base.@kwdef mutable struct CareTeam <: AbstractCareTeam
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    managingOrganization::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    participant::Vector{AbstractCareTeam_Participant} = AbstractCareTeam_Participant[]
    period::Union{AbstractPeriod, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "CareTeam"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CareTeam} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CareTeam} = true



Base.@kwdef mutable struct CareTeam_Participant <: AbstractCareTeam_Participant
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    member::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onBehalfOf::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    role::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CareTeam_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CareTeam_Participant} = true



Base.@kwdef mutable struct CatalogEntry <: AbstractCatalogEntry
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastUpdated::Union{AbstractElement, Nothing} = nothing
    _orderable::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _validTo::Union{AbstractElement, Nothing} = nothing
    additionalCharacteristic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    additionalClassification::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    additionalIdentifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    classification::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lastUpdated::Union{FHIRDateTime, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    orderable::Union{Bool, Nothing} = nothing
    referencedItem::Union{AbstractReference, Nothing} = nothing
    relatedEntry::Vector{AbstractCatalogEntry_RelatedEntry} = AbstractCatalogEntry_RelatedEntry[]
    resourceType::String = "CatalogEntry"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    validTo::Union{FHIRDateTime, Nothing} = nothing
    validityPeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CatalogEntry} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CatalogEntry} = true



Base.@kwdef mutable struct CatalogEntry_RelatedEntry <: AbstractCatalogEntry_RelatedEntry
    _relationtype::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    item::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    relationtype::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CatalogEntry_RelatedEntry} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CatalogEntry_RelatedEntry} = true



Base.@kwdef mutable struct ChargeItem <: AbstractChargeItem
    _definitionUri::Vector{AbstractElement} = AbstractElement[]
    _enteredDate::Union{AbstractElement, Nothing} = nothing
    _factorOverride::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _overrideReason::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    account::Vector{AbstractReference} = AbstractReference[]
    bodysite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    context::Union{AbstractReference, Nothing} = nothing
    costCenter::Union{AbstractReference, Nothing} = nothing
    definitionCanonical::Vector{String} = String[]
    definitionUri::Vector{String} = String[]
    enteredDate::Union{FHIRDateTime, Nothing} = nothing
    enterer::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factorOverride::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    occurrenceTiming::Union{AbstractTiming, Nothing} = nothing
    overrideReason::Union{String, Nothing} = nothing
    partOf::Vector{AbstractReference} = AbstractReference[]
    performer::Vector{AbstractChargeItem_Performer} = AbstractChargeItem_Performer[]
    performingOrganization::Union{AbstractReference, Nothing} = nothing
    priceOverride::Union{AbstractMoney, Nothing} = nothing
    productCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    productReference::Union{AbstractReference, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    reason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    requestingOrganization::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "ChargeItem"
    service::Vector{AbstractReference} = AbstractReference[]
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    supportingInformation::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ChargeItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ChargeItem} = true



Base.@kwdef mutable struct ChargeItem_Performer <: AbstractChargeItem_Performer
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    function_fhir::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ChargeItem_Performer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ChargeItem_Performer} = true



Base.@kwdef mutable struct ChargeItemDefinition <: AbstractChargeItemDefinition
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _derivedFromUri::Vector{AbstractElement} = AbstractElement[]
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    applicability::Vector{AbstractChargeItemDefinition_Applicability} = AbstractChargeItemDefinition_Applicability[]
    approvalDate::Union{Date, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    derivedFromUri::Vector{String} = String[]
    description::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instance::Vector{AbstractReference} = AbstractReference[]
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    partOf::Vector{String} = String[]
    propertyGroup::Vector{AbstractChargeItemDefinition_PropertyGroup} = AbstractChargeItemDefinition_PropertyGroup[]
    publisher::Union{String, Nothing} = nothing
    replaces::Vector{String} = String[]
    resourceType::String = "ChargeItemDefinition"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ChargeItemDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ChargeItemDefinition} = true



Base.@kwdef mutable struct ChargeItemDefinition_Applicability <: AbstractChargeItemDefinition_Applicability
    _description::Union{AbstractElement, Nothing} = nothing
    _expression::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ChargeItemDefinition_Applicability} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ChargeItemDefinition_Applicability} = true



Base.@kwdef mutable struct ChargeItemDefinition_PropertyGroup <: AbstractChargeItemDefinition_PropertyGroup
    applicability::Vector{AbstractChargeItemDefinition_Applicability} = AbstractChargeItemDefinition_Applicability[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    priceComponent::Vector{AbstractChargeItemDefinition_PriceComponent} = AbstractChargeItemDefinition_PriceComponent[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ChargeItemDefinition_PropertyGroup} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ChargeItemDefinition_PropertyGroup} = true



Base.@kwdef mutable struct ChargeItemDefinition_PriceComponent <: AbstractChargeItemDefinition_PriceComponent
    _factor::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ChargeItemDefinition_PriceComponent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ChargeItemDefinition_PriceComponent} = true



Base.@kwdef mutable struct Claim <: AbstractClaim
    _created::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    accident::Union{AbstractClaim_Accident, Nothing} = nothing
    billablePeriod::Union{AbstractPeriod, Nothing} = nothing
    careTeam::Vector{AbstractClaim_CareTeam} = AbstractClaim_CareTeam[]
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    diagnosis::Vector{AbstractClaim_Diagnosis} = AbstractClaim_Diagnosis[]
    enterer::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    facility::Union{AbstractReference, Nothing} = nothing
    fundsReserve::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    insurance::Vector{AbstractClaim_Insurance} = AbstractClaim_Insurance[]
    insurer::Union{AbstractReference, Nothing} = nothing
    item::Vector{AbstractClaim_Item} = AbstractClaim_Item[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    originalPrescription::Union{AbstractReference, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    payee::Union{AbstractClaim_Payee, Nothing} = nothing
    prescription::Union{AbstractReference, Nothing} = nothing
    priority::Union{AbstractCodeableConcept, Nothing} = nothing
    procedure::Vector{AbstractClaim_Procedure} = AbstractClaim_Procedure[]
    provider::Union{AbstractReference, Nothing} = nothing
    referral::Union{AbstractReference, Nothing} = nothing
    related::Vector{AbstractClaim_Related} = AbstractClaim_Related[]
    resourceType::String = "Claim"
    status::Union{String, Nothing} = nothing
    subType::Union{AbstractCodeableConcept, Nothing} = nothing
    supportingInfo::Vector{AbstractClaim_SupportingInfo} = AbstractClaim_SupportingInfo[]
    text::Union{AbstractNarrative, Nothing} = nothing
    total::Union{AbstractMoney, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim} = true



Base.@kwdef mutable struct Claim_Related <: AbstractClaim_Related
    claim::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Union{AbstractIdentifier, Nothing} = nothing
    relationship::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Related} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Related} = true



Base.@kwdef mutable struct Claim_Payee <: AbstractClaim_Payee
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    party::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Payee} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Payee} = true



Base.@kwdef mutable struct Claim_CareTeam <: AbstractClaim_CareTeam
    _responsible::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    provider::Union{AbstractReference, Nothing} = nothing
    qualification::Union{AbstractCodeableConcept, Nothing} = nothing
    responsible::Union{Bool, Nothing} = nothing
    role::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_CareTeam} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_CareTeam} = true



Base.@kwdef mutable struct Claim_SupportingInfo <: AbstractClaim_SupportingInfo
    _sequence::Union{AbstractElement, Nothing} = nothing
    _timingDate::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    timingDate::Union{String, Nothing} = nothing
    timingPeriod::Union{AbstractPeriod, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_SupportingInfo} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_SupportingInfo} = true



Base.@kwdef mutable struct Claim_Diagnosis <: AbstractClaim_Diagnosis
    _sequence::Union{AbstractElement, Nothing} = nothing
    diagnosisCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    diagnosisReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onAdmission::Union{AbstractCodeableConcept, Nothing} = nothing
    packageCode::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Diagnosis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Diagnosis} = true



Base.@kwdef mutable struct Claim_Procedure <: AbstractClaim_Procedure
    _date::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    procedureCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    procedureReference::Union{AbstractReference, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    udi::Vector{AbstractReference} = AbstractReference[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Procedure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Procedure} = true



Base.@kwdef mutable struct Claim_Insurance <: AbstractClaim_Insurance
    _businessArrangement::Union{AbstractElement, Nothing} = nothing
    _focal::Union{AbstractElement, Nothing} = nothing
    _preAuthRef::Vector{AbstractElement} = AbstractElement[]
    _sequence::Union{AbstractElement, Nothing} = nothing
    businessArrangement::Union{String, Nothing} = nothing
    claimResponse::Union{AbstractReference, Nothing} = nothing
    coverage::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focal::Union{Bool, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    preAuthRef::Vector{String} = String[]
    sequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Insurance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Insurance} = true



Base.@kwdef mutable struct Claim_Accident <: AbstractClaim_Accident
    _date::Union{AbstractElement, Nothing} = nothing
    date::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    locationAddress::Union{AbstractAddress, Nothing} = nothing
    locationReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Accident} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Accident} = true



Base.@kwdef mutable struct Claim_Item <: AbstractClaim_Item
    _careTeamSequence::Vector{AbstractElement} = AbstractElement[]
    _diagnosisSequence::Vector{AbstractElement} = AbstractElement[]
    _factor::Union{AbstractElement, Nothing} = nothing
    _informationSequence::Vector{AbstractElement} = AbstractElement[]
    _procedureSequence::Vector{AbstractElement} = AbstractElement[]
    _sequence::Union{AbstractElement, Nothing} = nothing
    _servicedDate::Union{AbstractElement, Nothing} = nothing
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    careTeamSequence::Vector{SafeInt32} = SafeInt32[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    detail::Vector{AbstractClaim_Detail} = AbstractClaim_Detail[]
    diagnosisSequence::Vector{SafeInt32} = SafeInt32[]
    encounter::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    informationSequence::Vector{SafeInt32} = SafeInt32[]
    locationAddress::Union{AbstractAddress, Nothing} = nothing
    locationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    locationReference::Union{AbstractReference, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    procedureSequence::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    revenue::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    servicedDate::Union{String, Nothing} = nothing
    servicedPeriod::Union{AbstractPeriod, Nothing} = nothing
    subSite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    udi::Vector{AbstractReference} = AbstractReference[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Item} = true



Base.@kwdef mutable struct Claim_Detail <: AbstractClaim_Detail
    _factor::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    revenue::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    subDetail::Vector{AbstractClaim_SubDetail} = AbstractClaim_SubDetail[]
    udi::Vector{AbstractReference} = AbstractReference[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_Detail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_Detail} = true



Base.@kwdef mutable struct Claim_SubDetail <: AbstractClaim_SubDetail
    _factor::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    revenue::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    udi::Vector{AbstractReference} = AbstractReference[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Claim_SubDetail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Claim_SubDetail} = true



Base.@kwdef mutable struct ClaimResponse <: AbstractClaimResponse
    _created::Union{AbstractElement, Nothing} = nothing
    _disposition::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _outcome::Union{AbstractElement, Nothing} = nothing
    _preAuthRef::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    addItem::Vector{AbstractClaimResponse_AddItem} = AbstractClaimResponse_AddItem[]
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    communicationRequest::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    disposition::Union{String, Nothing} = nothing
    error::Vector{AbstractClaimResponse_Error} = AbstractClaimResponse_Error[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    form::Union{AbstractAttachment, Nothing} = nothing
    formCode::Union{AbstractCodeableConcept, Nothing} = nothing
    fundsReserve::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    insurance::Vector{AbstractClaimResponse_Insurance} = AbstractClaimResponse_Insurance[]
    insurer::Union{AbstractReference, Nothing} = nothing
    item::Vector{AbstractClaimResponse_Item} = AbstractClaimResponse_Item[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    payeeType::Union{AbstractCodeableConcept, Nothing} = nothing
    payment::Union{AbstractClaimResponse_Payment, Nothing} = nothing
    preAuthPeriod::Union{AbstractPeriod, Nothing} = nothing
    preAuthRef::Union{String, Nothing} = nothing
    processNote::Vector{AbstractClaimResponse_ProcessNote} = AbstractClaimResponse_ProcessNote[]
    request::Union{AbstractReference, Nothing} = nothing
    requestor::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "ClaimResponse"
    status::Union{String, Nothing} = nothing
    subType::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    total::Vector{AbstractClaimResponse_Total} = AbstractClaimResponse_Total[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse} = true



Base.@kwdef mutable struct ClaimResponse_Item <: AbstractClaimResponse_Item
    _itemSequence::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    detail::Vector{AbstractClaimResponse_Detail} = AbstractClaimResponse_Detail[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    itemSequence::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    noteNumber::Vector{SafeInt32} = SafeInt32[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Item} = true



Base.@kwdef mutable struct ClaimResponse_Adjudication <: AbstractClaimResponse_Adjudication
    _value::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Adjudication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Adjudication} = true



Base.@kwdef mutable struct ClaimResponse_Detail <: AbstractClaimResponse_Detail
    _detailSequence::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    detailSequence::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    subDetail::Vector{AbstractClaimResponse_SubDetail} = AbstractClaimResponse_SubDetail[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Detail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Detail} = true



Base.@kwdef mutable struct ClaimResponse_SubDetail <: AbstractClaimResponse_SubDetail
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    _subDetailSequence::Union{AbstractElement, Nothing} = nothing
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    subDetailSequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_SubDetail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_SubDetail} = true



Base.@kwdef mutable struct ClaimResponse_AddItem <: AbstractClaimResponse_AddItem
    _detailSequence::Vector{AbstractElement} = AbstractElement[]
    _factor::Union{AbstractElement, Nothing} = nothing
    _itemSequence::Vector{AbstractElement} = AbstractElement[]
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    _servicedDate::Union{AbstractElement, Nothing} = nothing
    _subdetailSequence::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    detail::Vector{AbstractClaimResponse_Detail1} = AbstractClaimResponse_Detail1[]
    detailSequence::Vector{SafeInt32} = SafeInt32[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    itemSequence::Vector{SafeInt32} = SafeInt32[]
    locationAddress::Union{AbstractAddress, Nothing} = nothing
    locationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    locationReference::Union{AbstractReference, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    provider::Vector{AbstractReference} = AbstractReference[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    servicedDate::Union{String, Nothing} = nothing
    servicedPeriod::Union{AbstractPeriod, Nothing} = nothing
    subSite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    subdetailSequence::Vector{SafeInt32} = SafeInt32[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_AddItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_AddItem} = true



Base.@kwdef mutable struct ClaimResponse_Detail1 <: AbstractClaimResponse_Detail1
    _factor::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    subDetail::Vector{AbstractClaimResponse_SubDetail1} = AbstractClaimResponse_SubDetail1[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Detail1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Detail1} = true



Base.@kwdef mutable struct ClaimResponse_SubDetail1 <: AbstractClaimResponse_SubDetail1
    _factor::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractClaimResponse_Adjudication} = AbstractClaimResponse_Adjudication[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_SubDetail1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_SubDetail1} = true



Base.@kwdef mutable struct ClaimResponse_Total <: AbstractClaimResponse_Total
    amount::Union{AbstractMoney, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Total} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Total} = true



Base.@kwdef mutable struct ClaimResponse_Payment <: AbstractClaimResponse_Payment
    _date::Union{AbstractElement, Nothing} = nothing
    adjustment::Union{AbstractMoney, Nothing} = nothing
    adjustmentReason::Union{AbstractCodeableConcept, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    date::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Payment} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Payment} = true



Base.@kwdef mutable struct ClaimResponse_ProcessNote <: AbstractClaimResponse_ProcessNote
    _number::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    number::Union{SafeInt32, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_ProcessNote} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_ProcessNote} = true



Base.@kwdef mutable struct ClaimResponse_Insurance <: AbstractClaimResponse_Insurance
    _businessArrangement::Union{AbstractElement, Nothing} = nothing
    _focal::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    businessArrangement::Union{String, Nothing} = nothing
    claimResponse::Union{AbstractReference, Nothing} = nothing
    coverage::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focal::Union{Bool, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    sequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Insurance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Insurance} = true



Base.@kwdef mutable struct ClaimResponse_Error <: AbstractClaimResponse_Error
    _detailSequence::Union{AbstractElement, Nothing} = nothing
    _itemSequence::Union{AbstractElement, Nothing} = nothing
    _subDetailSequence::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    detailSequence::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    itemSequence::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    subDetailSequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClaimResponse_Error} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClaimResponse_Error} = true



Base.@kwdef mutable struct ClinicalImpression <: AbstractClinicalImpression
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _effectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _protocol::Vector{AbstractElement} = AbstractElement[]
    _status::Union{AbstractElement, Nothing} = nothing
    _summary::Union{AbstractElement, Nothing} = nothing
    assessor::Union{AbstractReference, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    effectiveDateTime::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    finding::Vector{AbstractClinicalImpression_Finding} = AbstractClinicalImpression_Finding[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    investigation::Vector{AbstractClinicalImpression_Investigation} = AbstractClinicalImpression_Investigation[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    previous::Union{AbstractReference, Nothing} = nothing
    problem::Vector{AbstractReference} = AbstractReference[]
    prognosisCodeableConcept::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    prognosisReference::Vector{AbstractReference} = AbstractReference[]
    protocol::Vector{String} = String[]
    resourceType::String = "ClinicalImpression"
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    summary::Union{String, Nothing} = nothing
    supportingInfo::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClinicalImpression} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClinicalImpression} = true



Base.@kwdef mutable struct ClinicalImpression_Investigation <: AbstractClinicalImpression_Investigation
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    item::Vector{AbstractReference} = AbstractReference[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClinicalImpression_Investigation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClinicalImpression_Investigation} = true



Base.@kwdef mutable struct ClinicalImpression_Finding <: AbstractClinicalImpression_Finding
    _basis::Union{AbstractElement, Nothing} = nothing
    basis::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    itemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    itemReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ClinicalImpression_Finding} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ClinicalImpression_Finding} = true



Base.@kwdef mutable struct CodeSystem <: AbstractCodeSystem
    _caseSensitive::Union{AbstractElement, Nothing} = nothing
    _compositional::Union{AbstractElement, Nothing} = nothing
    _content::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _count::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _hierarchyMeaning::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    _versionNeeded::Union{AbstractElement, Nothing} = nothing
    caseSensitive::Union{Bool, Nothing} = nothing
    compositional::Union{Bool, Nothing} = nothing
    concept::Vector{AbstractCodeSystem_Concept} = AbstractCodeSystem_Concept[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    content::Union{String, Nothing} = nothing
    copyright::Union{String, Nothing} = nothing
    count::Union{SafeInt32, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    filter::Vector{AbstractCodeSystem_Filter} = AbstractCodeSystem_Filter[]
    hierarchyMeaning::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    property::Vector{AbstractCodeSystem_Property} = AbstractCodeSystem_Property[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "CodeSystem"
    status::Union{String, Nothing} = nothing
    supplements::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    valueSet::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
    versionNeeded::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeSystem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeSystem} = true



Base.@kwdef mutable struct CodeSystem_Filter <: AbstractCodeSystem_Filter
    _code::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _operator::Vector{AbstractElement} = AbstractElement[]
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operator::Vector{String} = String[]
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeSystem_Filter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeSystem_Filter} = true



Base.@kwdef mutable struct CodeSystem_Property <: AbstractCodeSystem_Property
    _code::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _uri::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
    uri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeSystem_Property} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeSystem_Property} = true



Base.@kwdef mutable struct CodeSystem_Concept <: AbstractCodeSystem_Concept
    _code::Union{AbstractElement, Nothing} = nothing
    _definition::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    concept::Vector{AbstractCodeSystem_Concept} = AbstractCodeSystem_Concept[]
    definition::Union{String, Nothing} = nothing
    designation::Vector{AbstractCodeSystem_Designation} = AbstractCodeSystem_Designation[]
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    property::Vector{AbstractCodeSystem_Property1} = AbstractCodeSystem_Property1[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeSystem_Concept} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeSystem_Concept} = true



Base.@kwdef mutable struct CodeSystem_Designation <: AbstractCodeSystem_Designation
    _language::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    use::Union{AbstractCoding, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeSystem_Designation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeSystem_Designation} = true



Base.@kwdef mutable struct CodeSystem_Property1 <: AbstractCodeSystem_Property1
    _code::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CodeSystem_Property1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CodeSystem_Property1} = true



Base.@kwdef mutable struct Communication <: AbstractCommunication
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _language::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _received::Union{AbstractElement, Nothing} = nothing
    _sent::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    about::Vector{AbstractReference} = AbstractReference[]
    basedOn::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    inResponseTo::Vector{AbstractReference} = AbstractReference[]
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    language::Union{String, Nothing} = nothing
    medium::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    payload::Vector{AbstractCommunication_Payload} = AbstractCommunication_Payload[]
    priority::Union{String, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    received::Union{FHIRDateTime, Nothing} = nothing
    recipient::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "Communication"
    sender::Union{AbstractReference, Nothing} = nothing
    sent::Union{FHIRDateTime, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    topic::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Communication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Communication} = true



Base.@kwdef mutable struct Communication_Payload <: AbstractCommunication_Payload
    _contentString::Union{AbstractElement, Nothing} = nothing
    contentAttachment::Union{AbstractAttachment, Nothing} = nothing
    contentReference::Union{AbstractReference, Nothing} = nothing
    contentString::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Communication_Payload} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Communication_Payload} = true



Base.@kwdef mutable struct CommunicationRequest <: AbstractCommunicationRequest
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _doNotPerform::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    about::Vector{AbstractReference} = AbstractReference[]
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    doNotPerform::Union{Bool, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    medium::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    payload::Vector{AbstractCommunicationRequest_Payload} = AbstractCommunicationRequest_Payload[]
    priority::Union{String, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    recipient::Vector{AbstractReference} = AbstractReference[]
    replaces::Vector{AbstractReference} = AbstractReference[]
    requester::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "CommunicationRequest"
    sender::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CommunicationRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CommunicationRequest} = true



Base.@kwdef mutable struct CommunicationRequest_Payload <: AbstractCommunicationRequest_Payload
    _contentString::Union{AbstractElement, Nothing} = nothing
    contentAttachment::Union{AbstractAttachment, Nothing} = nothing
    contentReference::Union{AbstractReference, Nothing} = nothing
    contentString::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CommunicationRequest_Payload} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CommunicationRequest_Payload} = true



Base.@kwdef mutable struct CompartmentDefinition <: AbstractCompartmentDefinition
    _code::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _search::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resource::Vector{AbstractCompartmentDefinition_Resource} = AbstractCompartmentDefinition_Resource[]
    resourceType::String = "CompartmentDefinition"
    search::Union{Bool, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CompartmentDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CompartmentDefinition} = true



Base.@kwdef mutable struct CompartmentDefinition_Resource <: AbstractCompartmentDefinition_Resource
    _code::Union{AbstractElement, Nothing} = nothing
    _documentation::Union{AbstractElement, Nothing} = nothing
    _param::Vector{AbstractElement} = AbstractElement[]
    code::Union{String, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    param::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CompartmentDefinition_Resource} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CompartmentDefinition_Resource} = true



Base.@kwdef mutable struct Composition <: AbstractComposition
    _confidentiality::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    attester::Vector{AbstractComposition_Attester} = AbstractComposition_Attester[]
    author::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    confidentiality::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    custodian::Union{AbstractReference, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    event::Vector{AbstractComposition_Event} = AbstractComposition_Event[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    relatesTo::Vector{AbstractComposition_RelatesTo} = AbstractComposition_RelatesTo[]
    resourceType::String = "Composition"
    section::Vector{AbstractComposition_Section} = AbstractComposition_Section[]
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Composition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Composition} = true



Base.@kwdef mutable struct Composition_Attester <: AbstractComposition_Attester
    _mode::Union{AbstractElement, Nothing} = nothing
    _time::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    party::Union{AbstractReference, Nothing} = nothing
    time::Union{FHIRDateTime, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Composition_Attester} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Composition_Attester} = true



Base.@kwdef mutable struct Composition_RelatesTo <: AbstractComposition_RelatesTo
    _code::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    targetIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    targetReference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Composition_RelatesTo} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Composition_RelatesTo} = true



Base.@kwdef mutable struct Composition_Event <: AbstractComposition_Event
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    detail::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Composition_Event} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Composition_Event} = true



Base.@kwdef mutable struct Composition_Section <: AbstractComposition_Section
    _mode::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    author::Vector{AbstractReference} = AbstractReference[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    emptyReason::Union{AbstractCodeableConcept, Nothing} = nothing
    entry::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focus::Union{AbstractReference, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    orderedBy::Union{AbstractCodeableConcept, Nothing} = nothing
    section::Vector{AbstractComposition_Section} = AbstractComposition_Section[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Composition_Section} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Composition_Section} = true



Base.@kwdef mutable struct ConceptMap <: AbstractConceptMap
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _sourceCanonical::Union{AbstractElement, Nothing} = nothing
    _sourceUri::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _targetCanonical::Union{AbstractElement, Nothing} = nothing
    _targetUri::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    group::Vector{AbstractConceptMap_Group} = AbstractConceptMap_Group[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "ConceptMap"
    sourceCanonical::Union{String, Nothing} = nothing
    sourceUri::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    targetCanonical::Union{String, Nothing} = nothing
    targetUri::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ConceptMap} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ConceptMap} = true



Base.@kwdef mutable struct ConceptMap_Group <: AbstractConceptMap_Group
    _source::Union{AbstractElement, Nothing} = nothing
    _sourceVersion::Union{AbstractElement, Nothing} = nothing
    _target::Union{AbstractElement, Nothing} = nothing
    _targetVersion::Union{AbstractElement, Nothing} = nothing
    element::Vector{AbstractConceptMap_Element} = AbstractConceptMap_Element[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Union{String, Nothing} = nothing
    sourceVersion::Union{String, Nothing} = nothing
    target::Union{String, Nothing} = nothing
    targetVersion::Union{String, Nothing} = nothing
    unmapped::Union{AbstractConceptMap_Unmapped, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ConceptMap_Group} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ConceptMap_Group} = true



Base.@kwdef mutable struct ConceptMap_Element <: AbstractConceptMap_Element
    _code::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    target::Vector{AbstractConceptMap_Target} = AbstractConceptMap_Target[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ConceptMap_Element} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ConceptMap_Element} = true



Base.@kwdef mutable struct ConceptMap_Target <: AbstractConceptMap_Target
    _code::Union{AbstractElement, Nothing} = nothing
    _comment::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    _equivalence::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    dependsOn::Vector{AbstractConceptMap_DependsOn} = AbstractConceptMap_DependsOn[]
    display::Union{String, Nothing} = nothing
    equivalence::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    product::Vector{AbstractConceptMap_DependsOn} = AbstractConceptMap_DependsOn[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ConceptMap_Target} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ConceptMap_Target} = true



Base.@kwdef mutable struct ConceptMap_DependsOn <: AbstractConceptMap_DependsOn
    _display::Union{AbstractElement, Nothing} = nothing
    _property::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    property::Union{String, Nothing} = nothing
    system::Union{String, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ConceptMap_DependsOn} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ConceptMap_DependsOn} = true



Base.@kwdef mutable struct ConceptMap_Unmapped <: AbstractConceptMap_Unmapped
    _code::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ConceptMap_Unmapped} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ConceptMap_Unmapped} = true



Base.@kwdef mutable struct Condition <: AbstractCondition
    _abatementDateTime::Union{AbstractElement, Nothing} = nothing
    _abatementString::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _onsetDateTime::Union{AbstractElement, Nothing} = nothing
    _onsetString::Union{AbstractElement, Nothing} = nothing
    _recordedDate::Union{AbstractElement, Nothing} = nothing
    abatementAge::Union{AbstractAge, Nothing} = nothing
    abatementDateTime::Union{String, Nothing} = nothing
    abatementPeriod::Union{AbstractPeriod, Nothing} = nothing
    abatementRange::Union{AbstractRange, Nothing} = nothing
    abatementString::Union{String, Nothing} = nothing
    asserter::Union{AbstractReference, Nothing} = nothing
    bodySite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    clinicalStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    evidence::Vector{AbstractCondition_Evidence} = AbstractCondition_Evidence[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    onsetAge::Union{AbstractAge, Nothing} = nothing
    onsetDateTime::Union{String, Nothing} = nothing
    onsetPeriod::Union{AbstractPeriod, Nothing} = nothing
    onsetRange::Union{AbstractRange, Nothing} = nothing
    onsetString::Union{String, Nothing} = nothing
    recordedDate::Union{FHIRDateTime, Nothing} = nothing
    recorder::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "Condition"
    severity::Union{AbstractCodeableConcept, Nothing} = nothing
    stage::Vector{AbstractCondition_Stage} = AbstractCondition_Stage[]
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    verificationStatus::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Condition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Condition} = true



Base.@kwdef mutable struct Condition_Stage <: AbstractCondition_Stage
    assessment::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    summary::Union{AbstractCodeableConcept, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Condition_Stage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Condition_Stage} = true



Base.@kwdef mutable struct Condition_Evidence <: AbstractCondition_Evidence
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    detail::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Condition_Evidence} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Condition_Evidence} = true



Base.@kwdef mutable struct Consent <: AbstractConsent
    _dateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    dateTime::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    organization::Vector{AbstractReference} = AbstractReference[]
    patient::Union{AbstractReference, Nothing} = nothing
    performer::Vector{AbstractReference} = AbstractReference[]
    policy::Vector{AbstractConsent_Policy} = AbstractConsent_Policy[]
    policyRule::Union{AbstractCodeableConcept, Nothing} = nothing
    provision::Union{AbstractConsent_Provision, Nothing} = nothing
    resourceType::String = "Consent"
    scope::Union{AbstractCodeableConcept, Nothing} = nothing
    sourceAttachment::Union{AbstractAttachment, Nothing} = nothing
    sourceReference::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    verification::Vector{AbstractConsent_Verification} = AbstractConsent_Verification[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Consent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Consent} = true



Base.@kwdef mutable struct Consent_Policy <: AbstractConsent_Policy
    _authority::Union{AbstractElement, Nothing} = nothing
    _uri::Union{AbstractElement, Nothing} = nothing
    authority::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    uri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Consent_Policy} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Consent_Policy} = true



Base.@kwdef mutable struct Consent_Verification <: AbstractConsent_Verification
    _verificationDate::Union{AbstractElement, Nothing} = nothing
    _verified::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    verificationDate::Union{FHIRDateTime, Nothing} = nothing
    verified::Union{Bool, Nothing} = nothing
    verifiedWith::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Consent_Verification} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Consent_Verification} = true



Base.@kwdef mutable struct Consent_Provision <: AbstractConsent_Provision
    _type::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    actor::Vector{AbstractConsent_Actor} = AbstractConsent_Actor[]
    class::Vector{AbstractCoding} = AbstractCoding[]
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    data::Vector{AbstractConsent_Data} = AbstractConsent_Data[]
    dataPeriod::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    provision::Vector{AbstractConsent_Provision} = AbstractConsent_Provision[]
    purpose::Vector{AbstractCoding} = AbstractCoding[]
    securityLabel::Vector{AbstractCoding} = AbstractCoding[]
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Consent_Provision} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Consent_Provision} = true



Base.@kwdef mutable struct Consent_Actor <: AbstractConsent_Actor
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Union{AbstractReference, Nothing} = nothing
    role::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Consent_Actor} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Consent_Actor} = true



Base.@kwdef mutable struct Consent_Data <: AbstractConsent_Data
    _meaning::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    meaning::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Consent_Data} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Consent_Data} = true



Base.@kwdef mutable struct Contract <: AbstractContract
    _alias::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Union{AbstractElement, Nothing} = nothing
    _issued::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    alias::Vector{String} = String[]
    applies::Union{AbstractPeriod, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    authority::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    contentDefinition::Union{AbstractContract_ContentDefinition, Nothing} = nothing
    contentDerivative::Union{AbstractCodeableConcept, Nothing} = nothing
    domain::Vector{AbstractReference} = AbstractReference[]
    expirationType::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    friendly::Vector{AbstractContract_Friendly} = AbstractContract_Friendly[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Union{AbstractReference, Nothing} = nothing
    instantiatesUri::Union{String, Nothing} = nothing
    issued::Union{FHIRDateTime, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    legal::Vector{AbstractContract_Legal} = AbstractContract_Legal[]
    legalState::Union{AbstractCodeableConcept, Nothing} = nothing
    legallyBindingAttachment::Union{AbstractAttachment, Nothing} = nothing
    legallyBindingReference::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    relevantHistory::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "Contract"
    rule::Vector{AbstractContract_Rule} = AbstractContract_Rule[]
    scope::Union{AbstractCodeableConcept, Nothing} = nothing
    signer::Vector{AbstractContract_Signer} = AbstractContract_Signer[]
    site::Vector{AbstractReference} = AbstractReference[]
    status::Union{String, Nothing} = nothing
    subType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    subject::Vector{AbstractReference} = AbstractReference[]
    subtitle::Union{String, Nothing} = nothing
    supportingInfo::Vector{AbstractReference} = AbstractReference[]
    term::Vector{AbstractContract_Term} = AbstractContract_Term[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topicCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    topicReference::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract} = true



Base.@kwdef mutable struct Contract_ContentDefinition <: AbstractContract_ContentDefinition
    _copyright::Union{AbstractElement, Nothing} = nothing
    _publicationDate::Union{AbstractElement, Nothing} = nothing
    _publicationStatus::Union{AbstractElement, Nothing} = nothing
    copyright::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    publicationDate::Union{FHIRDateTime, Nothing} = nothing
    publicationStatus::Union{String, Nothing} = nothing
    publisher::Union{AbstractReference, Nothing} = nothing
    subType::Union{AbstractCodeableConcept, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_ContentDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_ContentDefinition} = true



Base.@kwdef mutable struct Contract_Term <: AbstractContract_Term
    _issued::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractContract_Action} = AbstractContract_Action[]
    applies::Union{AbstractPeriod, Nothing} = nothing
    asset::Vector{AbstractContract_Asset} = AbstractContract_Asset[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    group::Vector{AbstractContract_Term} = AbstractContract_Term[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    issued::Union{FHIRDateTime, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    offer::Union{AbstractContract_Offer, Nothing} = nothing
    securityLabel::Vector{AbstractContract_SecurityLabel} = AbstractContract_SecurityLabel[]
    subType::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    topicCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    topicReference::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Term} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Term} = true



Base.@kwdef mutable struct Contract_SecurityLabel <: AbstractContract_SecurityLabel
    _number::Vector{AbstractElement} = AbstractElement[]
    category::Vector{AbstractCoding} = AbstractCoding[]
    classification::Union{AbstractCoding, Nothing} = nothing
    control::Vector{AbstractCoding} = AbstractCoding[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    number::Vector{SafeInt32} = SafeInt32[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_SecurityLabel} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_SecurityLabel} = true



Base.@kwdef mutable struct Contract_Offer <: AbstractContract_Offer
    _linkId::Vector{AbstractElement} = AbstractElement[]
    _securityLabelNumber::Vector{AbstractElement} = AbstractElement[]
    _text::Union{AbstractElement, Nothing} = nothing
    answer::Vector{AbstractContract_Answer} = AbstractContract_Answer[]
    decision::Union{AbstractCodeableConcept, Nothing} = nothing
    decisionMode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    linkId::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    party::Vector{AbstractContract_Party} = AbstractContract_Party[]
    securityLabelNumber::Vector{SafeInt32} = SafeInt32[]
    text::Union{String, Nothing} = nothing
    topic::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Offer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Offer} = true



Base.@kwdef mutable struct Contract_Party <: AbstractContract_Party
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Vector{AbstractReference} = AbstractReference[]
    role::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Party} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Party} = true



Base.@kwdef mutable struct Contract_Answer <: AbstractContract_Answer
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Answer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Answer} = true



Base.@kwdef mutable struct Contract_Asset <: AbstractContract_Asset
    _condition::Union{AbstractElement, Nothing} = nothing
    _linkId::Vector{AbstractElement} = AbstractElement[]
    _securityLabelNumber::Vector{AbstractElement} = AbstractElement[]
    _text::Union{AbstractElement, Nothing} = nothing
    answer::Vector{AbstractContract_Answer} = AbstractContract_Answer[]
    condition::Union{String, Nothing} = nothing
    context::Vector{AbstractContract_Context} = AbstractContract_Context[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    linkId::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Vector{AbstractPeriod} = AbstractPeriod[]
    periodType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    relationship::Union{AbstractCoding, Nothing} = nothing
    scope::Union{AbstractCodeableConcept, Nothing} = nothing
    securityLabelNumber::Vector{SafeInt32} = SafeInt32[]
    subtype::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    text::Union{String, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    typeReference::Vector{AbstractReference} = AbstractReference[]
    usePeriod::Vector{AbstractPeriod} = AbstractPeriod[]
    valuedItem::Vector{AbstractContract_ValuedItem} = AbstractContract_ValuedItem[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Asset} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Asset} = true



Base.@kwdef mutable struct Contract_Context <: AbstractContract_Context
    _text::Union{AbstractElement, Nothing} = nothing
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Union{AbstractReference, Nothing} = nothing
    text::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Context} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Context} = true



Base.@kwdef mutable struct Contract_ValuedItem <: AbstractContract_ValuedItem
    _effectiveTime::Union{AbstractElement, Nothing} = nothing
    _factor::Union{AbstractElement, Nothing} = nothing
    _linkId::Vector{AbstractElement} = AbstractElement[]
    _payment::Union{AbstractElement, Nothing} = nothing
    _paymentDate::Union{AbstractElement, Nothing} = nothing
    _points::Union{AbstractElement, Nothing} = nothing
    _securityLabelNumber::Vector{AbstractElement} = AbstractElement[]
    effectiveTime::Union{FHIRDateTime, Nothing} = nothing
    entityCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    entityReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    linkId::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    payment::Union{String, Nothing} = nothing
    paymentDate::Union{FHIRDateTime, Nothing} = nothing
    points::Union{FHIRNumber, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    recipient::Union{AbstractReference, Nothing} = nothing
    responsible::Union{AbstractReference, Nothing} = nothing
    securityLabelNumber::Vector{SafeInt32} = SafeInt32[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_ValuedItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_ValuedItem} = true



Base.@kwdef mutable struct Contract_Action <: AbstractContract_Action
    _contextLinkId::Vector{AbstractElement} = AbstractElement[]
    _doNotPerform::Union{AbstractElement, Nothing} = nothing
    _linkId::Vector{AbstractElement} = AbstractElement[]
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _performerLinkId::Vector{AbstractElement} = AbstractElement[]
    _reason::Vector{AbstractElement} = AbstractElement[]
    _reasonLinkId::Vector{AbstractElement} = AbstractElement[]
    _requesterLinkId::Vector{AbstractElement} = AbstractElement[]
    _securityLabelNumber::Vector{AbstractElement} = AbstractElement[]
    context::Union{AbstractReference, Nothing} = nothing
    contextLinkId::Vector{String} = String[]
    doNotPerform::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    intent::Union{AbstractCodeableConcept, Nothing} = nothing
    linkId::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    occurrenceTiming::Union{AbstractTiming, Nothing} = nothing
    performer::Union{AbstractReference, Nothing} = nothing
    performerLinkId::Vector{String} = String[]
    performerRole::Union{AbstractCodeableConcept, Nothing} = nothing
    performerType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reason::Vector{String} = String[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonLinkId::Vector{String} = String[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    requester::Vector{AbstractReference} = AbstractReference[]
    requesterLinkId::Vector{String} = String[]
    securityLabelNumber::Vector{SafeInt32} = SafeInt32[]
    status::Union{AbstractCodeableConcept, Nothing} = nothing
    subject::Vector{AbstractContract_Subject} = AbstractContract_Subject[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Action} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Action} = true



Base.@kwdef mutable struct Contract_Subject <: AbstractContract_Subject
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Vector{AbstractReference} = AbstractReference[]
    role::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Subject} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Subject} = true



Base.@kwdef mutable struct Contract_Signer <: AbstractContract_Signer
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    party::Union{AbstractReference, Nothing} = nothing
    signature::Vector{AbstractSignature} = AbstractSignature[]
    type::Union{AbstractCoding, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Signer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Signer} = true



Base.@kwdef mutable struct Contract_Friendly <: AbstractContract_Friendly
    contentAttachment::Union{AbstractAttachment, Nothing} = nothing
    contentReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Friendly} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Friendly} = true



Base.@kwdef mutable struct Contract_Legal <: AbstractContract_Legal
    contentAttachment::Union{AbstractAttachment, Nothing} = nothing
    contentReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Legal} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Legal} = true



Base.@kwdef mutable struct Contract_Rule <: AbstractContract_Rule
    contentAttachment::Union{AbstractAttachment, Nothing} = nothing
    contentReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Contract_Rule} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Contract_Rule} = true



Base.@kwdef mutable struct Coverage <: AbstractCoverage
    _dependent::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _network::Union{AbstractElement, Nothing} = nothing
    _order::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subrogation::Union{AbstractElement, Nothing} = nothing
    _subscriberId::Union{AbstractElement, Nothing} = nothing
    beneficiary::Union{AbstractReference, Nothing} = nothing
    class::Vector{AbstractCoverage_Class} = AbstractCoverage_Class[]
    contained::Vector{ResourceList} = ResourceList[]
    contract::Vector{AbstractReference} = AbstractReference[]
    costToBeneficiary::Vector{AbstractCoverage_CostToBeneficiary} = AbstractCoverage_CostToBeneficiary[]
    dependent::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    network::Union{String, Nothing} = nothing
    order::Union{SafeInt32, Nothing} = nothing
    payor::Vector{AbstractReference} = AbstractReference[]
    period::Union{AbstractPeriod, Nothing} = nothing
    policyHolder::Union{AbstractReference, Nothing} = nothing
    relationship::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "Coverage"
    status::Union{String, Nothing} = nothing
    subrogation::Union{Bool, Nothing} = nothing
    subscriber::Union{AbstractReference, Nothing} = nothing
    subscriberId::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Coverage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Coverage} = true



Base.@kwdef mutable struct Coverage_Class <: AbstractCoverage_Class
    _name::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Coverage_Class} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Coverage_Class} = true



Base.@kwdef mutable struct Coverage_CostToBeneficiary <: AbstractCoverage_CostToBeneficiary
    exception::Vector{AbstractCoverage_Exception} = AbstractCoverage_Exception[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    valueMoney::Union{AbstractMoney, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Coverage_CostToBeneficiary} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Coverage_CostToBeneficiary} = true



Base.@kwdef mutable struct Coverage_Exception <: AbstractCoverage_Exception
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Coverage_Exception} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Coverage_Exception} = true



Base.@kwdef mutable struct CoverageEligibilityRequest <: AbstractCoverageEligibilityRequest
    _created::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _purpose::Vector{AbstractElement} = AbstractElement[]
    _servicedDate::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    enterer::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    facility::Union{AbstractReference, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    insurance::Vector{AbstractCoverageEligibilityRequest_Insurance} = AbstractCoverageEligibilityRequest_Insurance[]
    insurer::Union{AbstractReference, Nothing} = nothing
    item::Vector{AbstractCoverageEligibilityRequest_Item} = AbstractCoverageEligibilityRequest_Item[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patient::Union{AbstractReference, Nothing} = nothing
    priority::Union{AbstractCodeableConcept, Nothing} = nothing
    provider::Union{AbstractReference, Nothing} = nothing
    purpose::Vector{String} = String[]
    resourceType::String = "CoverageEligibilityRequest"
    servicedDate::Union{String, Nothing} = nothing
    servicedPeriod::Union{AbstractPeriod, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    supportingInfo::Vector{AbstractCoverageEligibilityRequest_SupportingInfo} = AbstractCoverageEligibilityRequest_SupportingInfo[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityRequest} = true



Base.@kwdef mutable struct CoverageEligibilityRequest_SupportingInfo <: AbstractCoverageEligibilityRequest_SupportingInfo
    _appliesToAll::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    appliesToAll::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    information::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    sequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityRequest_SupportingInfo} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityRequest_SupportingInfo} = true



Base.@kwdef mutable struct CoverageEligibilityRequest_Insurance <: AbstractCoverageEligibilityRequest_Insurance
    _businessArrangement::Union{AbstractElement, Nothing} = nothing
    _focal::Union{AbstractElement, Nothing} = nothing
    businessArrangement::Union{String, Nothing} = nothing
    coverage::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focal::Union{Bool, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityRequest_Insurance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityRequest_Insurance} = true



Base.@kwdef mutable struct CoverageEligibilityRequest_Item <: AbstractCoverageEligibilityRequest_Item
    _supportingInfoSequence::Vector{AbstractElement} = AbstractElement[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    detail::Vector{AbstractReference} = AbstractReference[]
    diagnosis::Vector{AbstractCoverageEligibilityRequest_Diagnosis} = AbstractCoverageEligibilityRequest_Diagnosis[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    facility::Union{AbstractReference, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    provider::Union{AbstractReference, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    supportingInfoSequence::Vector{SafeInt32} = SafeInt32[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityRequest_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityRequest_Item} = true



Base.@kwdef mutable struct CoverageEligibilityRequest_Diagnosis <: AbstractCoverageEligibilityRequest_Diagnosis
    diagnosisCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    diagnosisReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityRequest_Diagnosis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityRequest_Diagnosis} = true



Base.@kwdef mutable struct CoverageEligibilityResponse <: AbstractCoverageEligibilityResponse
    _created::Union{AbstractElement, Nothing} = nothing
    _disposition::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _outcome::Union{AbstractElement, Nothing} = nothing
    _preAuthRef::Union{AbstractElement, Nothing} = nothing
    _purpose::Vector{AbstractElement} = AbstractElement[]
    _servicedDate::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    disposition::Union{String, Nothing} = nothing
    error::Vector{AbstractCoverageEligibilityResponse_Error} = AbstractCoverageEligibilityResponse_Error[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    form::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    insurance::Vector{AbstractCoverageEligibilityResponse_Insurance} = AbstractCoverageEligibilityResponse_Insurance[]
    insurer::Union{AbstractReference, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    preAuthRef::Union{String, Nothing} = nothing
    purpose::Vector{String} = String[]
    request::Union{AbstractReference, Nothing} = nothing
    requestor::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "CoverageEligibilityResponse"
    servicedDate::Union{String, Nothing} = nothing
    servicedPeriod::Union{AbstractPeriod, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityResponse} = true



Base.@kwdef mutable struct CoverageEligibilityResponse_Insurance <: AbstractCoverageEligibilityResponse_Insurance
    _inforce::Union{AbstractElement, Nothing} = nothing
    benefitPeriod::Union{AbstractPeriod, Nothing} = nothing
    coverage::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    inforce::Union{Bool, Nothing} = nothing
    item::Vector{AbstractCoverageEligibilityResponse_Item} = AbstractCoverageEligibilityResponse_Item[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityResponse_Insurance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityResponse_Insurance} = true



Base.@kwdef mutable struct CoverageEligibilityResponse_Item <: AbstractCoverageEligibilityResponse_Item
    _authorizationRequired::Union{AbstractElement, Nothing} = nothing
    _authorizationUrl::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _excluded::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    authorizationRequired::Union{Bool, Nothing} = nothing
    authorizationSupporting::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    authorizationUrl::Union{String, Nothing} = nothing
    benefit::Vector{AbstractCoverageEligibilityResponse_Benefit} = AbstractCoverageEligibilityResponse_Benefit[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    excluded::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    network::Union{AbstractCodeableConcept, Nothing} = nothing
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    provider::Union{AbstractReference, Nothing} = nothing
    term::Union{AbstractCodeableConcept, Nothing} = nothing
    unit::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityResponse_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityResponse_Item} = true



Base.@kwdef mutable struct CoverageEligibilityResponse_Benefit <: AbstractCoverageEligibilityResponse_Benefit
    _allowedString::Union{AbstractElement, Nothing} = nothing
    _allowedUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _usedString::Union{AbstractElement, Nothing} = nothing
    _usedUnsignedInt::Union{AbstractElement, Nothing} = nothing
    allowedMoney::Union{AbstractMoney, Nothing} = nothing
    allowedString::Union{String, Nothing} = nothing
    allowedUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    usedMoney::Union{AbstractMoney, Nothing} = nothing
    usedString::Union{String, Nothing} = nothing
    usedUnsignedInt::Union{FHIRInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityResponse_Benefit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityResponse_Benefit} = true



Base.@kwdef mutable struct CoverageEligibilityResponse_Error <: AbstractCoverageEligibilityResponse_Error
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: CoverageEligibilityResponse_Error} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: CoverageEligibilityResponse_Error} = true



Base.@kwdef mutable struct DetectedIssue <: AbstractDetectedIssue
    _detail::Union{AbstractElement, Nothing} = nothing
    _identifiedDateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _reference::Union{AbstractElement, Nothing} = nothing
    _severity::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    detail::Union{String, Nothing} = nothing
    evidence::Vector{AbstractDetectedIssue_Evidence} = AbstractDetectedIssue_Evidence[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifiedDateTime::Union{String, Nothing} = nothing
    identifiedPeriod::Union{AbstractPeriod, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicated::Vector{AbstractReference} = AbstractReference[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    mitigation::Vector{AbstractDetectedIssue_Mitigation} = AbstractDetectedIssue_Mitigation[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patient::Union{AbstractReference, Nothing} = nothing
    reference::Union{String, Nothing} = nothing
    resourceType::String = "DetectedIssue"
    severity::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DetectedIssue} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DetectedIssue} = true



Base.@kwdef mutable struct DetectedIssue_Evidence <: AbstractDetectedIssue_Evidence
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    detail::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DetectedIssue_Evidence} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DetectedIssue_Evidence} = true



Base.@kwdef mutable struct DetectedIssue_Mitigation <: AbstractDetectedIssue_Mitigation
    _date::Union{AbstractElement, Nothing} = nothing
    action::Union{AbstractCodeableConcept, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DetectedIssue_Mitigation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DetectedIssue_Mitigation} = true



Base.@kwdef mutable struct Device <: AbstractDevice
    _distinctIdentifier::Union{AbstractElement, Nothing} = nothing
    _expirationDate::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lotNumber::Union{AbstractElement, Nothing} = nothing
    _manufactureDate::Union{AbstractElement, Nothing} = nothing
    _manufacturer::Union{AbstractElement, Nothing} = nothing
    _modelNumber::Union{AbstractElement, Nothing} = nothing
    _partNumber::Union{AbstractElement, Nothing} = nothing
    _serialNumber::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactPoint} = AbstractContactPoint[]
    contained::Vector{ResourceList} = ResourceList[]
    definition::Union{AbstractReference, Nothing} = nothing
    deviceName::Vector{AbstractDevice_DeviceName} = AbstractDevice_DeviceName[]
    distinctIdentifier::Union{String, Nothing} = nothing
    expirationDate::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    lotNumber::Union{String, Nothing} = nothing
    manufactureDate::Union{FHIRDateTime, Nothing} = nothing
    manufacturer::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modelNumber::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    owner::Union{AbstractReference, Nothing} = nothing
    parent::Union{AbstractReference, Nothing} = nothing
    partNumber::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    property::Vector{AbstractDevice_Property} = AbstractDevice_Property[]
    resourceType::String = "Device"
    safety::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    serialNumber::Union{String, Nothing} = nothing
    specialization::Vector{AbstractDevice_Specialization} = AbstractDevice_Specialization[]
    status::Union{String, Nothing} = nothing
    statusReason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    udiCarrier::Vector{AbstractDevice_UdiCarrier} = AbstractDevice_UdiCarrier[]
    url::Union{String, Nothing} = nothing
    version::Vector{AbstractDevice_Version} = AbstractDevice_Version[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Device} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Device} = true



Base.@kwdef mutable struct Device_UdiCarrier <: AbstractDevice_UdiCarrier
    _carrierAIDC::Union{AbstractElement, Nothing} = nothing
    _carrierHRF::Union{AbstractElement, Nothing} = nothing
    _deviceIdentifier::Union{AbstractElement, Nothing} = nothing
    _entryType::Union{AbstractElement, Nothing} = nothing
    _issuer::Union{AbstractElement, Nothing} = nothing
    _jurisdiction::Union{AbstractElement, Nothing} = nothing
    carrierAIDC::Union{String, Nothing} = nothing
    carrierHRF::Union{String, Nothing} = nothing
    deviceIdentifier::Union{String, Nothing} = nothing
    entryType::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    issuer::Union{String, Nothing} = nothing
    jurisdiction::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Device_UdiCarrier} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Device_UdiCarrier} = true



Base.@kwdef mutable struct Device_DeviceName <: AbstractDevice_DeviceName
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Device_DeviceName} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Device_DeviceName} = true



Base.@kwdef mutable struct Device_Specialization <: AbstractDevice_Specialization
    _version::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    systemType::Union{AbstractCodeableConcept, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Device_Specialization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Device_Specialization} = true



Base.@kwdef mutable struct Device_Version <: AbstractDevice_Version
    _value::Union{AbstractElement, Nothing} = nothing
    component::Union{AbstractIdentifier, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Device_Version} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Device_Version} = true



Base.@kwdef mutable struct Device_Property <: AbstractDevice_Property
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    valueQuantity::Vector{AbstractQuantity} = AbstractQuantity[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Device_Property} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Device_Property} = true



Base.@kwdef mutable struct DeviceDefinition <: AbstractDeviceDefinition
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _manufacturerString::Union{AbstractElement, Nothing} = nothing
    _modelNumber::Union{AbstractElement, Nothing} = nothing
    _onlineInformation::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Vector{AbstractElement} = AbstractElement[]
    capability::Vector{AbstractDeviceDefinition_Capability} = AbstractDeviceDefinition_Capability[]
    contact::Vector{AbstractContactPoint} = AbstractContactPoint[]
    contained::Vector{ResourceList} = ResourceList[]
    deviceName::Vector{AbstractDeviceDefinition_DeviceName} = AbstractDeviceDefinition_DeviceName[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    languageCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    manufacturerReference::Union{AbstractReference, Nothing} = nothing
    manufacturerString::Union{String, Nothing} = nothing
    material::Vector{AbstractDeviceDefinition_Material} = AbstractDeviceDefinition_Material[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modelNumber::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    onlineInformation::Union{String, Nothing} = nothing
    owner::Union{AbstractReference, Nothing} = nothing
    parentDevice::Union{AbstractReference, Nothing} = nothing
    physicalCharacteristics::Union{AbstractProdCharacteristic, Nothing} = nothing
    property::Vector{AbstractDeviceDefinition_Property} = AbstractDeviceDefinition_Property[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    resourceType::String = "DeviceDefinition"
    safety::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    shelfLifeStorage::Vector{AbstractProductShelfLife} = AbstractProductShelfLife[]
    specialization::Vector{AbstractDeviceDefinition_Specialization} = AbstractDeviceDefinition_Specialization[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    udiDeviceIdentifier::Vector{AbstractDeviceDefinition_UdiDeviceIdentifier} = AbstractDeviceDefinition_UdiDeviceIdentifier[]
    url::Union{String, Nothing} = nothing
    version::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition} = true



Base.@kwdef mutable struct DeviceDefinition_UdiDeviceIdentifier <: AbstractDeviceDefinition_UdiDeviceIdentifier
    _deviceIdentifier::Union{AbstractElement, Nothing} = nothing
    _issuer::Union{AbstractElement, Nothing} = nothing
    _jurisdiction::Union{AbstractElement, Nothing} = nothing
    deviceIdentifier::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    issuer::Union{String, Nothing} = nothing
    jurisdiction::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition_UdiDeviceIdentifier} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition_UdiDeviceIdentifier} = true



Base.@kwdef mutable struct DeviceDefinition_DeviceName <: AbstractDeviceDefinition_DeviceName
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition_DeviceName} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition_DeviceName} = true



Base.@kwdef mutable struct DeviceDefinition_Specialization <: AbstractDeviceDefinition_Specialization
    _systemType::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    systemType::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition_Specialization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition_Specialization} = true



Base.@kwdef mutable struct DeviceDefinition_Capability <: AbstractDeviceDefinition_Capability
    description::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition_Capability} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition_Capability} = true



Base.@kwdef mutable struct DeviceDefinition_Property <: AbstractDeviceDefinition_Property
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    valueQuantity::Vector{AbstractQuantity} = AbstractQuantity[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition_Property} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition_Property} = true



Base.@kwdef mutable struct DeviceDefinition_Material <: AbstractDeviceDefinition_Material
    _allergenicIndicator::Union{AbstractElement, Nothing} = nothing
    _alternate::Union{AbstractElement, Nothing} = nothing
    allergenicIndicator::Union{Bool, Nothing} = nothing
    alternate::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    substance::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceDefinition_Material} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceDefinition_Material} = true



Base.@kwdef mutable struct DeviceMetric <: AbstractDeviceMetric
    _category::Union{AbstractElement, Nothing} = nothing
    _color::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _operationalStatus::Union{AbstractElement, Nothing} = nothing
    calibration::Vector{AbstractDeviceMetric_Calibration} = AbstractDeviceMetric_Calibration[]
    category::Union{String, Nothing} = nothing
    color::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    measurementPeriod::Union{AbstractTiming, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operationalStatus::Union{String, Nothing} = nothing
    parent::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "DeviceMetric"
    source::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    unit::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceMetric} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceMetric} = true



Base.@kwdef mutable struct DeviceMetric_Calibration <: AbstractDeviceMetric_Calibration
    _state::Union{AbstractElement, Nothing} = nothing
    _time::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    state::Union{String, Nothing} = nothing
    time::Union{ZonedDateTime, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceMetric_Calibration} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceMetric_Calibration} = true



Base.@kwdef mutable struct DeviceRequest <: AbstractDeviceRequest
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    codeCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    codeReference::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    insurance::Vector{AbstractReference} = AbstractReference[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    occurrenceTiming::Union{AbstractTiming, Nothing} = nothing
    parameter::Vector{AbstractDeviceRequest_Parameter} = AbstractDeviceRequest_Parameter[]
    performer::Union{AbstractReference, Nothing} = nothing
    performerType::Union{AbstractCodeableConcept, Nothing} = nothing
    priorRequest::Vector{AbstractReference} = AbstractReference[]
    priority::Union{String, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    relevantHistory::Vector{AbstractReference} = AbstractReference[]
    requester::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "DeviceRequest"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    supportingInfo::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceRequest} = true



Base.@kwdef mutable struct DeviceRequest_Parameter <: AbstractDeviceRequest_Parameter
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceRequest_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceRequest_Parameter} = true



Base.@kwdef mutable struct DeviceUseStatement <: AbstractDeviceUseStatement
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _recordedOn::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _timingDateTime::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    derivedFrom::Vector{AbstractReference} = AbstractReference[]
    device::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    recordedOn::Union{FHIRDateTime, Nothing} = nothing
    resourceType::String = "DeviceUseStatement"
    source::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    timingDateTime::Union{String, Nothing} = nothing
    timingPeriod::Union{AbstractPeriod, Nothing} = nothing
    timingTiming::Union{AbstractTiming, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DeviceUseStatement} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DeviceUseStatement} = true



Base.@kwdef mutable struct DiagnosticReport <: AbstractDiagnosticReport
    _conclusion::Union{AbstractElement, Nothing} = nothing
    _effectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _issued::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    conclusion::Union{String, Nothing} = nothing
    conclusionCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    effectiveDateTime::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    imagingStudy::Vector{AbstractReference} = AbstractReference[]
    implicitRules::Union{String, Nothing} = nothing
    issued::Union{ZonedDateTime, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    media::Vector{AbstractDiagnosticReport_Media} = AbstractDiagnosticReport_Media[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    performer::Vector{AbstractReference} = AbstractReference[]
    presentedForm::Vector{AbstractAttachment} = AbstractAttachment[]
    resourceType::String = "DiagnosticReport"
    result::Vector{AbstractReference} = AbstractReference[]
    resultsInterpreter::Vector{AbstractReference} = AbstractReference[]
    specimen::Vector{AbstractReference} = AbstractReference[]
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DiagnosticReport} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DiagnosticReport} = true



Base.@kwdef mutable struct DiagnosticReport_Media <: AbstractDiagnosticReport_Media
    _comment::Union{AbstractElement, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    link::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DiagnosticReport_Media} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DiagnosticReport_Media} = true



Base.@kwdef mutable struct DocumentManifest <: AbstractDocumentManifest
    _created::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _source::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    author::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    content::Vector{AbstractReference} = AbstractReference[]
    created::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    masterIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    recipient::Vector{AbstractReference} = AbstractReference[]
    related::Vector{AbstractDocumentManifest_Related} = AbstractDocumentManifest_Related[]
    resourceType::String = "DocumentManifest"
    source::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DocumentManifest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DocumentManifest} = true



Base.@kwdef mutable struct DocumentManifest_Related <: AbstractDocumentManifest_Related
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    ref::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DocumentManifest_Related} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DocumentManifest_Related} = true



Base.@kwdef mutable struct DocumentReference <: AbstractDocumentReference
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _docStatus::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    authenticator::Union{AbstractReference, Nothing} = nothing
    author::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    content::Vector{AbstractDocumentReference_Content} = AbstractDocumentReference_Content[]
    context::Union{AbstractDocumentReference_Context, Nothing} = nothing
    custodian::Union{AbstractReference, Nothing} = nothing
    date::Union{ZonedDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    docStatus::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    masterIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    relatesTo::Vector{AbstractDocumentReference_RelatesTo} = AbstractDocumentReference_RelatesTo[]
    resourceType::String = "DocumentReference"
    securityLabel::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DocumentReference} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DocumentReference} = true



Base.@kwdef mutable struct DocumentReference_RelatesTo <: AbstractDocumentReference_RelatesTo
    _code::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    target::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DocumentReference_RelatesTo} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DocumentReference_RelatesTo} = true



Base.@kwdef mutable struct DocumentReference_Content <: AbstractDocumentReference_Content
    attachment::Union{AbstractAttachment, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    format::Union{AbstractCoding, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: DocumentReference_Content} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DocumentReference_Content} = true



Base.@kwdef mutable struct DocumentReference_Context <: AbstractDocumentReference_Context
    encounter::Vector{AbstractReference} = AbstractReference[]
    event::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    facilityType::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    practiceSetting::Union{AbstractCodeableConcept, Nothing} = nothing
    related::Vector{AbstractReference} = AbstractReference[]
    sourcePatientInfo::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: DocumentReference_Context} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: DocumentReference_Context} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis <: AbstractEffectEvidenceSynthesis
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    certainty::Vector{AbstractEffectEvidenceSynthesis_Certainty} = AbstractEffectEvidenceSynthesis_Certainty[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectEstimate::Vector{AbstractEffectEvidenceSynthesis_EffectEstimate} = AbstractEffectEvidenceSynthesis_EffectEstimate[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    exposure::Union{AbstractReference, Nothing} = nothing
    exposureAlternative::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    outcome::Union{AbstractReference, Nothing} = nothing
    population::Union{AbstractReference, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "EffectEvidenceSynthesis"
    resultsByExposure::Vector{AbstractEffectEvidenceSynthesis_ResultsByExposure} = AbstractEffectEvidenceSynthesis_ResultsByExposure[]
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    sampleSize::Union{AbstractEffectEvidenceSynthesis_SampleSize, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    studyType::Union{AbstractCodeableConcept, Nothing} = nothing
    synthesisType::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis_SampleSize <: AbstractEffectEvidenceSynthesis_SampleSize
    _description::Union{AbstractElement, Nothing} = nothing
    _numberOfParticipants::Union{AbstractElement, Nothing} = nothing
    _numberOfStudies::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numberOfParticipants::Union{SafeInt32, Nothing} = nothing
    numberOfStudies::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis_SampleSize} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis_SampleSize} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis_ResultsByExposure <: AbstractEffectEvidenceSynthesis_ResultsByExposure
    _description::Union{AbstractElement, Nothing} = nothing
    _exposureState::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    exposureState::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    riskEvidenceSynthesis::Union{AbstractReference, Nothing} = nothing
    variantState::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis_ResultsByExposure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis_ResultsByExposure} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis_EffectEstimate <: AbstractEffectEvidenceSynthesis_EffectEstimate
    _description::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    precisionEstimate::Vector{AbstractEffectEvidenceSynthesis_PrecisionEstimate} = AbstractEffectEvidenceSynthesis_PrecisionEstimate[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    unitOfMeasure::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
    variantState::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis_EffectEstimate} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis_EffectEstimate} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis_PrecisionEstimate <: AbstractEffectEvidenceSynthesis_PrecisionEstimate
    _from::Union{AbstractElement, Nothing} = nothing
    _level::Union{AbstractElement, Nothing} = nothing
    _to::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    from::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    level::Union{FHIRNumber, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    to::Union{FHIRNumber, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis_PrecisionEstimate} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis_PrecisionEstimate} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis_Certainty <: AbstractEffectEvidenceSynthesis_Certainty
    certaintySubcomponent::Vector{AbstractEffectEvidenceSynthesis_CertaintySubcomponent} = AbstractEffectEvidenceSynthesis_CertaintySubcomponent[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    rating::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis_Certainty} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis_Certainty} = true



Base.@kwdef mutable struct EffectEvidenceSynthesis_CertaintySubcomponent <: AbstractEffectEvidenceSynthesis_CertaintySubcomponent
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    rating::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EffectEvidenceSynthesis_CertaintySubcomponent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EffectEvidenceSynthesis_CertaintySubcomponent} = true



Base.@kwdef mutable struct Encounter <: AbstractEncounter
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    account::Vector{AbstractReference} = AbstractReference[]
    appointment::Vector{AbstractReference} = AbstractReference[]
    basedOn::Vector{AbstractReference} = AbstractReference[]
    class::Union{AbstractCoding, Nothing} = nothing
    classHistory::Vector{AbstractEncounter_ClassHistory} = AbstractEncounter_ClassHistory[]
    contained::Vector{ResourceList} = ResourceList[]
    diagnosis::Vector{AbstractEncounter_Diagnosis} = AbstractEncounter_Diagnosis[]
    episodeOfCare::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    hospitalization::Union{AbstractEncounter_Hospitalization, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    length::Union{AbstractDuration, Nothing} = nothing
    location::Vector{AbstractEncounter_Location} = AbstractEncounter_Location[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    partOf::Union{AbstractReference, Nothing} = nothing
    participant::Vector{AbstractEncounter_Participant} = AbstractEncounter_Participant[]
    period::Union{AbstractPeriod, Nothing} = nothing
    priority::Union{AbstractCodeableConcept, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "Encounter"
    serviceProvider::Union{AbstractReference, Nothing} = nothing
    serviceType::Union{AbstractCodeableConcept, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    statusHistory::Vector{AbstractEncounter_StatusHistory} = AbstractEncounter_StatusHistory[]
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter} = true



Base.@kwdef mutable struct Encounter_StatusHistory <: AbstractEncounter_StatusHistory
    _status::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    status::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter_StatusHistory} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter_StatusHistory} = true



Base.@kwdef mutable struct Encounter_ClassHistory <: AbstractEncounter_ClassHistory
    class::Union{AbstractCoding, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter_ClassHistory} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter_ClassHistory} = true



Base.@kwdef mutable struct Encounter_Participant <: AbstractEncounter_Participant
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    individual::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter_Participant} = true



Base.@kwdef mutable struct Encounter_Diagnosis <: AbstractEncounter_Diagnosis
    _rank::Union{AbstractElement, Nothing} = nothing
    condition::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    rank::Union{SafeInt32, Nothing} = nothing
    use::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter_Diagnosis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter_Diagnosis} = true



Base.@kwdef mutable struct Encounter_Hospitalization <: AbstractEncounter_Hospitalization
    admitSource::Union{AbstractCodeableConcept, Nothing} = nothing
    destination::Union{AbstractReference, Nothing} = nothing
    dietPreference::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    dischargeDisposition::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    origin::Union{AbstractReference, Nothing} = nothing
    preAdmissionIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    reAdmission::Union{AbstractCodeableConcept, Nothing} = nothing
    specialArrangement::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    specialCourtesy::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter_Hospitalization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter_Hospitalization} = true



Base.@kwdef mutable struct Encounter_Location <: AbstractEncounter_Location
    _status::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    physicalType::Union{AbstractCodeableConcept, Nothing} = nothing
    status::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Encounter_Location} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Encounter_Location} = true



Base.@kwdef mutable struct Endpoint <: AbstractEndpoint
    _address::Union{AbstractElement, Nothing} = nothing
    _header::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _payloadMimeType::Vector{AbstractElement} = AbstractElement[]
    _status::Union{AbstractElement, Nothing} = nothing
    address::Union{String, Nothing} = nothing
    connectionType::Union{AbstractCoding, Nothing} = nothing
    contact::Vector{AbstractContactPoint} = AbstractContactPoint[]
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    header::Vector{String} = String[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    managingOrganization::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    payloadMimeType::Vector{String} = String[]
    payloadType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    period::Union{AbstractPeriod, Nothing} = nothing
    resourceType::String = "Endpoint"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Endpoint} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Endpoint} = true



Base.@kwdef mutable struct EnrollmentRequest <: AbstractEnrollmentRequest
    _created::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    candidate::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    coverage::Union{AbstractReference, Nothing} = nothing
    created::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    insurer::Union{AbstractReference, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    provider::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "EnrollmentRequest"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EnrollmentRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EnrollmentRequest} = true



Base.@kwdef mutable struct EnrollmentResponse <: AbstractEnrollmentResponse
    _created::Union{AbstractElement, Nothing} = nothing
    _disposition::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _outcome::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    disposition::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    organization::Union{AbstractReference, Nothing} = nothing
    outcome::Union{String, Nothing} = nothing
    request::Union{AbstractReference, Nothing} = nothing
    requestProvider::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "EnrollmentResponse"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EnrollmentResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EnrollmentResponse} = true



Base.@kwdef mutable struct EpisodeOfCare <: AbstractEpisodeOfCare
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    account::Vector{AbstractReference} = AbstractReference[]
    careManager::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    diagnosis::Vector{AbstractEpisodeOfCare_Diagnosis} = AbstractEpisodeOfCare_Diagnosis[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    managingOrganization::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patient::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    referralRequest::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "EpisodeOfCare"
    status::Union{String, Nothing} = nothing
    statusHistory::Vector{AbstractEpisodeOfCare_StatusHistory} = AbstractEpisodeOfCare_StatusHistory[]
    team::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: EpisodeOfCare} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EpisodeOfCare} = true



Base.@kwdef mutable struct EpisodeOfCare_StatusHistory <: AbstractEpisodeOfCare_StatusHistory
    _status::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    status::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EpisodeOfCare_StatusHistory} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EpisodeOfCare_StatusHistory} = true



Base.@kwdef mutable struct EpisodeOfCare_Diagnosis <: AbstractEpisodeOfCare_Diagnosis
    _rank::Union{AbstractElement, Nothing} = nothing
    condition::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    rank::Union{SafeInt32, Nothing} = nothing
    role::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EpisodeOfCare_Diagnosis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EpisodeOfCare_Diagnosis} = true



Base.@kwdef mutable struct EventDefinition <: AbstractEventDefinition
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "EventDefinition"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    trigger::Vector{AbstractTriggerDefinition} = AbstractTriggerDefinition[]
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EventDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EventDefinition} = true



Base.@kwdef mutable struct Evidence <: AbstractEvidence
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _shortTitle::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    exposureBackground::Union{AbstractReference, Nothing} = nothing
    exposureVariant::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    outcome::Vector{AbstractReference} = AbstractReference[]
    publisher::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "Evidence"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    shortTitle::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Evidence} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Evidence} = true



Base.@kwdef mutable struct EvidenceVariable <: AbstractEvidenceVariable
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _shortTitle::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    characteristic::Vector{AbstractEvidenceVariable_Characteristic} = AbstractEvidenceVariable_Characteristic[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    publisher::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "EvidenceVariable"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    shortTitle::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: EvidenceVariable} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EvidenceVariable} = true



Base.@kwdef mutable struct EvidenceVariable_Characteristic <: AbstractEvidenceVariable_Characteristic
    _definitionCanonical::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _exclude::Union{AbstractElement, Nothing} = nothing
    _groupMeasure::Union{AbstractElement, Nothing} = nothing
    _participantEffectiveDateTime::Union{AbstractElement, Nothing} = nothing
    definitionCanonical::Union{String, Nothing} = nothing
    definitionCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    definitionDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    definitionExpression::Union{AbstractExpression, Nothing} = nothing
    definitionReference::Union{AbstractReference, Nothing} = nothing
    definitionTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    exclude::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupMeasure::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    participantEffectiveDateTime::Union{String, Nothing} = nothing
    participantEffectiveDuration::Union{AbstractDuration, Nothing} = nothing
    participantEffectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    participantEffectiveTiming::Union{AbstractTiming, Nothing} = nothing
    timeFromStart::Union{AbstractDuration, Nothing} = nothing
    usageContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: EvidenceVariable_Characteristic} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: EvidenceVariable_Characteristic} = true



Base.@kwdef mutable struct ExampleScenario <: AbstractExampleScenario
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    actor::Vector{AbstractExampleScenario_Actor} = AbstractExampleScenario_Actor[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instance::Vector{AbstractExampleScenario_Instance} = AbstractExampleScenario_Instance[]
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    process::Vector{AbstractExampleScenario_Process} = AbstractExampleScenario_Process[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "ExampleScenario"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
    workflow::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario} = true



Base.@kwdef mutable struct ExampleScenario_Actor <: AbstractExampleScenario_Actor
    _actorId::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    actorId::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Actor} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Actor} = true



Base.@kwdef mutable struct ExampleScenario_Instance <: AbstractExampleScenario_Instance
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _resourceId::Union{AbstractElement, Nothing} = nothing
    _resourceType::Union{AbstractElement, Nothing} = nothing
    containedInstance::Vector{AbstractExampleScenario_ContainedInstance} = AbstractExampleScenario_ContainedInstance[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    resourceId::Union{String, Nothing} = nothing
    resourceType::String = "ExampleScenario_Instance"
    version::Vector{AbstractExampleScenario_Version} = AbstractExampleScenario_Version[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Instance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Instance} = true



Base.@kwdef mutable struct ExampleScenario_Version <: AbstractExampleScenario_Version
    _description::Union{AbstractElement, Nothing} = nothing
    _versionId::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    versionId::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Version} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Version} = true



Base.@kwdef mutable struct ExampleScenario_ContainedInstance <: AbstractExampleScenario_ContainedInstance
    _resourceId::Union{AbstractElement, Nothing} = nothing
    _versionId::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceId::Union{String, Nothing} = nothing
    versionId::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_ContainedInstance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_ContainedInstance} = true



Base.@kwdef mutable struct ExampleScenario_Process <: AbstractExampleScenario_Process
    _description::Union{AbstractElement, Nothing} = nothing
    _postConditions::Union{AbstractElement, Nothing} = nothing
    _preConditions::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    postConditions::Union{String, Nothing} = nothing
    preConditions::Union{String, Nothing} = nothing
    step::Vector{AbstractExampleScenario_Step} = AbstractExampleScenario_Step[]
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Process} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Process} = true



Base.@kwdef mutable struct ExampleScenario_Step <: AbstractExampleScenario_Step
    _pause::Union{AbstractElement, Nothing} = nothing
    alternative::Vector{AbstractExampleScenario_Alternative} = AbstractExampleScenario_Alternative[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractExampleScenario_Operation, Nothing} = nothing
    pause::Union{Bool, Nothing} = nothing
    process::Vector{AbstractExampleScenario_Process} = AbstractExampleScenario_Process[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Step} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Step} = true



Base.@kwdef mutable struct ExampleScenario_Operation <: AbstractExampleScenario_Operation
    _description::Union{AbstractElement, Nothing} = nothing
    _initiator::Union{AbstractElement, Nothing} = nothing
    _initiatorActive::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _number::Union{AbstractElement, Nothing} = nothing
    _receiver::Union{AbstractElement, Nothing} = nothing
    _receiverActive::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    initiator::Union{String, Nothing} = nothing
    initiatorActive::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    number::Union{String, Nothing} = nothing
    receiver::Union{String, Nothing} = nothing
    receiverActive::Union{Bool, Nothing} = nothing
    request::Union{AbstractExampleScenario_ContainedInstance, Nothing} = nothing
    response::Union{AbstractExampleScenario_ContainedInstance, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Operation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Operation} = true



Base.@kwdef mutable struct ExampleScenario_Alternative <: AbstractExampleScenario_Alternative
    _description::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    step::Vector{AbstractExampleScenario_Step} = AbstractExampleScenario_Step[]
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExampleScenario_Alternative} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExampleScenario_Alternative} = true



Base.@kwdef mutable struct ExplanationOfBenefit <: AbstractExplanationOfBenefit
    _created::Union{AbstractElement, Nothing} = nothing
    _disposition::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _outcome::Union{AbstractElement, Nothing} = nothing
    _preAuthRef::Vector{AbstractElement} = AbstractElement[]
    _precedence::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    accident::Union{AbstractExplanationOfBenefit_Accident, Nothing} = nothing
    addItem::Vector{AbstractExplanationOfBenefit_AddItem} = AbstractExplanationOfBenefit_AddItem[]
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    benefitBalance::Vector{AbstractExplanationOfBenefit_BenefitBalance} = AbstractExplanationOfBenefit_BenefitBalance[]
    benefitPeriod::Union{AbstractPeriod, Nothing} = nothing
    billablePeriod::Union{AbstractPeriod, Nothing} = nothing
    careTeam::Vector{AbstractExplanationOfBenefit_CareTeam} = AbstractExplanationOfBenefit_CareTeam[]
    claim::Union{AbstractReference, Nothing} = nothing
    claimResponse::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    diagnosis::Vector{AbstractExplanationOfBenefit_Diagnosis} = AbstractExplanationOfBenefit_Diagnosis[]
    disposition::Union{String, Nothing} = nothing
    enterer::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    facility::Union{AbstractReference, Nothing} = nothing
    form::Union{AbstractAttachment, Nothing} = nothing
    formCode::Union{AbstractCodeableConcept, Nothing} = nothing
    fundsReserve::Union{AbstractCodeableConcept, Nothing} = nothing
    fundsReserveRequested::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    insurance::Vector{AbstractExplanationOfBenefit_Insurance} = AbstractExplanationOfBenefit_Insurance[]
    insurer::Union{AbstractReference, Nothing} = nothing
    item::Vector{AbstractExplanationOfBenefit_Item} = AbstractExplanationOfBenefit_Item[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    originalPrescription::Union{AbstractReference, Nothing} = nothing
    outcome::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    payee::Union{AbstractExplanationOfBenefit_Payee, Nothing} = nothing
    payment::Union{AbstractExplanationOfBenefit_Payment, Nothing} = nothing
    preAuthRef::Vector{String} = String[]
    preAuthRefPeriod::Vector{AbstractPeriod} = AbstractPeriod[]
    precedence::Union{SafeInt32, Nothing} = nothing
    prescription::Union{AbstractReference, Nothing} = nothing
    priority::Union{AbstractCodeableConcept, Nothing} = nothing
    procedure::Vector{AbstractExplanationOfBenefit_Procedure} = AbstractExplanationOfBenefit_Procedure[]
    processNote::Vector{AbstractExplanationOfBenefit_ProcessNote} = AbstractExplanationOfBenefit_ProcessNote[]
    provider::Union{AbstractReference, Nothing} = nothing
    referral::Union{AbstractReference, Nothing} = nothing
    related::Vector{AbstractExplanationOfBenefit_Related} = AbstractExplanationOfBenefit_Related[]
    resourceType::String = "ExplanationOfBenefit"
    status::Union{String, Nothing} = nothing
    subType::Union{AbstractCodeableConcept, Nothing} = nothing
    supportingInfo::Vector{AbstractExplanationOfBenefit_SupportingInfo} = AbstractExplanationOfBenefit_SupportingInfo[]
    text::Union{AbstractNarrative, Nothing} = nothing
    total::Vector{AbstractExplanationOfBenefit_Total} = AbstractExplanationOfBenefit_Total[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Related <: AbstractExplanationOfBenefit_Related
    claim::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Union{AbstractIdentifier, Nothing} = nothing
    relationship::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Related} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Related} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Payee <: AbstractExplanationOfBenefit_Payee
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    party::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Payee} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Payee} = true



Base.@kwdef mutable struct ExplanationOfBenefit_CareTeam <: AbstractExplanationOfBenefit_CareTeam
    _responsible::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    provider::Union{AbstractReference, Nothing} = nothing
    qualification::Union{AbstractCodeableConcept, Nothing} = nothing
    responsible::Union{Bool, Nothing} = nothing
    role::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_CareTeam} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_CareTeam} = true



Base.@kwdef mutable struct ExplanationOfBenefit_SupportingInfo <: AbstractExplanationOfBenefit_SupportingInfo
    _sequence::Union{AbstractElement, Nothing} = nothing
    _timingDate::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{AbstractCoding, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    timingDate::Union{String, Nothing} = nothing
    timingPeriod::Union{AbstractPeriod, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_SupportingInfo} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_SupportingInfo} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Diagnosis <: AbstractExplanationOfBenefit_Diagnosis
    _sequence::Union{AbstractElement, Nothing} = nothing
    diagnosisCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    diagnosisReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onAdmission::Union{AbstractCodeableConcept, Nothing} = nothing
    packageCode::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Diagnosis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Diagnosis} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Procedure <: AbstractExplanationOfBenefit_Procedure
    _date::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    procedureCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    procedureReference::Union{AbstractReference, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    udi::Vector{AbstractReference} = AbstractReference[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Procedure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Procedure} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Insurance <: AbstractExplanationOfBenefit_Insurance
    _focal::Union{AbstractElement, Nothing} = nothing
    _preAuthRef::Vector{AbstractElement} = AbstractElement[]
    coverage::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focal::Union{Bool, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    preAuthRef::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Insurance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Insurance} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Accident <: AbstractExplanationOfBenefit_Accident
    _date::Union{AbstractElement, Nothing} = nothing
    date::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    locationAddress::Union{AbstractAddress, Nothing} = nothing
    locationReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Accident} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Accident} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Item <: AbstractExplanationOfBenefit_Item
    _careTeamSequence::Vector{AbstractElement} = AbstractElement[]
    _diagnosisSequence::Vector{AbstractElement} = AbstractElement[]
    _factor::Union{AbstractElement, Nothing} = nothing
    _informationSequence::Vector{AbstractElement} = AbstractElement[]
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    _procedureSequence::Vector{AbstractElement} = AbstractElement[]
    _sequence::Union{AbstractElement, Nothing} = nothing
    _servicedDate::Union{AbstractElement, Nothing} = nothing
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    careTeamSequence::Vector{SafeInt32} = SafeInt32[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    detail::Vector{AbstractExplanationOfBenefit_Detail} = AbstractExplanationOfBenefit_Detail[]
    diagnosisSequence::Vector{SafeInt32} = SafeInt32[]
    encounter::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    informationSequence::Vector{SafeInt32} = SafeInt32[]
    locationAddress::Union{AbstractAddress, Nothing} = nothing
    locationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    locationReference::Union{AbstractReference, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    procedureSequence::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    revenue::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    servicedDate::Union{String, Nothing} = nothing
    servicedPeriod::Union{AbstractPeriod, Nothing} = nothing
    subSite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    udi::Vector{AbstractReference} = AbstractReference[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Item} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Adjudication <: AbstractExplanationOfBenefit_Adjudication
    _value::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Adjudication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Adjudication} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Detail <: AbstractExplanationOfBenefit_Detail
    _factor::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    _sequence::Union{AbstractElement, Nothing} = nothing
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    revenue::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    subDetail::Vector{AbstractExplanationOfBenefit_SubDetail} = AbstractExplanationOfBenefit_SubDetail[]
    udi::Vector{AbstractReference} = AbstractReference[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Detail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Detail} = true



Base.@kwdef mutable struct ExplanationOfBenefit_SubDetail <: AbstractExplanationOfBenefit_SubDetail
    _factor::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    _sequence::Union{AbstractElement, Nothing} = nothing
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    revenue::Union{AbstractCodeableConcept, Nothing} = nothing
    sequence::Union{SafeInt32, Nothing} = nothing
    udi::Vector{AbstractReference} = AbstractReference[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_SubDetail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_SubDetail} = true



Base.@kwdef mutable struct ExplanationOfBenefit_AddItem <: AbstractExplanationOfBenefit_AddItem
    _detailSequence::Vector{AbstractElement} = AbstractElement[]
    _factor::Union{AbstractElement, Nothing} = nothing
    _itemSequence::Vector{AbstractElement} = AbstractElement[]
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    _servicedDate::Union{AbstractElement, Nothing} = nothing
    _subDetailSequence::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    detail::Vector{AbstractExplanationOfBenefit_Detail1} = AbstractExplanationOfBenefit_Detail1[]
    detailSequence::Vector{SafeInt32} = SafeInt32[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    itemSequence::Vector{SafeInt32} = SafeInt32[]
    locationAddress::Union{AbstractAddress, Nothing} = nothing
    locationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    locationReference::Union{AbstractReference, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    programCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    provider::Vector{AbstractReference} = AbstractReference[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    servicedDate::Union{String, Nothing} = nothing
    servicedPeriod::Union{AbstractPeriod, Nothing} = nothing
    subDetailSequence::Vector{SafeInt32} = SafeInt32[]
    subSite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_AddItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_AddItem} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Detail1 <: AbstractExplanationOfBenefit_Detail1
    _factor::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    subDetail::Vector{AbstractExplanationOfBenefit_SubDetail1} = AbstractExplanationOfBenefit_SubDetail1[]
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Detail1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Detail1} = true



Base.@kwdef mutable struct ExplanationOfBenefit_SubDetail1 <: AbstractExplanationOfBenefit_SubDetail1
    _factor::Union{AbstractElement, Nothing} = nothing
    _noteNumber::Vector{AbstractElement} = AbstractElement[]
    adjudication::Vector{AbstractExplanationOfBenefit_Adjudication} = AbstractExplanationOfBenefit_Adjudication[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    net::Union{AbstractMoney, Nothing} = nothing
    noteNumber::Vector{SafeInt32} = SafeInt32[]
    productOrService::Union{AbstractCodeableConcept, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    unitPrice::Union{AbstractMoney, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_SubDetail1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_SubDetail1} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Total <: AbstractExplanationOfBenefit_Total
    amount::Union{AbstractMoney, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Total} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Total} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Payment <: AbstractExplanationOfBenefit_Payment
    _date::Union{AbstractElement, Nothing} = nothing
    adjustment::Union{AbstractMoney, Nothing} = nothing
    adjustmentReason::Union{AbstractCodeableConcept, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    date::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Payment} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Payment} = true



Base.@kwdef mutable struct ExplanationOfBenefit_ProcessNote <: AbstractExplanationOfBenefit_ProcessNote
    _number::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    number::Union{SafeInt32, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_ProcessNote} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_ProcessNote} = true



Base.@kwdef mutable struct ExplanationOfBenefit_BenefitBalance <: AbstractExplanationOfBenefit_BenefitBalance
    _description::Union{AbstractElement, Nothing} = nothing
    _excluded::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    excluded::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    financial::Vector{AbstractExplanationOfBenefit_Financial} = AbstractExplanationOfBenefit_Financial[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    network::Union{AbstractCodeableConcept, Nothing} = nothing
    term::Union{AbstractCodeableConcept, Nothing} = nothing
    unit::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_BenefitBalance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_BenefitBalance} = true



Base.@kwdef mutable struct ExplanationOfBenefit_Financial <: AbstractExplanationOfBenefit_Financial
    _allowedString::Union{AbstractElement, Nothing} = nothing
    _allowedUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _usedUnsignedInt::Union{AbstractElement, Nothing} = nothing
    allowedMoney::Union{AbstractMoney, Nothing} = nothing
    allowedString::Union{String, Nothing} = nothing
    allowedUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    usedMoney::Union{AbstractMoney, Nothing} = nothing
    usedUnsignedInt::Union{FHIRInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ExplanationOfBenefit_Financial} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ExplanationOfBenefit_Financial} = true



Base.@kwdef mutable struct FamilyMemberHistory <: AbstractFamilyMemberHistory
    _ageString::Union{AbstractElement, Nothing} = nothing
    _bornDate::Union{AbstractElement, Nothing} = nothing
    _bornString::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _deceasedBoolean::Union{AbstractElement, Nothing} = nothing
    _deceasedDate::Union{AbstractElement, Nothing} = nothing
    _deceasedString::Union{AbstractElement, Nothing} = nothing
    _estimatedAge::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    ageAge::Union{AbstractAge, Nothing} = nothing
    ageRange::Union{AbstractRange, Nothing} = nothing
    ageString::Union{String, Nothing} = nothing
    bornDate::Union{String, Nothing} = nothing
    bornPeriod::Union{AbstractPeriod, Nothing} = nothing
    bornString::Union{String, Nothing} = nothing
    condition::Vector{AbstractFamilyMemberHistory_Condition} = AbstractFamilyMemberHistory_Condition[]
    contained::Vector{ResourceList} = ResourceList[]
    dataAbsentReason::Union{AbstractCodeableConcept, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    deceasedAge::Union{AbstractAge, Nothing} = nothing
    deceasedBoolean::Union{Bool, Nothing} = nothing
    deceasedDate::Union{String, Nothing} = nothing
    deceasedRange::Union{AbstractRange, Nothing} = nothing
    deceasedString::Union{String, Nothing} = nothing
    estimatedAge::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    patient::Union{AbstractReference, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    relationship::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "FamilyMemberHistory"
    sex::Union{AbstractCodeableConcept, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: FamilyMemberHistory} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: FamilyMemberHistory} = true



Base.@kwdef mutable struct FamilyMemberHistory_Condition <: AbstractFamilyMemberHistory_Condition
    _contributedToDeath::Union{AbstractElement, Nothing} = nothing
    _onsetString::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contributedToDeath::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    onsetAge::Union{AbstractAge, Nothing} = nothing
    onsetPeriod::Union{AbstractPeriod, Nothing} = nothing
    onsetRange::Union{AbstractRange, Nothing} = nothing
    onsetString::Union{String, Nothing} = nothing
    outcome::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: FamilyMemberHistory_Condition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: FamilyMemberHistory_Condition} = true



Base.@kwdef mutable struct Flag <: AbstractFlag
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    resourceType::String = "Flag"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Flag} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Flag} = true



Base.@kwdef mutable struct Goal <: AbstractGoal
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lifecycleStatus::Union{AbstractElement, Nothing} = nothing
    _startDate::Union{AbstractElement, Nothing} = nothing
    _statusDate::Union{AbstractElement, Nothing} = nothing
    _statusReason::Union{AbstractElement, Nothing} = nothing
    achievementStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    addresses::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{AbstractCodeableConcept, Nothing} = nothing
    expressedBy::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lifecycleStatus::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    outcomeCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    outcomeReference::Vector{AbstractReference} = AbstractReference[]
    priority::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "Goal"
    startCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    startDate::Union{String, Nothing} = nothing
    statusDate::Union{Date, Nothing} = nothing
    statusReason::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    target::Vector{AbstractGoal_Target} = AbstractGoal_Target[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Goal} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Goal} = true



Base.@kwdef mutable struct Goal_Target <: AbstractGoal_Target
    _detailBoolean::Union{AbstractElement, Nothing} = nothing
    _detailInteger::Union{AbstractElement, Nothing} = nothing
    _detailString::Union{AbstractElement, Nothing} = nothing
    _dueDate::Union{AbstractElement, Nothing} = nothing
    detailBoolean::Union{Bool, Nothing} = nothing
    detailCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    detailInteger::Union{FHIRInt32, Nothing} = nothing
    detailQuantity::Union{AbstractQuantity, Nothing} = nothing
    detailRange::Union{AbstractRange, Nothing} = nothing
    detailRatio::Union{AbstractRatio, Nothing} = nothing
    detailString::Union{String, Nothing} = nothing
    dueDate::Union{String, Nothing} = nothing
    dueDuration::Union{AbstractDuration, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    measure::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Goal_Target} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Goal_Target} = true



Base.@kwdef mutable struct GraphDefinition <: AbstractGraphDefinition
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    link::Vector{AbstractGraphDefinition_Link} = AbstractGraphDefinition_Link[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    profile::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "GraphDefinition"
    start::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: GraphDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: GraphDefinition} = true



Base.@kwdef mutable struct GraphDefinition_Link <: AbstractGraphDefinition_Link
    _description::Union{AbstractElement, Nothing} = nothing
    _max::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    _path::Union{AbstractElement, Nothing} = nothing
    _sliceName::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    max::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
    sliceName::Union{String, Nothing} = nothing
    target::Vector{AbstractGraphDefinition_Target} = AbstractGraphDefinition_Target[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: GraphDefinition_Link} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: GraphDefinition_Link} = true



Base.@kwdef mutable struct GraphDefinition_Target <: AbstractGraphDefinition_Target
    _params::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    compartment::Vector{AbstractGraphDefinition_Compartment} = AbstractGraphDefinition_Compartment[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    link::Vector{AbstractGraphDefinition_Link} = AbstractGraphDefinition_Link[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    params::Union{String, Nothing} = nothing
    profile::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: GraphDefinition_Target} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: GraphDefinition_Target} = true



Base.@kwdef mutable struct GraphDefinition_Compartment <: AbstractGraphDefinition_Compartment
    _code::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _expression::Union{AbstractElement, Nothing} = nothing
    _rule::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    rule::Union{String, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: GraphDefinition_Compartment} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: GraphDefinition_Compartment} = true



Base.@kwdef mutable struct Group <: AbstractGroup
    _active::Union{AbstractElement, Nothing} = nothing
    _actual::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _quantity::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    actual::Union{Bool, Nothing} = nothing
    characteristic::Vector{AbstractGroup_Characteristic} = AbstractGroup_Characteristic[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    managingEntity::Union{AbstractReference, Nothing} = nothing
    member::Vector{AbstractGroup_Member} = AbstractGroup_Member[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    quantity::Union{SafeInt32, Nothing} = nothing
    resourceType::String = "Group"
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Group} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Group} = true



Base.@kwdef mutable struct Group_Characteristic <: AbstractGroup_Characteristic
    _exclude::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    exclude::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Group_Characteristic} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Group_Characteristic} = true



Base.@kwdef mutable struct Group_Member <: AbstractGroup_Member
    _inactive::Union{AbstractElement, Nothing} = nothing
    entity::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    inactive::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Group_Member} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Group_Member} = true



Base.@kwdef mutable struct GuidanceResponse <: AbstractGuidanceResponse
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _moduleCanonical::Union{AbstractElement, Nothing} = nothing
    _moduleUri::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    dataRequirement::Vector{AbstractDataRequirement} = AbstractDataRequirement[]
    encounter::Union{AbstractReference, Nothing} = nothing
    evaluationMessage::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    moduleCanonical::Union{String, Nothing} = nothing
    moduleCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    moduleUri::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{FHIRDateTime, Nothing} = nothing
    outputParameters::Union{AbstractReference, Nothing} = nothing
    performer::Union{AbstractReference, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    requestIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    resourceType::String = "GuidanceResponse"
    result::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: GuidanceResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: GuidanceResponse} = true



Base.@kwdef mutable struct HealthcareService <: AbstractHealthcareService
    _active::Union{AbstractElement, Nothing} = nothing
    _appointmentRequired::Union{AbstractElement, Nothing} = nothing
    _availabilityExceptions::Union{AbstractElement, Nothing} = nothing
    _comment::Union{AbstractElement, Nothing} = nothing
    _extraDetails::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    appointmentRequired::Union{Bool, Nothing} = nothing
    availabilityExceptions::Union{String, Nothing} = nothing
    availableTime::Vector{AbstractHealthcareService_AvailableTime} = AbstractHealthcareService_AvailableTime[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    characteristic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    comment::Union{String, Nothing} = nothing
    communication::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    coverageArea::Vector{AbstractReference} = AbstractReference[]
    eligibility::Vector{AbstractHealthcareService_Eligibility} = AbstractHealthcareService_Eligibility[]
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    extraDetails::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    notAvailable::Vector{AbstractHealthcareService_NotAvailable} = AbstractHealthcareService_NotAvailable[]
    photo::Union{AbstractAttachment, Nothing} = nothing
    program::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    providedBy::Union{AbstractReference, Nothing} = nothing
    referralMethod::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    resourceType::String = "HealthcareService"
    serviceProvisionCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    specialty::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: HealthcareService} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: HealthcareService} = true



Base.@kwdef mutable struct HealthcareService_Eligibility <: AbstractHealthcareService_Eligibility
    _comment::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: HealthcareService_Eligibility} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: HealthcareService_Eligibility} = true



Base.@kwdef mutable struct HealthcareService_AvailableTime <: AbstractHealthcareService_AvailableTime
    _allDay::Union{AbstractElement, Nothing} = nothing
    _availableEndTime::Union{AbstractElement, Nothing} = nothing
    _availableStartTime::Union{AbstractElement, Nothing} = nothing
    _daysOfWeek::Vector{AbstractElement} = AbstractElement[]
    allDay::Union{Bool, Nothing} = nothing
    availableEndTime::Union{Time, Nothing} = nothing
    availableStartTime::Union{Time, Nothing} = nothing
    daysOfWeek::Vector{String} = String[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: HealthcareService_AvailableTime} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: HealthcareService_AvailableTime} = true



Base.@kwdef mutable struct HealthcareService_NotAvailable <: AbstractHealthcareService_NotAvailable
    _description::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    during::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: HealthcareService_NotAvailable} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: HealthcareService_NotAvailable} = true



Base.@kwdef mutable struct ImagingStudy <: AbstractImagingStudy
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _numberOfInstances::Union{AbstractElement, Nothing} = nothing
    _numberOfSeries::Union{AbstractElement, Nothing} = nothing
    _started::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    interpreter::Vector{AbstractReference} = AbstractReference[]
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modality::Vector{AbstractCoding} = AbstractCoding[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    numberOfInstances::Union{SafeInt32, Nothing} = nothing
    numberOfSeries::Union{SafeInt32, Nothing} = nothing
    procedureCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    procedureReference::Union{AbstractReference, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    referrer::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "ImagingStudy"
    series::Vector{AbstractImagingStudy_Series} = AbstractImagingStudy_Series[]
    started::Union{FHIRDateTime, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImagingStudy} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImagingStudy} = true



Base.@kwdef mutable struct ImagingStudy_Series <: AbstractImagingStudy_Series
    _description::Union{AbstractElement, Nothing} = nothing
    _number::Union{AbstractElement, Nothing} = nothing
    _numberOfInstances::Union{AbstractElement, Nothing} = nothing
    _started::Union{AbstractElement, Nothing} = nothing
    _uid::Union{AbstractElement, Nothing} = nothing
    bodySite::Union{AbstractCoding, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    instance::Vector{AbstractImagingStudy_Instance} = AbstractImagingStudy_Instance[]
    laterality::Union{AbstractCoding, Nothing} = nothing
    modality::Union{AbstractCoding, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    number::Union{SafeInt32, Nothing} = nothing
    numberOfInstances::Union{SafeInt32, Nothing} = nothing
    performer::Vector{AbstractImagingStudy_Performer} = AbstractImagingStudy_Performer[]
    specimen::Vector{AbstractReference} = AbstractReference[]
    started::Union{FHIRDateTime, Nothing} = nothing
    uid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImagingStudy_Series} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImagingStudy_Series} = true



Base.@kwdef mutable struct ImagingStudy_Performer <: AbstractImagingStudy_Performer
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    function_fhir::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImagingStudy_Performer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImagingStudy_Performer} = true



Base.@kwdef mutable struct ImagingStudy_Instance <: AbstractImagingStudy_Instance
    _number::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _uid::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    number::Union{SafeInt32, Nothing} = nothing
    sopClass::Union{AbstractCoding, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    uid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImagingStudy_Instance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImagingStudy_Instance} = true



Base.@kwdef mutable struct Immunization <: AbstractImmunization
    _expirationDate::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _isSubpotent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lotNumber::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _occurrenceString::Union{AbstractElement, Nothing} = nothing
    _primarySource::Union{AbstractElement, Nothing} = nothing
    _recorded::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    doseQuantity::Union{AbstractQuantity, Nothing} = nothing
    education::Vector{AbstractImmunization_Education} = AbstractImmunization_Education[]
    encounter::Union{AbstractReference, Nothing} = nothing
    expirationDate::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fundingSource::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    isSubpotent::Union{Bool, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    lotNumber::Union{String, Nothing} = nothing
    manufacturer::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrenceString::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    performer::Vector{AbstractImmunization_Performer} = AbstractImmunization_Performer[]
    primarySource::Union{Bool, Nothing} = nothing
    programEligibility::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    protocolApplied::Vector{AbstractImmunization_ProtocolApplied} = AbstractImmunization_ProtocolApplied[]
    reaction::Vector{AbstractImmunization_Reaction} = AbstractImmunization_Reaction[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    recorded::Union{FHIRDateTime, Nothing} = nothing
    reportOrigin::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "Immunization"
    route::Union{AbstractCodeableConcept, Nothing} = nothing
    site::Union{AbstractCodeableConcept, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    subpotentReason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    text::Union{AbstractNarrative, Nothing} = nothing
    vaccineCode::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Immunization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Immunization} = true



Base.@kwdef mutable struct Immunization_Performer <: AbstractImmunization_Performer
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    function_fhir::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Immunization_Performer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Immunization_Performer} = true



Base.@kwdef mutable struct Immunization_Education <: AbstractImmunization_Education
    _documentType::Union{AbstractElement, Nothing} = nothing
    _presentationDate::Union{AbstractElement, Nothing} = nothing
    _publicationDate::Union{AbstractElement, Nothing} = nothing
    _reference::Union{AbstractElement, Nothing} = nothing
    documentType::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    presentationDate::Union{FHIRDateTime, Nothing} = nothing
    publicationDate::Union{FHIRDateTime, Nothing} = nothing
    reference::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Immunization_Education} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Immunization_Education} = true



Base.@kwdef mutable struct Immunization_Reaction <: AbstractImmunization_Reaction
    _date::Union{AbstractElement, Nothing} = nothing
    _reported::Union{AbstractElement, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    detail::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reported::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Immunization_Reaction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Immunization_Reaction} = true



Base.@kwdef mutable struct Immunization_ProtocolApplied <: AbstractImmunization_ProtocolApplied
    _doseNumberPositiveInt::Union{AbstractElement, Nothing} = nothing
    _doseNumberString::Union{AbstractElement, Nothing} = nothing
    _series::Union{AbstractElement, Nothing} = nothing
    _seriesDosesPositiveInt::Union{AbstractElement, Nothing} = nothing
    _seriesDosesString::Union{AbstractElement, Nothing} = nothing
    authority::Union{AbstractReference, Nothing} = nothing
    doseNumberPositiveInt::Union{FHIRInt32, Nothing} = nothing
    doseNumberString::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    series::Union{String, Nothing} = nothing
    seriesDosesPositiveInt::Union{FHIRInt32, Nothing} = nothing
    seriesDosesString::Union{String, Nothing} = nothing
    targetDisease::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Immunization_ProtocolApplied} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Immunization_ProtocolApplied} = true



Base.@kwdef mutable struct ImmunizationEvaluation <: AbstractImmunizationEvaluation
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _doseNumberPositiveInt::Union{AbstractElement, Nothing} = nothing
    _doseNumberString::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _series::Union{AbstractElement, Nothing} = nothing
    _seriesDosesPositiveInt::Union{AbstractElement, Nothing} = nothing
    _seriesDosesString::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    authority::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    doseNumberPositiveInt::Union{FHIRInt32, Nothing} = nothing
    doseNumberString::Union{String, Nothing} = nothing
    doseStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    doseStatusReason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    immunizationEvent::Union{AbstractReference, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patient::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "ImmunizationEvaluation"
    series::Union{String, Nothing} = nothing
    seriesDosesPositiveInt::Union{FHIRInt32, Nothing} = nothing
    seriesDosesString::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    targetDisease::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImmunizationEvaluation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImmunizationEvaluation} = true



Base.@kwdef mutable struct ImmunizationRecommendation <: AbstractImmunizationRecommendation
    _date::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    authority::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patient::Union{AbstractReference, Nothing} = nothing
    recommendation::Vector{AbstractImmunizationRecommendation_Recommendation} = AbstractImmunizationRecommendation_Recommendation[]
    resourceType::String = "ImmunizationRecommendation"
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImmunizationRecommendation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImmunizationRecommendation} = true



Base.@kwdef mutable struct ImmunizationRecommendation_Recommendation <: AbstractImmunizationRecommendation_Recommendation
    _description::Union{AbstractElement, Nothing} = nothing
    _doseNumberPositiveInt::Union{AbstractElement, Nothing} = nothing
    _doseNumberString::Union{AbstractElement, Nothing} = nothing
    _series::Union{AbstractElement, Nothing} = nothing
    _seriesDosesPositiveInt::Union{AbstractElement, Nothing} = nothing
    _seriesDosesString::Union{AbstractElement, Nothing} = nothing
    contraindicatedVaccineCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    dateCriterion::Vector{AbstractImmunizationRecommendation_DateCriterion} = AbstractImmunizationRecommendation_DateCriterion[]
    description::Union{String, Nothing} = nothing
    doseNumberPositiveInt::Union{FHIRInt32, Nothing} = nothing
    doseNumberString::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    forecastReason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    forecastStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    series::Union{String, Nothing} = nothing
    seriesDosesPositiveInt::Union{FHIRInt32, Nothing} = nothing
    seriesDosesString::Union{String, Nothing} = nothing
    supportingImmunization::Vector{AbstractReference} = AbstractReference[]
    supportingPatientInformation::Vector{AbstractReference} = AbstractReference[]
    targetDisease::Union{AbstractCodeableConcept, Nothing} = nothing
    vaccineCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImmunizationRecommendation_Recommendation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImmunizationRecommendation_Recommendation} = true



Base.@kwdef mutable struct ImmunizationRecommendation_DateCriterion <: AbstractImmunizationRecommendation_DateCriterion
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    value::Union{FHIRDateTime, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImmunizationRecommendation_DateCriterion} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImmunizationRecommendation_DateCriterion} = true



Base.@kwdef mutable struct ImplementationGuide <: AbstractImplementationGuide
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _fhirVersion::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _license::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _packageId::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    definition::Union{AbstractImplementationGuide_Definition, Nothing} = nothing
    dependsOn::Vector{AbstractImplementationGuide_DependsOn} = AbstractImplementationGuide_DependsOn[]
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fhirVersion::Vector{String} = String[]
    global_fhir::Vector{AbstractImplementationGuide_Global} = AbstractImplementationGuide_Global[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    license::Union{String, Nothing} = nothing
    manifest::Union{AbstractImplementationGuide_Manifest, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    packageId::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    resourceType::String = "ImplementationGuide"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide} = true



Base.@kwdef mutable struct ImplementationGuide_DependsOn <: AbstractImplementationGuide_DependsOn
    _packageId::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    packageId::Union{String, Nothing} = nothing
    uri::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_DependsOn} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_DependsOn} = true



Base.@kwdef mutable struct ImplementationGuide_Global <: AbstractImplementationGuide_Global
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    profile::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Global} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Global} = true



Base.@kwdef mutable struct ImplementationGuide_Definition <: AbstractImplementationGuide_Definition
    extension::Vector{AbstractExtension} = AbstractExtension[]
    grouping::Vector{AbstractImplementationGuide_Grouping} = AbstractImplementationGuide_Grouping[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    page::Union{AbstractImplementationGuide_Page, Nothing} = nothing
    parameter::Vector{AbstractImplementationGuide_Parameter} = AbstractImplementationGuide_Parameter[]
    resource::Vector{AbstractImplementationGuide_Resource} = AbstractImplementationGuide_Resource[]
    template::Vector{AbstractImplementationGuide_Template} = AbstractImplementationGuide_Template[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Definition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Definition} = true



Base.@kwdef mutable struct ImplementationGuide_Grouping <: AbstractImplementationGuide_Grouping
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Grouping} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Grouping} = true



Base.@kwdef mutable struct ImplementationGuide_Resource <: AbstractImplementationGuide_Resource
    _description::Union{AbstractElement, Nothing} = nothing
    _exampleBoolean::Union{AbstractElement, Nothing} = nothing
    _exampleCanonical::Union{AbstractElement, Nothing} = nothing
    _fhirVersion::Vector{AbstractElement} = AbstractElement[]
    _groupingId::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    exampleBoolean::Union{Bool, Nothing} = nothing
    exampleCanonical::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fhirVersion::Vector{String} = String[]
    groupingId::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    reference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Resource} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Resource} = true



Base.@kwdef mutable struct ImplementationGuide_Page <: AbstractImplementationGuide_Page
    _generation::Union{AbstractElement, Nothing} = nothing
    _nameUrl::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    generation::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    nameReference::Union{AbstractReference, Nothing} = nothing
    nameUrl::Union{String, Nothing} = nothing
    page::Vector{AbstractImplementationGuide_Page} = AbstractImplementationGuide_Page[]
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Page} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Page} = true



Base.@kwdef mutable struct ImplementationGuide_Parameter <: AbstractImplementationGuide_Parameter
    _code::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Parameter} = true



Base.@kwdef mutable struct ImplementationGuide_Template <: AbstractImplementationGuide_Template
    _code::Union{AbstractElement, Nothing} = nothing
    _scope::Union{AbstractElement, Nothing} = nothing
    _source::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    scope::Union{String, Nothing} = nothing
    source::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Template} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Template} = true



Base.@kwdef mutable struct ImplementationGuide_Manifest <: AbstractImplementationGuide_Manifest
    _image::Vector{AbstractElement} = AbstractElement[]
    _other::Vector{AbstractElement} = AbstractElement[]
    _rendering::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    image::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    other::Vector{String} = String[]
    page::Vector{AbstractImplementationGuide_Page1} = AbstractImplementationGuide_Page1[]
    rendering::Union{String, Nothing} = nothing
    resource::Vector{AbstractImplementationGuide_Resource1} = AbstractImplementationGuide_Resource1[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Manifest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Manifest} = true



Base.@kwdef mutable struct ImplementationGuide_Resource1 <: AbstractImplementationGuide_Resource1
    _exampleBoolean::Union{AbstractElement, Nothing} = nothing
    _exampleCanonical::Union{AbstractElement, Nothing} = nothing
    _relativePath::Union{AbstractElement, Nothing} = nothing
    exampleBoolean::Union{Bool, Nothing} = nothing
    exampleCanonical::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Union{AbstractReference, Nothing} = nothing
    relativePath::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Resource1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Resource1} = true



Base.@kwdef mutable struct ImplementationGuide_Page1 <: AbstractImplementationGuide_Page1
    _anchor::Vector{AbstractElement} = AbstractElement[]
    _name::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    anchor::Vector{String} = String[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ImplementationGuide_Page1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ImplementationGuide_Page1} = true



Base.@kwdef mutable struct InsurancePlan <: AbstractInsurancePlan
    _alias::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    administeredBy::Union{AbstractReference, Nothing} = nothing
    alias::Vector{String} = String[]
    contact::Vector{AbstractInsurancePlan_Contact} = AbstractInsurancePlan_Contact[]
    contained::Vector{ResourceList} = ResourceList[]
    coverage::Vector{AbstractInsurancePlan_Coverage} = AbstractInsurancePlan_Coverage[]
    coverageArea::Vector{AbstractReference} = AbstractReference[]
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    network::Vector{AbstractReference} = AbstractReference[]
    ownedBy::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    plan::Vector{AbstractInsurancePlan_Plan} = AbstractInsurancePlan_Plan[]
    resourceType::String = "InsurancePlan"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan} = true



Base.@kwdef mutable struct InsurancePlan_Contact <: AbstractInsurancePlan_Contact
    address::Union{AbstractAddress, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{AbstractHumanName, Nothing} = nothing
    purpose::Union{AbstractCodeableConcept, Nothing} = nothing
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Contact} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Contact} = true



Base.@kwdef mutable struct InsurancePlan_Coverage <: AbstractInsurancePlan_Coverage
    benefit::Vector{AbstractInsurancePlan_Benefit} = AbstractInsurancePlan_Benefit[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    network::Vector{AbstractReference} = AbstractReference[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Coverage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Coverage} = true



Base.@kwdef mutable struct InsurancePlan_Benefit <: AbstractInsurancePlan_Benefit
    _requirement::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    limit::Vector{AbstractInsurancePlan_Limit} = AbstractInsurancePlan_Limit[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    requirement::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Benefit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Benefit} = true



Base.@kwdef mutable struct InsurancePlan_Limit <: AbstractInsurancePlan_Limit
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    value::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Limit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Limit} = true



Base.@kwdef mutable struct InsurancePlan_Plan <: AbstractInsurancePlan_Plan
    coverageArea::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    generalCost::Vector{AbstractInsurancePlan_GeneralCost} = AbstractInsurancePlan_GeneralCost[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    network::Vector{AbstractReference} = AbstractReference[]
    specificCost::Vector{AbstractInsurancePlan_SpecificCost} = AbstractInsurancePlan_SpecificCost[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Plan} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Plan} = true



Base.@kwdef mutable struct InsurancePlan_GeneralCost <: AbstractInsurancePlan_GeneralCost
    _comment::Union{AbstractElement, Nothing} = nothing
    _groupSize::Union{AbstractElement, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    cost::Union{AbstractMoney, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupSize::Union{SafeInt32, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_GeneralCost} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_GeneralCost} = true



Base.@kwdef mutable struct InsurancePlan_SpecificCost <: AbstractInsurancePlan_SpecificCost
    benefit::Vector{AbstractInsurancePlan_Benefit1} = AbstractInsurancePlan_Benefit1[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_SpecificCost} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_SpecificCost} = true



Base.@kwdef mutable struct InsurancePlan_Benefit1 <: AbstractInsurancePlan_Benefit1
    cost::Vector{AbstractInsurancePlan_Cost} = AbstractInsurancePlan_Cost[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Benefit1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Benefit1} = true



Base.@kwdef mutable struct InsurancePlan_Cost <: AbstractInsurancePlan_Cost
    applicability::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    qualifiers::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: InsurancePlan_Cost} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: InsurancePlan_Cost} = true



Base.@kwdef mutable struct Invoice <: AbstractInvoice
    _cancelledReason::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _paymentTerms::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    account::Union{AbstractReference, Nothing} = nothing
    cancelledReason::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    issuer::Union{AbstractReference, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lineItem::Vector{AbstractInvoice_LineItem} = AbstractInvoice_LineItem[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    participant::Vector{AbstractInvoice_Participant} = AbstractInvoice_Participant[]
    paymentTerms::Union{String, Nothing} = nothing
    recipient::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "Invoice"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    totalGross::Union{AbstractMoney, Nothing} = nothing
    totalNet::Union{AbstractMoney, Nothing} = nothing
    totalPriceComponent::Vector{AbstractInvoice_PriceComponent} = AbstractInvoice_PriceComponent[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Invoice} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Invoice} = true



Base.@kwdef mutable struct Invoice_Participant <: AbstractInvoice_Participant
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    role::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Invoice_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Invoice_Participant} = true



Base.@kwdef mutable struct Invoice_LineItem <: AbstractInvoice_LineItem
    _sequence::Union{AbstractElement, Nothing} = nothing
    chargeItemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    chargeItemReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    priceComponent::Vector{AbstractInvoice_PriceComponent} = AbstractInvoice_PriceComponent[]
    sequence::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Invoice_LineItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Invoice_LineItem} = true



Base.@kwdef mutable struct Invoice_PriceComponent <: AbstractInvoice_PriceComponent
    _factor::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    factor::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Invoice_PriceComponent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Invoice_PriceComponent} = true



Base.@kwdef mutable struct Library <: AbstractLibrary
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    content::Vector{AbstractAttachment} = AbstractAttachment[]
    copyright::Union{String, Nothing} = nothing
    dataRequirement::Vector{AbstractDataRequirement} = AbstractDataRequirement[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    parameter::Vector{AbstractParameterDefinition} = AbstractParameterDefinition[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "Library"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Library} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Library} = true



Base.@kwdef mutable struct Linkage <: AbstractLinkage
    _active::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    item::Vector{AbstractLinkage_Item} = AbstractLinkage_Item[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "Linkage"
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Linkage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Linkage} = true



Base.@kwdef mutable struct Linkage_Item <: AbstractLinkage_Item
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resource::Union{AbstractReference, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Linkage_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Linkage_Item} = true



Base.@kwdef mutable struct List <: AbstractList
    _date::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    emptyReason::Union{AbstractCodeableConcept, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    entry::Vector{AbstractList_Entry} = AbstractList_Entry[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    orderedBy::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "List"
    source::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: List} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: List} = true



Base.@kwdef mutable struct List_Entry <: AbstractList_Entry
    _date::Union{AbstractElement, Nothing} = nothing
    _deleted::Union{AbstractElement, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    deleted::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    flag::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    item::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: List_Entry} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: List_Entry} = true



Base.@kwdef mutable struct Location <: AbstractLocation
    _alias::Vector{AbstractElement} = AbstractElement[]
    _availabilityExceptions::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    address::Union{AbstractAddress, Nothing} = nothing
    alias::Vector{String} = String[]
    availabilityExceptions::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    hoursOfOperation::Vector{AbstractLocation_HoursOfOperation} = AbstractLocation_HoursOfOperation[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    managingOrganization::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    operationalStatus::Union{AbstractCoding, Nothing} = nothing
    partOf::Union{AbstractReference, Nothing} = nothing
    physicalType::Union{AbstractCodeableConcept, Nothing} = nothing
    position::Union{AbstractLocation_Position, Nothing} = nothing
    resourceType::String = "Location"
    status::Union{String, Nothing} = nothing
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Location} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Location} = true



Base.@kwdef mutable struct Location_Position <: AbstractLocation_Position
    _altitude::Union{AbstractElement, Nothing} = nothing
    _latitude::Union{AbstractElement, Nothing} = nothing
    _longitude::Union{AbstractElement, Nothing} = nothing
    altitude::Union{FHIRNumber, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    latitude::Union{FHIRNumber, Nothing} = nothing
    longitude::Union{FHIRNumber, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Location_Position} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Location_Position} = true



Base.@kwdef mutable struct Location_HoursOfOperation <: AbstractLocation_HoursOfOperation
    _allDay::Union{AbstractElement, Nothing} = nothing
    _closingTime::Union{AbstractElement, Nothing} = nothing
    _daysOfWeek::Vector{AbstractElement} = AbstractElement[]
    _openingTime::Union{AbstractElement, Nothing} = nothing
    allDay::Union{Bool, Nothing} = nothing
    closingTime::Union{Time, Nothing} = nothing
    daysOfWeek::Vector{String} = String[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    openingTime::Union{Time, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Location_HoursOfOperation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Location_HoursOfOperation} = true



Base.@kwdef mutable struct Measure <: AbstractMeasure
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _clinicalRecommendationStatement::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _definition::Vector{AbstractElement} = AbstractElement[]
    _description::Union{AbstractElement, Nothing} = nothing
    _disclaimer::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _guidance::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _rateAggregation::Union{AbstractElement, Nothing} = nothing
    _rationale::Union{AbstractElement, Nothing} = nothing
    _riskAdjustment::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    clinicalRecommendationStatement::Union{String, Nothing} = nothing
    compositeScoring::Union{AbstractCodeableConcept, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    definition::Vector{String} = String[]
    description::Union{String, Nothing} = nothing
    disclaimer::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    group::Vector{AbstractMeasure_Group} = AbstractMeasure_Group[]
    guidance::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    improvementNotation::Union{AbstractCodeableConcept, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    library::Vector{String} = String[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    rateAggregation::Union{String, Nothing} = nothing
    rationale::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "Measure"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    riskAdjustment::Union{String, Nothing} = nothing
    scoring::Union{AbstractCodeableConcept, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    supplementalData::Vector{AbstractMeasure_SupplementalData} = AbstractMeasure_SupplementalData[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Measure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Measure} = true



Base.@kwdef mutable struct Measure_Group <: AbstractMeasure_Group
    _description::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    population::Vector{AbstractMeasure_Population} = AbstractMeasure_Population[]
    stratifier::Vector{AbstractMeasure_Stratifier} = AbstractMeasure_Stratifier[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Measure_Group} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Measure_Group} = true



Base.@kwdef mutable struct Measure_Population <: AbstractMeasure_Population
    _description::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    criteria::Union{AbstractExpression, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Measure_Population} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Measure_Population} = true



Base.@kwdef mutable struct Measure_Stratifier <: AbstractMeasure_Stratifier
    _description::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    component::Vector{AbstractMeasure_Component} = AbstractMeasure_Component[]
    criteria::Union{AbstractExpression, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Measure_Stratifier} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Measure_Stratifier} = true



Base.@kwdef mutable struct Measure_Component <: AbstractMeasure_Component
    _description::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    criteria::Union{AbstractExpression, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Measure_Component} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Measure_Component} = true



Base.@kwdef mutable struct Measure_SupplementalData <: AbstractMeasure_SupplementalData
    _description::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    criteria::Union{AbstractExpression, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    usage::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Measure_SupplementalData} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Measure_SupplementalData} = true



Base.@kwdef mutable struct MeasureReport <: AbstractMeasureReport
    _date::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    evaluatedResource::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    group::Vector{AbstractMeasureReport_Group} = AbstractMeasureReport_Group[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    improvementNotation::Union{AbstractCodeableConcept, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    measure::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    reporter::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "MeasureReport"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport} = true



Base.@kwdef mutable struct MeasureReport_Group <: AbstractMeasureReport_Group
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    measureScore::Union{AbstractQuantity, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    population::Vector{AbstractMeasureReport_Population} = AbstractMeasureReport_Population[]
    stratifier::Vector{AbstractMeasureReport_Stratifier} = AbstractMeasureReport_Stratifier[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport_Group} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport_Group} = true



Base.@kwdef mutable struct MeasureReport_Population <: AbstractMeasureReport_Population
    _count::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    count::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    subjectResults::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport_Population} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport_Population} = true



Base.@kwdef mutable struct MeasureReport_Stratifier <: AbstractMeasureReport_Stratifier
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    stratum::Vector{AbstractMeasureReport_Stratum} = AbstractMeasureReport_Stratum[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport_Stratifier} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport_Stratifier} = true



Base.@kwdef mutable struct MeasureReport_Stratum <: AbstractMeasureReport_Stratum
    component::Vector{AbstractMeasureReport_Component} = AbstractMeasureReport_Component[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    measureScore::Union{AbstractQuantity, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    population::Vector{AbstractMeasureReport_Population1} = AbstractMeasureReport_Population1[]
    value::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport_Stratum} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport_Stratum} = true



Base.@kwdef mutable struct MeasureReport_Component <: AbstractMeasureReport_Component
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    value::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport_Component} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport_Component} = true



Base.@kwdef mutable struct MeasureReport_Population1 <: AbstractMeasureReport_Population1
    _count::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    count::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    subjectResults::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MeasureReport_Population1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MeasureReport_Population1} = true



Base.@kwdef mutable struct Media <: AbstractMedia
    _createdDateTime::Union{AbstractElement, Nothing} = nothing
    _deviceName::Union{AbstractElement, Nothing} = nothing
    _duration::Union{AbstractElement, Nothing} = nothing
    _frames::Union{AbstractElement, Nothing} = nothing
    _height::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _issued::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _width::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    content::Union{AbstractAttachment, Nothing} = nothing
    createdDateTime::Union{String, Nothing} = nothing
    createdPeriod::Union{AbstractPeriod, Nothing} = nothing
    device::Union{AbstractReference, Nothing} = nothing
    deviceName::Union{String, Nothing} = nothing
    duration::Union{FHIRNumber, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    frames::Union{SafeInt32, Nothing} = nothing
    height::Union{SafeInt32, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    issued::Union{ZonedDateTime, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modality::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    operator::Union{AbstractReference, Nothing} = nothing
    partOf::Vector{AbstractReference} = AbstractReference[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    resourceType::String = "Media"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    view::Union{AbstractCodeableConcept, Nothing} = nothing
    width::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Media} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Media} = true



Base.@kwdef mutable struct Medication <: AbstractMedication
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractRatio, Nothing} = nothing
    batch::Union{AbstractMedication_Batch, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    form::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    ingredient::Vector{AbstractMedication_Ingredient} = AbstractMedication_Ingredient[]
    language::Union{String, Nothing} = nothing
    manufacturer::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "Medication"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Medication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Medication} = true



Base.@kwdef mutable struct Medication_Ingredient <: AbstractMedication_Ingredient
    _isActive::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    isActive::Union{Bool, Nothing} = nothing
    itemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    itemReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Union{AbstractRatio, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Medication_Ingredient} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Medication_Ingredient} = true



Base.@kwdef mutable struct Medication_Batch <: AbstractMedication_Batch
    _expirationDate::Union{AbstractElement, Nothing} = nothing
    _lotNumber::Union{AbstractElement, Nothing} = nothing
    expirationDate::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    lotNumber::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Medication_Batch} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Medication_Batch} = true



Base.@kwdef mutable struct MedicationAdministration <: AbstractMedicationAdministration
    _effectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiates::Vector{AbstractElement} = AbstractElement[]
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    context::Union{AbstractReference, Nothing} = nothing
    device::Vector{AbstractReference} = AbstractReference[]
    dosage::Union{AbstractMedicationAdministration_Dosage, Nothing} = nothing
    effectiveDateTime::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    eventHistory::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiates::Vector{String} = String[]
    language::Union{String, Nothing} = nothing
    medicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    medicationReference::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    performer::Vector{AbstractMedicationAdministration_Performer} = AbstractMedicationAdministration_Performer[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    request::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "MedicationAdministration"
    status::Union{String, Nothing} = nothing
    statusReason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    subject::Union{AbstractReference, Nothing} = nothing
    supportingInformation::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationAdministration} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationAdministration} = true



Base.@kwdef mutable struct MedicationAdministration_Performer <: AbstractMedicationAdministration_Performer
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    function_fhir::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationAdministration_Performer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationAdministration_Performer} = true



Base.@kwdef mutable struct MedicationAdministration_Dosage <: AbstractMedicationAdministration_Dosage
    _text::Union{AbstractElement, Nothing} = nothing
    dose::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    rateQuantity::Union{AbstractQuantity, Nothing} = nothing
    rateRatio::Union{AbstractRatio, Nothing} = nothing
    route::Union{AbstractCodeableConcept, Nothing} = nothing
    site::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationAdministration_Dosage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationAdministration_Dosage} = true



Base.@kwdef mutable struct MedicationDispense <: AbstractMedicationDispense
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _whenHandedOver::Union{AbstractElement, Nothing} = nothing
    _whenPrepared::Union{AbstractElement, Nothing} = nothing
    authorizingPrescription::Vector{AbstractReference} = AbstractReference[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    context::Union{AbstractReference, Nothing} = nothing
    daysSupply::Union{AbstractQuantity, Nothing} = nothing
    destination::Union{AbstractReference, Nothing} = nothing
    detectedIssue::Vector{AbstractReference} = AbstractReference[]
    dosageInstruction::Vector{AbstractDosage} = AbstractDosage[]
    eventHistory::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    medicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    medicationReference::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    performer::Vector{AbstractMedicationDispense_Performer} = AbstractMedicationDispense_Performer[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    receiver::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "MedicationDispense"
    status::Union{String, Nothing} = nothing
    statusReasonCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    statusReasonReference::Union{AbstractReference, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    substitution::Union{AbstractMedicationDispense_Substitution, Nothing} = nothing
    supportingInformation::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    whenHandedOver::Union{FHIRDateTime, Nothing} = nothing
    whenPrepared::Union{FHIRDateTime, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationDispense} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationDispense} = true



Base.@kwdef mutable struct MedicationDispense_Performer <: AbstractMedicationDispense_Performer
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    function_fhir::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationDispense_Performer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationDispense_Performer} = true



Base.@kwdef mutable struct MedicationDispense_Substitution <: AbstractMedicationDispense_Substitution
    _wasSubstituted::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    responsibleParty::Vector{AbstractReference} = AbstractReference[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    wasSubstituted::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationDispense_Substitution} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationDispense_Substitution} = true



Base.@kwdef mutable struct MedicationKnowledge <: AbstractMedicationKnowledge
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _preparationInstruction::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _synonym::Vector{AbstractElement} = AbstractElement[]
    administrationGuidelines::Vector{AbstractMedicationKnowledge_AdministrationGuidelines} = AbstractMedicationKnowledge_AdministrationGuidelines[]
    amount::Union{AbstractQuantity, Nothing} = nothing
    associatedMedication::Vector{AbstractReference} = AbstractReference[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    contraindication::Vector{AbstractReference} = AbstractReference[]
    cost::Vector{AbstractMedicationKnowledge_Cost} = AbstractMedicationKnowledge_Cost[]
    doseForm::Union{AbstractCodeableConcept, Nothing} = nothing
    drugCharacteristic::Vector{AbstractMedicationKnowledge_DrugCharacteristic} = AbstractMedicationKnowledge_DrugCharacteristic[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    ingredient::Vector{AbstractMedicationKnowledge_Ingredient} = AbstractMedicationKnowledge_Ingredient[]
    intendedRoute::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    kinetics::Vector{AbstractMedicationKnowledge_Kinetics} = AbstractMedicationKnowledge_Kinetics[]
    language::Union{String, Nothing} = nothing
    manufacturer::Union{AbstractReference, Nothing} = nothing
    medicineClassification::Vector{AbstractMedicationKnowledge_MedicineClassification} = AbstractMedicationKnowledge_MedicineClassification[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    monitoringProgram::Vector{AbstractMedicationKnowledge_MonitoringProgram} = AbstractMedicationKnowledge_MonitoringProgram[]
    monograph::Vector{AbstractMedicationKnowledge_Monograph} = AbstractMedicationKnowledge_Monograph[]
    packaging::Union{AbstractMedicationKnowledge_Packaging, Nothing} = nothing
    preparationInstruction::Union{String, Nothing} = nothing
    productType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    regulatory::Vector{AbstractMedicationKnowledge_Regulatory} = AbstractMedicationKnowledge_Regulatory[]
    relatedMedicationKnowledge::Vector{AbstractMedicationKnowledge_RelatedMedicationKnowledge} = AbstractMedicationKnowledge_RelatedMedicationKnowledge[]
    resourceType::String = "MedicationKnowledge"
    status::Union{String, Nothing} = nothing
    synonym::Vector{String} = String[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge} = true



Base.@kwdef mutable struct MedicationKnowledge_RelatedMedicationKnowledge <: AbstractMedicationKnowledge_RelatedMedicationKnowledge
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reference::Vector{AbstractReference} = AbstractReference[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_RelatedMedicationKnowledge} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_RelatedMedicationKnowledge} = true



Base.@kwdef mutable struct MedicationKnowledge_Monograph <: AbstractMedicationKnowledge_Monograph
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Monograph} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Monograph} = true



Base.@kwdef mutable struct MedicationKnowledge_Ingredient <: AbstractMedicationKnowledge_Ingredient
    _isActive::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    isActive::Union{Bool, Nothing} = nothing
    itemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    itemReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Union{AbstractRatio, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Ingredient} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Ingredient} = true



Base.@kwdef mutable struct MedicationKnowledge_Cost <: AbstractMedicationKnowledge_Cost
    _source::Union{AbstractElement, Nothing} = nothing
    cost::Union{AbstractMoney, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Cost} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Cost} = true



Base.@kwdef mutable struct MedicationKnowledge_MonitoringProgram <: AbstractMedicationKnowledge_MonitoringProgram
    _name::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_MonitoringProgram} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_MonitoringProgram} = true



Base.@kwdef mutable struct MedicationKnowledge_AdministrationGuidelines <: AbstractMedicationKnowledge_AdministrationGuidelines
    dosage::Vector{AbstractMedicationKnowledge_Dosage} = AbstractMedicationKnowledge_Dosage[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    indicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    indicationReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patientCharacteristics::Vector{AbstractMedicationKnowledge_PatientCharacteristics} = AbstractMedicationKnowledge_PatientCharacteristics[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_AdministrationGuidelines} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_AdministrationGuidelines} = true



Base.@kwdef mutable struct MedicationKnowledge_Dosage <: AbstractMedicationKnowledge_Dosage
    dosage::Vector{AbstractDosage} = AbstractDosage[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Dosage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Dosage} = true



Base.@kwdef mutable struct MedicationKnowledge_PatientCharacteristics <: AbstractMedicationKnowledge_PatientCharacteristics
    _value::Vector{AbstractElement} = AbstractElement[]
    characteristicCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    characteristicQuantity::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    value::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_PatientCharacteristics} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_PatientCharacteristics} = true



Base.@kwdef mutable struct MedicationKnowledge_MedicineClassification <: AbstractMedicationKnowledge_MedicineClassification
    classification::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_MedicineClassification} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_MedicineClassification} = true



Base.@kwdef mutable struct MedicationKnowledge_Packaging <: AbstractMedicationKnowledge_Packaging
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Packaging} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Packaging} = true



Base.@kwdef mutable struct MedicationKnowledge_DrugCharacteristic <: AbstractMedicationKnowledge_DrugCharacteristic
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_DrugCharacteristic} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_DrugCharacteristic} = true



Base.@kwdef mutable struct MedicationKnowledge_Regulatory <: AbstractMedicationKnowledge_Regulatory
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    maxDispense::Union{AbstractMedicationKnowledge_MaxDispense, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    regulatoryAuthority::Union{AbstractReference, Nothing} = nothing
    schedule::Vector{AbstractMedicationKnowledge_Schedule} = AbstractMedicationKnowledge_Schedule[]
    substitution::Vector{AbstractMedicationKnowledge_Substitution} = AbstractMedicationKnowledge_Substitution[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Regulatory} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Regulatory} = true



Base.@kwdef mutable struct MedicationKnowledge_Substitution <: AbstractMedicationKnowledge_Substitution
    _allowed::Union{AbstractElement, Nothing} = nothing
    allowed::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Substitution} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Substitution} = true



Base.@kwdef mutable struct MedicationKnowledge_Schedule <: AbstractMedicationKnowledge_Schedule
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    schedule::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Schedule} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Schedule} = true



Base.@kwdef mutable struct MedicationKnowledge_MaxDispense <: AbstractMedicationKnowledge_MaxDispense
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractDuration, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_MaxDispense} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_MaxDispense} = true



Base.@kwdef mutable struct MedicationKnowledge_Kinetics <: AbstractMedicationKnowledge_Kinetics
    areaUnderCurve::Vector{AbstractQuantity} = AbstractQuantity[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    halfLifePeriod::Union{AbstractDuration, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    lethalDose50::Vector{AbstractQuantity} = AbstractQuantity[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationKnowledge_Kinetics} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationKnowledge_Kinetics} = true



Base.@kwdef mutable struct MedicationRequest <: AbstractMedicationRequest
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _doNotPerform::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesCanonical::Vector{AbstractElement} = AbstractElement[]
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _reportedBoolean::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    courseOfTherapyType::Union{AbstractCodeableConcept, Nothing} = nothing
    detectedIssue::Vector{AbstractReference} = AbstractReference[]
    dispenseRequest::Union{AbstractMedicationRequest_DispenseRequest, Nothing} = nothing
    doNotPerform::Union{Bool, Nothing} = nothing
    dosageInstruction::Vector{AbstractDosage} = AbstractDosage[]
    encounter::Union{AbstractReference, Nothing} = nothing
    eventHistory::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    insurance::Vector{AbstractReference} = AbstractReference[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    medicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    medicationReference::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    performer::Union{AbstractReference, Nothing} = nothing
    performerType::Union{AbstractCodeableConcept, Nothing} = nothing
    priorPrescription::Union{AbstractReference, Nothing} = nothing
    priority::Union{String, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    recorder::Union{AbstractReference, Nothing} = nothing
    reportedBoolean::Union{Bool, Nothing} = nothing
    reportedReference::Union{AbstractReference, Nothing} = nothing
    requester::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "MedicationRequest"
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    substitution::Union{AbstractMedicationRequest_Substitution, Nothing} = nothing
    supportingInformation::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationRequest} = true



Base.@kwdef mutable struct MedicationRequest_DispenseRequest <: AbstractMedicationRequest_DispenseRequest
    _numberOfRepeatsAllowed::Union{AbstractElement, Nothing} = nothing
    dispenseInterval::Union{AbstractDuration, Nothing} = nothing
    expectedSupplyDuration::Union{AbstractDuration, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    initialFill::Union{AbstractMedicationRequest_InitialFill, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numberOfRepeatsAllowed::Union{SafeInt32, Nothing} = nothing
    performer::Union{AbstractReference, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    validityPeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationRequest_DispenseRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationRequest_DispenseRequest} = true



Base.@kwdef mutable struct MedicationRequest_InitialFill <: AbstractMedicationRequest_InitialFill
    duration::Union{AbstractDuration, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationRequest_InitialFill} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationRequest_InitialFill} = true



Base.@kwdef mutable struct MedicationRequest_Substitution <: AbstractMedicationRequest_Substitution
    _allowedBoolean::Union{AbstractElement, Nothing} = nothing
    allowedBoolean::Union{Bool, Nothing} = nothing
    allowedCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationRequest_Substitution} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationRequest_Substitution} = true



Base.@kwdef mutable struct MedicationStatement <: AbstractMedicationStatement
    _dateAsserted::Union{AbstractElement, Nothing} = nothing
    _effectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    context::Union{AbstractReference, Nothing} = nothing
    dateAsserted::Union{FHIRDateTime, Nothing} = nothing
    derivedFrom::Vector{AbstractReference} = AbstractReference[]
    dosage::Vector{AbstractDosage} = AbstractDosage[]
    effectiveDateTime::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    informationSource::Union{AbstractReference, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    medicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    medicationReference::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "MedicationStatement"
    status::Union{String, Nothing} = nothing
    statusReason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicationStatement} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicationStatement} = true



Base.@kwdef mutable struct MedicinalProduct <: AbstractMedicinalProduct
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _specialMeasures::Vector{AbstractElement} = AbstractElement[]
    additionalMonitoringIndicator::Union{AbstractCodeableConcept, Nothing} = nothing
    attachedDocument::Vector{AbstractReference} = AbstractReference[]
    clinicalTrial::Vector{AbstractReference} = AbstractReference[]
    combinedPharmaceuticalDoseForm::Union{AbstractCodeableConcept, Nothing} = nothing
    contact::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    crossReference::Vector{AbstractIdentifier} = AbstractIdentifier[]
    domain::Union{AbstractCoding, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    legalStatusOfSupply::Union{AbstractCodeableConcept, Nothing} = nothing
    manufacturingBusinessOperation::Vector{AbstractMedicinalProduct_ManufacturingBusinessOperation} = AbstractMedicinalProduct_ManufacturingBusinessOperation[]
    marketingStatus::Vector{AbstractMarketingStatus} = AbstractMarketingStatus[]
    masterFile::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Vector{AbstractMedicinalProduct_Name} = AbstractMedicinalProduct_Name[]
    packagedMedicinalProduct::Vector{AbstractReference} = AbstractReference[]
    paediatricUseIndicator::Union{AbstractCodeableConcept, Nothing} = nothing
    pharmaceuticalProduct::Vector{AbstractReference} = AbstractReference[]
    productClassification::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    resourceType::String = "MedicinalProduct"
    specialDesignation::Vector{AbstractMedicinalProduct_SpecialDesignation} = AbstractMedicinalProduct_SpecialDesignation[]
    specialMeasures::Vector{String} = String[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProduct} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProduct} = true



Base.@kwdef mutable struct MedicinalProduct_Name <: AbstractMedicinalProduct_Name
    _productName::Union{AbstractElement, Nothing} = nothing
    countryLanguage::Vector{AbstractMedicinalProduct_CountryLanguage} = AbstractMedicinalProduct_CountryLanguage[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    namePart::Vector{AbstractMedicinalProduct_NamePart} = AbstractMedicinalProduct_NamePart[]
    productName::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProduct_Name} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProduct_Name} = true



Base.@kwdef mutable struct MedicinalProduct_NamePart <: AbstractMedicinalProduct_NamePart
    _part::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    part::Union{String, Nothing} = nothing
    type::Union{AbstractCoding, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProduct_NamePart} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProduct_NamePart} = true



Base.@kwdef mutable struct MedicinalProduct_CountryLanguage <: AbstractMedicinalProduct_CountryLanguage
    country::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    jurisdiction::Union{AbstractCodeableConcept, Nothing} = nothing
    language::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProduct_CountryLanguage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProduct_CountryLanguage} = true



Base.@kwdef mutable struct MedicinalProduct_ManufacturingBusinessOperation <: AbstractMedicinalProduct_ManufacturingBusinessOperation
    _effectiveDate::Union{AbstractElement, Nothing} = nothing
    authorisationReferenceNumber::Union{AbstractIdentifier, Nothing} = nothing
    confidentialityIndicator::Union{AbstractCodeableConcept, Nothing} = nothing
    effectiveDate::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    manufacturer::Vector{AbstractReference} = AbstractReference[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operationType::Union{AbstractCodeableConcept, Nothing} = nothing
    regulator::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProduct_ManufacturingBusinessOperation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProduct_ManufacturingBusinessOperation} = true



Base.@kwdef mutable struct MedicinalProduct_SpecialDesignation <: AbstractMedicinalProduct_SpecialDesignation
    _date::Union{AbstractElement, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    indicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    indicationReference::Union{AbstractReference, Nothing} = nothing
    intendedUse::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    species::Union{AbstractCodeableConcept, Nothing} = nothing
    status::Union{AbstractCodeableConcept, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProduct_SpecialDesignation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProduct_SpecialDesignation} = true



Base.@kwdef mutable struct MedicinalProductAuthorization <: AbstractMedicinalProductAuthorization
    _dateOfFirstAuthorization::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _internationalBirthDate::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _restoreDate::Union{AbstractElement, Nothing} = nothing
    _statusDate::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    country::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    dataExclusivityPeriod::Union{AbstractPeriod, Nothing} = nothing
    dateOfFirstAuthorization::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    holder::Union{AbstractReference, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    internationalBirthDate::Union{FHIRDateTime, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    jurisdictionalAuthorization::Vector{AbstractMedicinalProductAuthorization_JurisdictionalAuthorization} = AbstractMedicinalProductAuthorization_JurisdictionalAuthorization[]
    language::Union{String, Nothing} = nothing
    legalBasis::Union{AbstractCodeableConcept, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    procedure::Union{AbstractMedicinalProductAuthorization_Procedure, Nothing} = nothing
    regulator::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "MedicinalProductAuthorization"
    restoreDate::Union{FHIRDateTime, Nothing} = nothing
    status::Union{AbstractCodeableConcept, Nothing} = nothing
    statusDate::Union{FHIRDateTime, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    validityPeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductAuthorization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductAuthorization} = true



Base.@kwdef mutable struct MedicinalProductAuthorization_JurisdictionalAuthorization <: AbstractMedicinalProductAuthorization_JurisdictionalAuthorization
    country::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    legalStatusOfSupply::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    validityPeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductAuthorization_JurisdictionalAuthorization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductAuthorization_JurisdictionalAuthorization} = true



Base.@kwdef mutable struct MedicinalProductAuthorization_Procedure <: AbstractMedicinalProductAuthorization_Procedure
    _dateDateTime::Union{AbstractElement, Nothing} = nothing
    application::Vector{AbstractMedicinalProductAuthorization_Procedure} = AbstractMedicinalProductAuthorization_Procedure[]
    dateDateTime::Union{String, Nothing} = nothing
    datePeriod::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductAuthorization_Procedure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductAuthorization_Procedure} = true



Base.@kwdef mutable struct MedicinalProductContraindication <: AbstractMedicinalProductContraindication
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    comorbidity::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    disease::Union{AbstractCodeableConcept, Nothing} = nothing
    diseaseStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    otherTherapy::Vector{AbstractMedicinalProductContraindication_OtherTherapy} = AbstractMedicinalProductContraindication_OtherTherapy[]
    population::Vector{AbstractPopulation} = AbstractPopulation[]
    resourceType::String = "MedicinalProductContraindication"
    subject::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    therapeuticIndication::Vector{AbstractReference} = AbstractReference[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductContraindication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductContraindication} = true



Base.@kwdef mutable struct MedicinalProductContraindication_OtherTherapy <: AbstractMedicinalProductContraindication_OtherTherapy
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    medicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    medicationReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    therapyRelationshipType::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductContraindication_OtherTherapy} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductContraindication_OtherTherapy} = true



Base.@kwdef mutable struct MedicinalProductIndication <: AbstractMedicinalProductIndication
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    comorbidity::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    diseaseStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    diseaseSymptomProcedure::Union{AbstractCodeableConcept, Nothing} = nothing
    duration::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    intendedEffect::Union{AbstractCodeableConcept, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    otherTherapy::Vector{AbstractMedicinalProductIndication_OtherTherapy} = AbstractMedicinalProductIndication_OtherTherapy[]
    population::Vector{AbstractPopulation} = AbstractPopulation[]
    resourceType::String = "MedicinalProductIndication"
    subject::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    undesirableEffect::Vector{AbstractReference} = AbstractReference[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIndication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIndication} = true



Base.@kwdef mutable struct MedicinalProductIndication_OtherTherapy <: AbstractMedicinalProductIndication_OtherTherapy
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    medicationCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    medicationReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    therapyRelationshipType::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIndication_OtherTherapy} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIndication_OtherTherapy} = true



Base.@kwdef mutable struct MedicinalProductIngredient <: AbstractMedicinalProductIngredient
    _allergenicIndicator::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    allergenicIndicator::Union{Bool, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    manufacturer::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "MedicinalProductIngredient"
    role::Union{AbstractCodeableConcept, Nothing} = nothing
    specifiedSubstance::Vector{AbstractMedicinalProductIngredient_SpecifiedSubstance} = AbstractMedicinalProductIngredient_SpecifiedSubstance[]
    substance::Union{AbstractMedicinalProductIngredient_Substance, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIngredient} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIngredient} = true



Base.@kwdef mutable struct MedicinalProductIngredient_SpecifiedSubstance <: AbstractMedicinalProductIngredient_SpecifiedSubstance
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    confidentiality::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    group::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Vector{AbstractMedicinalProductIngredient_Strength} = AbstractMedicinalProductIngredient_Strength[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIngredient_SpecifiedSubstance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIngredient_SpecifiedSubstance} = true



Base.@kwdef mutable struct MedicinalProductIngredient_Strength <: AbstractMedicinalProductIngredient_Strength
    _measurementPoint::Union{AbstractElement, Nothing} = nothing
    concentration::Union{AbstractRatio, Nothing} = nothing
    concentrationLowLimit::Union{AbstractRatio, Nothing} = nothing
    country::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    measurementPoint::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    presentation::Union{AbstractRatio, Nothing} = nothing
    presentationLowLimit::Union{AbstractRatio, Nothing} = nothing
    referenceStrength::Vector{AbstractMedicinalProductIngredient_ReferenceStrength} = AbstractMedicinalProductIngredient_ReferenceStrength[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIngredient_Strength} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIngredient_Strength} = true



Base.@kwdef mutable struct MedicinalProductIngredient_ReferenceStrength <: AbstractMedicinalProductIngredient_ReferenceStrength
    _measurementPoint::Union{AbstractElement, Nothing} = nothing
    country::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    measurementPoint::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Union{AbstractRatio, Nothing} = nothing
    strengthLowLimit::Union{AbstractRatio, Nothing} = nothing
    substance::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIngredient_ReferenceStrength} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIngredient_ReferenceStrength} = true



Base.@kwdef mutable struct MedicinalProductIngredient_Substance <: AbstractMedicinalProductIngredient_Substance
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Vector{AbstractMedicinalProductIngredient_Strength} = AbstractMedicinalProductIngredient_Strength[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductIngredient_Substance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductIngredient_Substance} = true



Base.@kwdef mutable struct MedicinalProductInteraction <: AbstractMedicinalProductInteraction
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    effect::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    incidence::Union{AbstractCodeableConcept, Nothing} = nothing
    interactant::Vector{AbstractMedicinalProductInteraction_Interactant} = AbstractMedicinalProductInteraction_Interactant[]
    language::Union{String, Nothing} = nothing
    management::Union{AbstractCodeableConcept, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "MedicinalProductInteraction"
    subject::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductInteraction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductInteraction} = true



Base.@kwdef mutable struct MedicinalProductInteraction_Interactant <: AbstractMedicinalProductInteraction_Interactant
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    itemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    itemReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductInteraction_Interactant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductInteraction_Interactant} = true



Base.@kwdef mutable struct MedicinalProductManufactured <: AbstractMedicinalProductManufactured
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    ingredient::Vector{AbstractReference} = AbstractReference[]
    language::Union{String, Nothing} = nothing
    manufacturedDoseForm::Union{AbstractCodeableConcept, Nothing} = nothing
    manufacturer::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    otherCharacteristics::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    physicalCharacteristics::Union{AbstractProdCharacteristic, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    resourceType::String = "MedicinalProductManufactured"
    text::Union{AbstractNarrative, Nothing} = nothing
    unitOfPresentation::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductManufactured} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductManufactured} = true



Base.@kwdef mutable struct MedicinalProductPackaged <: AbstractMedicinalProductPackaged
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    batchIdentifier::Vector{AbstractMedicinalProductPackaged_BatchIdentifier} = AbstractMedicinalProductPackaged_BatchIdentifier[]
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    legalStatusOfSupply::Union{AbstractCodeableConcept, Nothing} = nothing
    manufacturer::Vector{AbstractReference} = AbstractReference[]
    marketingAuthorization::Union{AbstractReference, Nothing} = nothing
    marketingStatus::Vector{AbstractMarketingStatus} = AbstractMarketingStatus[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    packageItem::Vector{AbstractMedicinalProductPackaged_PackageItem} = AbstractMedicinalProductPackaged_PackageItem[]
    resourceType::String = "MedicinalProductPackaged"
    subject::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPackaged} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPackaged} = true



Base.@kwdef mutable struct MedicinalProductPackaged_BatchIdentifier <: AbstractMedicinalProductPackaged_BatchIdentifier
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    immediatePackaging::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outerPackaging::Union{AbstractIdentifier, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPackaged_BatchIdentifier} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPackaged_BatchIdentifier} = true



Base.@kwdef mutable struct MedicinalProductPackaged_PackageItem <: AbstractMedicinalProductPackaged_PackageItem
    alternateMaterial::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    device::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    manufacturedItem::Vector{AbstractReference} = AbstractReference[]
    manufacturer::Vector{AbstractReference} = AbstractReference[]
    material::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    otherCharacteristics::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    packageItem::Vector{AbstractMedicinalProductPackaged_PackageItem} = AbstractMedicinalProductPackaged_PackageItem[]
    physicalCharacteristics::Union{AbstractProdCharacteristic, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    shelfLifeStorage::Vector{AbstractProductShelfLife} = AbstractProductShelfLife[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPackaged_PackageItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPackaged_PackageItem} = true



Base.@kwdef mutable struct MedicinalProductPharmaceutical <: AbstractMedicinalProductPharmaceutical
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    administrableDoseForm::Union{AbstractCodeableConcept, Nothing} = nothing
    characteristics::Vector{AbstractMedicinalProductPharmaceutical_Characteristics} = AbstractMedicinalProductPharmaceutical_Characteristics[]
    contained::Vector{ResourceList} = ResourceList[]
    device::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    ingredient::Vector{AbstractReference} = AbstractReference[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "MedicinalProductPharmaceutical"
    routeOfAdministration::Vector{AbstractMedicinalProductPharmaceutical_RouteOfAdministration} = AbstractMedicinalProductPharmaceutical_RouteOfAdministration[]
    text::Union{AbstractNarrative, Nothing} = nothing
    unitOfPresentation::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPharmaceutical} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPharmaceutical} = true



Base.@kwdef mutable struct MedicinalProductPharmaceutical_Characteristics <: AbstractMedicinalProductPharmaceutical_Characteristics
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    status::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPharmaceutical_Characteristics} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPharmaceutical_Characteristics} = true



Base.@kwdef mutable struct MedicinalProductPharmaceutical_RouteOfAdministration <: AbstractMedicinalProductPharmaceutical_RouteOfAdministration
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    firstDose::Union{AbstractQuantity, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    maxDosePerDay::Union{AbstractQuantity, Nothing} = nothing
    maxDosePerTreatmentPeriod::Union{AbstractRatio, Nothing} = nothing
    maxSingleDose::Union{AbstractQuantity, Nothing} = nothing
    maxTreatmentPeriod::Union{AbstractDuration, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    targetSpecies::Vector{AbstractMedicinalProductPharmaceutical_TargetSpecies} = AbstractMedicinalProductPharmaceutical_TargetSpecies[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPharmaceutical_RouteOfAdministration} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPharmaceutical_RouteOfAdministration} = true



Base.@kwdef mutable struct MedicinalProductPharmaceutical_TargetSpecies <: AbstractMedicinalProductPharmaceutical_TargetSpecies
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    withdrawalPeriod::Vector{AbstractMedicinalProductPharmaceutical_WithdrawalPeriod} = AbstractMedicinalProductPharmaceutical_WithdrawalPeriod[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPharmaceutical_TargetSpecies} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPharmaceutical_TargetSpecies} = true



Base.@kwdef mutable struct MedicinalProductPharmaceutical_WithdrawalPeriod <: AbstractMedicinalProductPharmaceutical_WithdrawalPeriod
    _supportingInformation::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    supportingInformation::Union{String, Nothing} = nothing
    tissue::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductPharmaceutical_WithdrawalPeriod} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductPharmaceutical_WithdrawalPeriod} = true



Base.@kwdef mutable struct MedicinalProductUndesirableEffect <: AbstractMedicinalProductUndesirableEffect
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    classification::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    frequencyOfOccurrence::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    population::Vector{AbstractPopulation} = AbstractPopulation[]
    resourceType::String = "MedicinalProductUndesirableEffect"
    subject::Vector{AbstractReference} = AbstractReference[]
    symptomConditionEffect::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MedicinalProductUndesirableEffect} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MedicinalProductUndesirableEffect} = true



Base.@kwdef mutable struct MessageDefinition <: AbstractMessageDefinition
    _category::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _eventUri::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _responseRequired::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    allowedResponse::Vector{AbstractMessageDefinition_AllowedResponse} = AbstractMessageDefinition_AllowedResponse[]
    base::Union{String, Nothing} = nothing
    category::Union{String, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    eventCoding::Union{AbstractCoding, Nothing} = nothing
    eventUri::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focus::Vector{AbstractMessageDefinition_Focus} = AbstractMessageDefinition_Focus[]
    graph::Vector{String} = String[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    parent::Vector{String} = String[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    replaces::Vector{String} = String[]
    resourceType::String = "MessageDefinition"
    responseRequired::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageDefinition} = true



Base.@kwdef mutable struct MessageDefinition_Focus <: AbstractMessageDefinition_Focus
    _code::Union{AbstractElement, Nothing} = nothing
    _max::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    max::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    profile::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageDefinition_Focus} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageDefinition_Focus} = true



Base.@kwdef mutable struct MessageDefinition_AllowedResponse <: AbstractMessageDefinition_AllowedResponse
    _situation::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    message::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    situation::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageDefinition_AllowedResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageDefinition_AllowedResponse} = true



Base.@kwdef mutable struct MessageHeader <: AbstractMessageHeader
    _eventUri::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    definition::Union{String, Nothing} = nothing
    destination::Vector{AbstractMessageHeader_Destination} = AbstractMessageHeader_Destination[]
    enterer::Union{AbstractReference, Nothing} = nothing
    eventCoding::Union{AbstractCoding, Nothing} = nothing
    eventUri::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focus::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "MessageHeader"
    response::Union{AbstractMessageHeader_Response, Nothing} = nothing
    responsible::Union{AbstractReference, Nothing} = nothing
    sender::Union{AbstractReference, Nothing} = nothing
    source::Union{AbstractMessageHeader_Source, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageHeader} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageHeader} = true



Base.@kwdef mutable struct MessageHeader_Destination <: AbstractMessageHeader_Destination
    _endpoint::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    endpoint::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    receiver::Union{AbstractReference, Nothing} = nothing
    target::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageHeader_Destination} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageHeader_Destination} = true



Base.@kwdef mutable struct MessageHeader_Source <: AbstractMessageHeader_Source
    _endpoint::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _software::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Union{AbstractContactPoint, Nothing} = nothing
    endpoint::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    software::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageHeader_Source} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageHeader_Source} = true



Base.@kwdef mutable struct MessageHeader_Response <: AbstractMessageHeader_Response
    _code::Union{AbstractElement, Nothing} = nothing
    _identifier::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    details::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MessageHeader_Response} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MessageHeader_Response} = true



Base.@kwdef mutable struct MolecularSequence <: AbstractMolecularSequence
    _coordinateSystem::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _observedSeq::Union{AbstractElement, Nothing} = nothing
    _readCoverage::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    coordinateSystem::Union{SafeInt32, Nothing} = nothing
    device::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    observedSeq::Union{String, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    performer::Union{AbstractReference, Nothing} = nothing
    pointer::Vector{AbstractReference} = AbstractReference[]
    quality::Vector{AbstractMolecularSequence_Quality} = AbstractMolecularSequence_Quality[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    readCoverage::Union{SafeInt32, Nothing} = nothing
    referenceSeq::Union{AbstractMolecularSequence_ReferenceSeq, Nothing} = nothing
    repository::Vector{AbstractMolecularSequence_Repository} = AbstractMolecularSequence_Repository[]
    resourceType::String = "MolecularSequence"
    specimen::Union{AbstractReference, Nothing} = nothing
    structureVariant::Vector{AbstractMolecularSequence_StructureVariant} = AbstractMolecularSequence_StructureVariant[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    variant::Vector{AbstractMolecularSequence_Variant} = AbstractMolecularSequence_Variant[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence} = true



Base.@kwdef mutable struct MolecularSequence_ReferenceSeq <: AbstractMolecularSequence_ReferenceSeq
    _genomeBuild::Union{AbstractElement, Nothing} = nothing
    _orientation::Union{AbstractElement, Nothing} = nothing
    _referenceSeqString::Union{AbstractElement, Nothing} = nothing
    _strand::Union{AbstractElement, Nothing} = nothing
    _windowEnd::Union{AbstractElement, Nothing} = nothing
    _windowStart::Union{AbstractElement, Nothing} = nothing
    chromosome::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    genomeBuild::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    orientation::Union{String, Nothing} = nothing
    referenceSeqId::Union{AbstractCodeableConcept, Nothing} = nothing
    referenceSeqPointer::Union{AbstractReference, Nothing} = nothing
    referenceSeqString::Union{String, Nothing} = nothing
    strand::Union{String, Nothing} = nothing
    windowEnd::Union{SafeInt32, Nothing} = nothing
    windowStart::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_ReferenceSeq} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_ReferenceSeq} = true



Base.@kwdef mutable struct MolecularSequence_Variant <: AbstractMolecularSequence_Variant
    _cigar::Union{AbstractElement, Nothing} = nothing
    _end::Union{AbstractElement, Nothing} = nothing
    _observedAllele::Union{AbstractElement, Nothing} = nothing
    _referenceAllele::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    cigar::Union{String, Nothing} = nothing
    end_fhir::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    observedAllele::Union{String, Nothing} = nothing
    referenceAllele::Union{String, Nothing} = nothing
    start::Union{SafeInt32, Nothing} = nothing
    variantPointer::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_Variant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_Variant} = true



Base.@kwdef mutable struct MolecularSequence_Quality <: AbstractMolecularSequence_Quality
    _end::Union{AbstractElement, Nothing} = nothing
    _fScore::Union{AbstractElement, Nothing} = nothing
    _gtFP::Union{AbstractElement, Nothing} = nothing
    _precision::Union{AbstractElement, Nothing} = nothing
    _queryFP::Union{AbstractElement, Nothing} = nothing
    _queryTP::Union{AbstractElement, Nothing} = nothing
    _recall::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    _truthFN::Union{AbstractElement, Nothing} = nothing
    _truthTP::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    end_fhir::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fScore::Union{FHIRNumber, Nothing} = nothing
    gtFP::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    precision::Union{FHIRNumber, Nothing} = nothing
    queryFP::Union{FHIRNumber, Nothing} = nothing
    queryTP::Union{FHIRNumber, Nothing} = nothing
    recall::Union{FHIRNumber, Nothing} = nothing
    roc::Union{AbstractMolecularSequence_Roc, Nothing} = nothing
    score::Union{AbstractQuantity, Nothing} = nothing
    standardSequence::Union{AbstractCodeableConcept, Nothing} = nothing
    start::Union{SafeInt32, Nothing} = nothing
    truthFN::Union{FHIRNumber, Nothing} = nothing
    truthTP::Union{FHIRNumber, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_Quality} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_Quality} = true



Base.@kwdef mutable struct MolecularSequence_Roc <: AbstractMolecularSequence_Roc
    _fMeasure::Vector{AbstractElement} = AbstractElement[]
    _numFN::Vector{AbstractElement} = AbstractElement[]
    _numFP::Vector{AbstractElement} = AbstractElement[]
    _numTP::Vector{AbstractElement} = AbstractElement[]
    _precision::Vector{AbstractElement} = AbstractElement[]
    _score::Vector{AbstractElement} = AbstractElement[]
    _sensitivity::Vector{AbstractElement} = AbstractElement[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fMeasure::Vector{FHIRNumber} = FHIRNumber[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numFN::Vector{SafeInt32} = SafeInt32[]
    numFP::Vector{SafeInt32} = SafeInt32[]
    numTP::Vector{SafeInt32} = SafeInt32[]
    precision::Vector{FHIRNumber} = FHIRNumber[]
    score::Vector{SafeInt32} = SafeInt32[]
    sensitivity::Vector{FHIRNumber} = FHIRNumber[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_Roc} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_Roc} = true



Base.@kwdef mutable struct MolecularSequence_Repository <: AbstractMolecularSequence_Repository
    _datasetId::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _readsetId::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _variantsetId::Union{AbstractElement, Nothing} = nothing
    datasetId::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    readsetId::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    variantsetId::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_Repository} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_Repository} = true



Base.@kwdef mutable struct MolecularSequence_StructureVariant <: AbstractMolecularSequence_StructureVariant
    _exact::Union{AbstractElement, Nothing} = nothing
    _length::Union{AbstractElement, Nothing} = nothing
    exact::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    inner::Union{AbstractMolecularSequence_Inner, Nothing} = nothing
    length::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outer::Union{AbstractMolecularSequence_Outer, Nothing} = nothing
    variantType::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_StructureVariant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_StructureVariant} = true



Base.@kwdef mutable struct MolecularSequence_Outer <: AbstractMolecularSequence_Outer
    _end::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    end_fhir::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    start::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_Outer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_Outer} = true



Base.@kwdef mutable struct MolecularSequence_Inner <: AbstractMolecularSequence_Inner
    _end::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    end_fhir::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    start::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: MolecularSequence_Inner} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: MolecularSequence_Inner} = true



Base.@kwdef mutable struct NamingSystem <: AbstractNamingSystem
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _kind::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _responsible::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    kind::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    resourceType::String = "NamingSystem"
    responsible::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    uniqueId::Vector{AbstractNamingSystem_UniqueId} = AbstractNamingSystem_UniqueId[]
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: NamingSystem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NamingSystem} = true



Base.@kwdef mutable struct NamingSystem_UniqueId <: AbstractNamingSystem_UniqueId
    _comment::Union{AbstractElement, Nothing} = nothing
    _preferred::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    preferred::Union{Bool, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: NamingSystem_UniqueId} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NamingSystem_UniqueId} = true



Base.@kwdef mutable struct NutritionOrder <: AbstractNutritionOrder
    _dateTime::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiates::Vector{AbstractElement} = AbstractElement[]
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    allergyIntolerance::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    dateTime::Union{FHIRDateTime, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    enteralFormula::Union{AbstractNutritionOrder_EnteralFormula, Nothing} = nothing
    excludeFoodModifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    foodPreferenceModifier::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiates::Vector{String} = String[]
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    oralDiet::Union{AbstractNutritionOrder_OralDiet, Nothing} = nothing
    orderer::Union{AbstractReference, Nothing} = nothing
    patient::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "NutritionOrder"
    status::Union{String, Nothing} = nothing
    supplement::Vector{AbstractNutritionOrder_Supplement} = AbstractNutritionOrder_Supplement[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder} = true



Base.@kwdef mutable struct NutritionOrder_OralDiet <: AbstractNutritionOrder_OralDiet
    _instruction::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fluidConsistencyType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    id::Union{String, Nothing} = nothing
    instruction::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    nutrient::Vector{AbstractNutritionOrder_Nutrient} = AbstractNutritionOrder_Nutrient[]
    schedule::Vector{AbstractTiming} = AbstractTiming[]
    texture::Vector{AbstractNutritionOrder_Texture} = AbstractNutritionOrder_Texture[]
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder_OralDiet} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder_OralDiet} = true



Base.@kwdef mutable struct NutritionOrder_Nutrient <: AbstractNutritionOrder_Nutrient
    amount::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifier::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder_Nutrient} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder_Nutrient} = true



Base.@kwdef mutable struct NutritionOrder_Texture <: AbstractNutritionOrder_Texture
    extension::Vector{AbstractExtension} = AbstractExtension[]
    foodType::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifier::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder_Texture} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder_Texture} = true



Base.@kwdef mutable struct NutritionOrder_Supplement <: AbstractNutritionOrder_Supplement
    _instruction::Union{AbstractElement, Nothing} = nothing
    _productName::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    instruction::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    productName::Union{String, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    schedule::Vector{AbstractTiming} = AbstractTiming[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder_Supplement} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder_Supplement} = true



Base.@kwdef mutable struct NutritionOrder_EnteralFormula <: AbstractNutritionOrder_EnteralFormula
    _additiveProductName::Union{AbstractElement, Nothing} = nothing
    _administrationInstruction::Union{AbstractElement, Nothing} = nothing
    _baseFormulaProductName::Union{AbstractElement, Nothing} = nothing
    additiveProductName::Union{String, Nothing} = nothing
    additiveType::Union{AbstractCodeableConcept, Nothing} = nothing
    administration::Vector{AbstractNutritionOrder_Administration} = AbstractNutritionOrder_Administration[]
    administrationInstruction::Union{String, Nothing} = nothing
    baseFormulaProductName::Union{String, Nothing} = nothing
    baseFormulaType::Union{AbstractCodeableConcept, Nothing} = nothing
    caloricDensity::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    maxVolumeToDeliver::Union{AbstractQuantity, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    routeofAdministration::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder_EnteralFormula} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder_EnteralFormula} = true



Base.@kwdef mutable struct NutritionOrder_Administration <: AbstractNutritionOrder_Administration
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
    rateQuantity::Union{AbstractQuantity, Nothing} = nothing
    rateRatio::Union{AbstractRatio, Nothing} = nothing
    schedule::Union{AbstractTiming, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: NutritionOrder_Administration} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: NutritionOrder_Administration} = true



Base.@kwdef mutable struct Observation <: AbstractObservation
    _effectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _effectiveInstant::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _issued::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    component::Vector{AbstractObservation_Component} = AbstractObservation_Component[]
    contained::Vector{ResourceList} = ResourceList[]
    dataAbsentReason::Union{AbstractCodeableConcept, Nothing} = nothing
    derivedFrom::Vector{AbstractReference} = AbstractReference[]
    device::Union{AbstractReference, Nothing} = nothing
    effectiveDateTime::Union{String, Nothing} = nothing
    effectiveInstant::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    effectiveTiming::Union{AbstractTiming, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focus::Vector{AbstractReference} = AbstractReference[]
    hasMember::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    interpretation::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    issued::Union{ZonedDateTime, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    performer::Vector{AbstractReference} = AbstractReference[]
    referenceRange::Vector{AbstractObservation_ReferenceRange} = AbstractObservation_ReferenceRange[]
    resourceType::String = "Observation"
    specimen::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Observation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Observation} = true



Base.@kwdef mutable struct Observation_ReferenceRange <: AbstractObservation_ReferenceRange
    _text::Union{AbstractElement, Nothing} = nothing
    age::Union{AbstractRange, Nothing} = nothing
    appliesTo::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    high::Union{AbstractQuantity, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    low::Union{AbstractQuantity, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    text::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Observation_ReferenceRange} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Observation_ReferenceRange} = true



Base.@kwdef mutable struct Observation_Component <: AbstractObservation_Component
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    dataAbsentReason::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    interpretation::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    referenceRange::Vector{AbstractObservation_ReferenceRange} = AbstractObservation_ReferenceRange[]
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Observation_Component} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Observation_Component} = true



Base.@kwdef mutable struct ObservationDefinition <: AbstractObservationDefinition
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _multipleResultsAllowed::Union{AbstractElement, Nothing} = nothing
    _permittedDataType::Vector{AbstractElement} = AbstractElement[]
    _preferredReportName::Union{AbstractElement, Nothing} = nothing
    abnormalCodedValueSet::Union{AbstractReference, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    criticalCodedValueSet::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    multipleResultsAllowed::Union{Bool, Nothing} = nothing
    normalCodedValueSet::Union{AbstractReference, Nothing} = nothing
    permittedDataType::Vector{String} = String[]
    preferredReportName::Union{String, Nothing} = nothing
    qualifiedInterval::Vector{AbstractObservationDefinition_QualifiedInterval} = AbstractObservationDefinition_QualifiedInterval[]
    quantitativeDetails::Union{AbstractObservationDefinition_QuantitativeDetails, Nothing} = nothing
    resourceType::String = "ObservationDefinition"
    text::Union{AbstractNarrative, Nothing} = nothing
    validCodedValueSet::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ObservationDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ObservationDefinition} = true



Base.@kwdef mutable struct ObservationDefinition_QuantitativeDetails <: AbstractObservationDefinition_QuantitativeDetails
    _conversionFactor::Union{AbstractElement, Nothing} = nothing
    _decimalPrecision::Union{AbstractElement, Nothing} = nothing
    conversionFactor::Union{FHIRNumber, Nothing} = nothing
    customaryUnit::Union{AbstractCodeableConcept, Nothing} = nothing
    decimalPrecision::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    unit::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ObservationDefinition_QuantitativeDetails} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ObservationDefinition_QuantitativeDetails} = true



Base.@kwdef mutable struct ObservationDefinition_QualifiedInterval <: AbstractObservationDefinition_QualifiedInterval
    _category::Union{AbstractElement, Nothing} = nothing
    _condition::Union{AbstractElement, Nothing} = nothing
    _gender::Union{AbstractElement, Nothing} = nothing
    age::Union{AbstractRange, Nothing} = nothing
    appliesTo::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    category::Union{String, Nothing} = nothing
    condition::Union{String, Nothing} = nothing
    context::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{String, Nothing} = nothing
    gestationalAge::Union{AbstractRange, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    range::Union{AbstractRange, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ObservationDefinition_QualifiedInterval} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ObservationDefinition_QualifiedInterval} = true



Base.@kwdef mutable struct OperationDefinition <: AbstractOperationDefinition
    _affectsState::Union{AbstractElement, Nothing} = nothing
    _code::Union{AbstractElement, Nothing} = nothing
    _comment::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instance::Union{AbstractElement, Nothing} = nothing
    _kind::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _resource::Vector{AbstractElement} = AbstractElement[]
    _status::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    affectsState::Union{Bool, Nothing} = nothing
    base::Union{String, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    inputProfile::Union{String, Nothing} = nothing
    instance::Union{Bool, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    kind::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    outputProfile::Union{String, Nothing} = nothing
    overload::Vector{AbstractOperationDefinition_Overload} = AbstractOperationDefinition_Overload[]
    parameter::Vector{AbstractOperationDefinition_Parameter} = AbstractOperationDefinition_Parameter[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resource::Vector{String} = String[]
    resourceType::String = "OperationDefinition"
    status::Union{String, Nothing} = nothing
    system::Union{Bool, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    type::Union{Bool, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationDefinition} = true



Base.@kwdef mutable struct OperationDefinition_Parameter <: AbstractOperationDefinition_Parameter
    _documentation::Union{AbstractElement, Nothing} = nothing
    _max::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _searchType::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _use::Union{AbstractElement, Nothing} = nothing
    binding::Union{AbstractOperationDefinition_Binding, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    max::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    part::Vector{AbstractOperationDefinition_Parameter} = AbstractOperationDefinition_Parameter[]
    referencedFrom::Vector{AbstractOperationDefinition_ReferencedFrom} = AbstractOperationDefinition_ReferencedFrom[]
    searchType::Union{String, Nothing} = nothing
    targetProfile::Vector{String} = String[]
    type::Union{String, Nothing} = nothing
    use::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationDefinition_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationDefinition_Parameter} = true



Base.@kwdef mutable struct OperationDefinition_Binding <: AbstractOperationDefinition_Binding
    _strength::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    strength::Union{String, Nothing} = nothing
    valueSet::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationDefinition_Binding} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationDefinition_Binding} = true



Base.@kwdef mutable struct OperationDefinition_ReferencedFrom <: AbstractOperationDefinition_ReferencedFrom
    _source::Union{AbstractElement, Nothing} = nothing
    _sourceId::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Union{String, Nothing} = nothing
    sourceId::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationDefinition_ReferencedFrom} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationDefinition_ReferencedFrom} = true



Base.@kwdef mutable struct OperationDefinition_Overload <: AbstractOperationDefinition_Overload
    _comment::Union{AbstractElement, Nothing} = nothing
    _parameterName::Vector{AbstractElement} = AbstractElement[]
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    parameterName::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationDefinition_Overload} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationDefinition_Overload} = true



Base.@kwdef mutable struct OperationOutcome <: AbstractOperationOutcome
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    issue::Vector{AbstractOperationOutcome_Issue} = AbstractOperationOutcome_Issue[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "OperationOutcome"
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationOutcome} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationOutcome} = true



Base.@kwdef mutable struct OperationOutcome_Issue <: AbstractOperationOutcome_Issue
    _code::Union{AbstractElement, Nothing} = nothing
    _diagnostics::Union{AbstractElement, Nothing} = nothing
    _expression::Vector{AbstractElement} = AbstractElement[]
    _location::Vector{AbstractElement} = AbstractElement[]
    _severity::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    details::Union{AbstractCodeableConcept, Nothing} = nothing
    diagnostics::Union{String, Nothing} = nothing
    expression::Vector{String} = String[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    location::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    severity::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OperationOutcome_Issue} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OperationOutcome_Issue} = true



Base.@kwdef mutable struct Organization <: AbstractOrganization
    _active::Union{AbstractElement, Nothing} = nothing
    _alias::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    address::Vector{AbstractAddress} = AbstractAddress[]
    alias::Vector{String} = String[]
    contact::Vector{AbstractOrganization_Contact} = AbstractOrganization_Contact[]
    contained::Vector{ResourceList} = ResourceList[]
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    partOf::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "Organization"
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Organization} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Organization} = true



Base.@kwdef mutable struct Organization_Contact <: AbstractOrganization_Contact
    address::Union{AbstractAddress, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{AbstractHumanName, Nothing} = nothing
    purpose::Union{AbstractCodeableConcept, Nothing} = nothing
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Organization_Contact} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Organization_Contact} = true



Base.@kwdef mutable struct OrganizationAffiliation <: AbstractOrganizationAffiliation
    _active::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    healthcareService::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    network::Vector{AbstractReference} = AbstractReference[]
    organization::Union{AbstractReference, Nothing} = nothing
    participatingOrganization::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    resourceType::String = "OrganizationAffiliation"
    specialty::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: OrganizationAffiliation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: OrganizationAffiliation} = true



Base.@kwdef mutable struct Parameters <: AbstractParameters
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    parameter::Vector{AbstractParameters_Parameter} = AbstractParameters_Parameter[]
    resourceType::String = "Parameters"
end
@inline StructTypes.StructType(::Type{T}) where {T <: Parameters} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Parameters} = true



Base.@kwdef mutable struct Parameters_Parameter <: AbstractParameters_Parameter
    _name::Union{AbstractElement, Nothing} = nothing
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCanonical::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueId::Union{AbstractElement, Nothing} = nothing
    _valueInstant::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueMarkdown::Union{AbstractElement, Nothing} = nothing
    _valueOid::Union{AbstractElement, Nothing} = nothing
    _valuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    _valueUrl::Union{AbstractElement, Nothing} = nothing
    _valueUuid::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    part::Vector{AbstractParameters_Parameter} = AbstractParameters_Parameter[]
    resource::Union{ResourceList, Nothing} = nothing
    valueAddress::Union{AbstractAddress, Nothing} = nothing
    valueAge::Union{AbstractAge, Nothing} = nothing
    valueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCanonical::Union{String, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    valueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    valueContributor::Union{AbstractContributor, Nothing} = nothing
    valueCount::Union{AbstractCount, Nothing} = nothing
    valueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueDistance::Union{AbstractDistance, Nothing} = nothing
    valueDosage::Union{AbstractDosage, Nothing} = nothing
    valueDuration::Union{AbstractDuration, Nothing} = nothing
    valueExpression::Union{AbstractExpression, Nothing} = nothing
    valueHumanName::Union{AbstractHumanName, Nothing} = nothing
    valueId::Union{String, Nothing} = nothing
    valueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    valueInstant::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueMarkdown::Union{String, Nothing} = nothing
    valueMeta::Union{AbstractMeta, Nothing} = nothing
    valueMoney::Union{AbstractMoney, Nothing} = nothing
    valueOid::Union{String, Nothing} = nothing
    valueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueSignature::Union{AbstractSignature, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueTiming::Union{AbstractTiming, Nothing} = nothing
    valueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    valueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
    valueUrl::Union{String, Nothing} = nothing
    valueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    valueUuid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Parameters_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Parameters_Parameter} = true



Base.@kwdef mutable struct Patient <: AbstractPatient
    _active::Union{AbstractElement, Nothing} = nothing
    _birthDate::Union{AbstractElement, Nothing} = nothing
    _deceasedBoolean::Union{AbstractElement, Nothing} = nothing
    _deceasedDateTime::Union{AbstractElement, Nothing} = nothing
    _gender::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _multipleBirthBoolean::Union{AbstractElement, Nothing} = nothing
    _multipleBirthInteger::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    address::Vector{AbstractAddress} = AbstractAddress[]
    birthDate::Union{Date, Nothing} = nothing
    communication::Vector{AbstractPatient_Communication} = AbstractPatient_Communication[]
    contact::Vector{AbstractPatient_Contact} = AbstractPatient_Contact[]
    contained::Vector{ResourceList} = ResourceList[]
    deceasedBoolean::Union{Bool, Nothing} = nothing
    deceasedDateTime::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{String, Nothing} = nothing
    generalPractitioner::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    link::Vector{AbstractPatient_Link} = AbstractPatient_Link[]
    managingOrganization::Union{AbstractReference, Nothing} = nothing
    maritalStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    multipleBirthBoolean::Union{Bool, Nothing} = nothing
    multipleBirthInteger::Union{FHIRInt32, Nothing} = nothing
    name::Vector{AbstractHumanName} = AbstractHumanName[]
    photo::Vector{AbstractAttachment} = AbstractAttachment[]
    resourceType::String = "Patient"
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Patient} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Patient} = true



Base.@kwdef mutable struct Patient_Contact <: AbstractPatient_Contact
    _gender::Union{AbstractElement, Nothing} = nothing
    address::Union{AbstractAddress, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{AbstractHumanName, Nothing} = nothing
    organization::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    relationship::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Patient_Contact} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Patient_Contact} = true



Base.@kwdef mutable struct Patient_Communication <: AbstractPatient_Communication
    _preferred::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    preferred::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Patient_Communication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Patient_Communication} = true



Base.@kwdef mutable struct Patient_Link <: AbstractPatient_Link
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    other::Union{AbstractReference, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Patient_Link} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Patient_Link} = true



Base.@kwdef mutable struct PaymentNotice <: AbstractPaymentNotice
    _created::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _paymentDate::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    payee::Union{AbstractReference, Nothing} = nothing
    payment::Union{AbstractReference, Nothing} = nothing
    paymentDate::Union{Date, Nothing} = nothing
    paymentStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    provider::Union{AbstractReference, Nothing} = nothing
    recipient::Union{AbstractReference, Nothing} = nothing
    request::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "PaymentNotice"
    response::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PaymentNotice} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PaymentNotice} = true



Base.@kwdef mutable struct PaymentReconciliation <: AbstractPaymentReconciliation
    _created::Union{AbstractElement, Nothing} = nothing
    _disposition::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _outcome::Union{AbstractElement, Nothing} = nothing
    _paymentDate::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    detail::Vector{AbstractPaymentReconciliation_Detail} = AbstractPaymentReconciliation_Detail[]
    disposition::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    formCode::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{String, Nothing} = nothing
    paymentAmount::Union{AbstractMoney, Nothing} = nothing
    paymentDate::Union{Date, Nothing} = nothing
    paymentIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    paymentIssuer::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    processNote::Vector{AbstractPaymentReconciliation_ProcessNote} = AbstractPaymentReconciliation_ProcessNote[]
    request::Union{AbstractReference, Nothing} = nothing
    requestor::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "PaymentReconciliation"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PaymentReconciliation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PaymentReconciliation} = true



Base.@kwdef mutable struct PaymentReconciliation_Detail <: AbstractPaymentReconciliation_Detail
    _date::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractMoney, Nothing} = nothing
    date::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    payee::Union{AbstractReference, Nothing} = nothing
    predecessor::Union{AbstractIdentifier, Nothing} = nothing
    request::Union{AbstractReference, Nothing} = nothing
    response::Union{AbstractReference, Nothing} = nothing
    responsible::Union{AbstractReference, Nothing} = nothing
    submitter::Union{AbstractReference, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PaymentReconciliation_Detail} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PaymentReconciliation_Detail} = true



Base.@kwdef mutable struct PaymentReconciliation_ProcessNote <: AbstractPaymentReconciliation_ProcessNote
    _text::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    text::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PaymentReconciliation_ProcessNote} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PaymentReconciliation_ProcessNote} = true



Base.@kwdef mutable struct Person <: AbstractPerson
    _active::Union{AbstractElement, Nothing} = nothing
    _birthDate::Union{AbstractElement, Nothing} = nothing
    _gender::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    address::Vector{AbstractAddress} = AbstractAddress[]
    birthDate::Union{Date, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    link::Vector{AbstractPerson_Link} = AbstractPerson_Link[]
    managingOrganization::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Vector{AbstractHumanName} = AbstractHumanName[]
    photo::Union{AbstractAttachment, Nothing} = nothing
    resourceType::String = "Person"
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Person} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Person} = true



Base.@kwdef mutable struct Person_Link <: AbstractPerson_Link
    _assurance::Union{AbstractElement, Nothing} = nothing
    assurance::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    target::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Person_Link} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Person_Link} = true



Base.@kwdef mutable struct PlanDefinition <: AbstractPlanDefinition
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractPlanDefinition_Action} = AbstractPlanDefinition_Action[]
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    goal::Vector{AbstractPlanDefinition_Goal} = AbstractPlanDefinition_Goal[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    library::Vector{String} = String[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "PlanDefinition"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition} = true



Base.@kwdef mutable struct PlanDefinition_Goal <: AbstractPlanDefinition_Goal
    addresses::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    description::Union{AbstractCodeableConcept, Nothing} = nothing
    documentation::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    priority::Union{AbstractCodeableConcept, Nothing} = nothing
    start::Union{AbstractCodeableConcept, Nothing} = nothing
    target::Vector{AbstractPlanDefinition_Target} = AbstractPlanDefinition_Target[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_Goal} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_Goal} = true



Base.@kwdef mutable struct PlanDefinition_Target <: AbstractPlanDefinition_Target
    detailCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    detailQuantity::Union{AbstractQuantity, Nothing} = nothing
    detailRange::Union{AbstractRange, Nothing} = nothing
    due::Union{AbstractDuration, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    measure::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_Target} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_Target} = true



Base.@kwdef mutable struct PlanDefinition_Action <: AbstractPlanDefinition_Action
    _cardinalityBehavior::Union{AbstractElement, Nothing} = nothing
    _definitionCanonical::Union{AbstractElement, Nothing} = nothing
    _definitionUri::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _goalId::Vector{AbstractElement} = AbstractElement[]
    _groupingBehavior::Union{AbstractElement, Nothing} = nothing
    _precheckBehavior::Union{AbstractElement, Nothing} = nothing
    _prefix::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _requiredBehavior::Union{AbstractElement, Nothing} = nothing
    _selectionBehavior::Union{AbstractElement, Nothing} = nothing
    _textEquivalent::Union{AbstractElement, Nothing} = nothing
    _timingDateTime::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractPlanDefinition_Action} = AbstractPlanDefinition_Action[]
    cardinalityBehavior::Union{String, Nothing} = nothing
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    condition::Vector{AbstractPlanDefinition_Condition} = AbstractPlanDefinition_Condition[]
    definitionCanonical::Union{String, Nothing} = nothing
    definitionUri::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    documentation::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    dynamicValue::Vector{AbstractPlanDefinition_DynamicValue} = AbstractPlanDefinition_DynamicValue[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    goalId::Vector{String} = String[]
    groupingBehavior::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    input::Vector{AbstractDataRequirement} = AbstractDataRequirement[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    output::Vector{AbstractDataRequirement} = AbstractDataRequirement[]
    participant::Vector{AbstractPlanDefinition_Participant} = AbstractPlanDefinition_Participant[]
    precheckBehavior::Union{String, Nothing} = nothing
    prefix::Union{String, Nothing} = nothing
    priority::Union{String, Nothing} = nothing
    reason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    relatedAction::Vector{AbstractPlanDefinition_RelatedAction} = AbstractPlanDefinition_RelatedAction[]
    requiredBehavior::Union{String, Nothing} = nothing
    selectionBehavior::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    textEquivalent::Union{String, Nothing} = nothing
    timingAge::Union{AbstractAge, Nothing} = nothing
    timingDateTime::Union{String, Nothing} = nothing
    timingDuration::Union{AbstractDuration, Nothing} = nothing
    timingPeriod::Union{AbstractPeriod, Nothing} = nothing
    timingRange::Union{AbstractRange, Nothing} = nothing
    timingTiming::Union{AbstractTiming, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    transform::Union{String, Nothing} = nothing
    trigger::Vector{AbstractTriggerDefinition} = AbstractTriggerDefinition[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_Action} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_Action} = true



Base.@kwdef mutable struct PlanDefinition_Condition <: AbstractPlanDefinition_Condition
    _kind::Union{AbstractElement, Nothing} = nothing
    expression::Union{AbstractExpression, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    kind::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_Condition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_Condition} = true



Base.@kwdef mutable struct PlanDefinition_RelatedAction <: AbstractPlanDefinition_RelatedAction
    _actionId::Union{AbstractElement, Nothing} = nothing
    _relationship::Union{AbstractElement, Nothing} = nothing
    actionId::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    offsetDuration::Union{AbstractDuration, Nothing} = nothing
    offsetRange::Union{AbstractRange, Nothing} = nothing
    relationship::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_RelatedAction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_RelatedAction} = true



Base.@kwdef mutable struct PlanDefinition_Participant <: AbstractPlanDefinition_Participant
    _type::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    role::Union{AbstractCodeableConcept, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_Participant} = true



Base.@kwdef mutable struct PlanDefinition_DynamicValue <: AbstractPlanDefinition_DynamicValue
    _path::Union{AbstractElement, Nothing} = nothing
    expression::Union{AbstractExpression, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    path::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PlanDefinition_DynamicValue} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PlanDefinition_DynamicValue} = true



Base.@kwdef mutable struct Practitioner <: AbstractPractitioner
    _active::Union{AbstractElement, Nothing} = nothing
    _birthDate::Union{AbstractElement, Nothing} = nothing
    _gender::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    address::Vector{AbstractAddress} = AbstractAddress[]
    birthDate::Union{Date, Nothing} = nothing
    communication::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Vector{AbstractHumanName} = AbstractHumanName[]
    photo::Vector{AbstractAttachment} = AbstractAttachment[]
    qualification::Vector{AbstractPractitioner_Qualification} = AbstractPractitioner_Qualification[]
    resourceType::String = "Practitioner"
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Practitioner} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Practitioner} = true



Base.@kwdef mutable struct Practitioner_Qualification <: AbstractPractitioner_Qualification
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    issuer::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Practitioner_Qualification} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Practitioner_Qualification} = true



Base.@kwdef mutable struct PractitionerRole <: AbstractPractitionerRole
    _active::Union{AbstractElement, Nothing} = nothing
    _availabilityExceptions::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    availabilityExceptions::Union{String, Nothing} = nothing
    availableTime::Vector{AbstractPractitionerRole_AvailableTime} = AbstractPractitionerRole_AvailableTime[]
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    endpoint::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    healthcareService::Vector{AbstractReference} = AbstractReference[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    notAvailable::Vector{AbstractPractitionerRole_NotAvailable} = AbstractPractitionerRole_NotAvailable[]
    organization::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    practitioner::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "PractitionerRole"
    specialty::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: PractitionerRole} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PractitionerRole} = true



Base.@kwdef mutable struct PractitionerRole_AvailableTime <: AbstractPractitionerRole_AvailableTime
    _allDay::Union{AbstractElement, Nothing} = nothing
    _availableEndTime::Union{AbstractElement, Nothing} = nothing
    _availableStartTime::Union{AbstractElement, Nothing} = nothing
    _daysOfWeek::Vector{AbstractElement} = AbstractElement[]
    allDay::Union{Bool, Nothing} = nothing
    availableEndTime::Union{Time, Nothing} = nothing
    availableStartTime::Union{Time, Nothing} = nothing
    daysOfWeek::Vector{String} = String[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: PractitionerRole_AvailableTime} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PractitionerRole_AvailableTime} = true



Base.@kwdef mutable struct PractitionerRole_NotAvailable <: AbstractPractitionerRole_NotAvailable
    _description::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    during::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: PractitionerRole_NotAvailable} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: PractitionerRole_NotAvailable} = true



Base.@kwdef mutable struct Procedure <: AbstractProcedure
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _language::Union{AbstractElement, Nothing} = nothing
    _performedDateTime::Union{AbstractElement, Nothing} = nothing
    _performedString::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    asserter::Union{AbstractReference, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    bodySite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    complication::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    complicationDetail::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focalDevice::Vector{AbstractProcedure_FocalDevice} = AbstractProcedure_FocalDevice[]
    followUp::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    outcome::Union{AbstractCodeableConcept, Nothing} = nothing
    partOf::Vector{AbstractReference} = AbstractReference[]
    performedAge::Union{AbstractAge, Nothing} = nothing
    performedDateTime::Union{String, Nothing} = nothing
    performedPeriod::Union{AbstractPeriod, Nothing} = nothing
    performedRange::Union{AbstractRange, Nothing} = nothing
    performedString::Union{String, Nothing} = nothing
    performer::Vector{AbstractProcedure_Performer} = AbstractProcedure_Performer[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    recorder::Union{AbstractReference, Nothing} = nothing
    report::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "Procedure"
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    usedCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    usedReference::Vector{AbstractReference} = AbstractReference[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Procedure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Procedure} = true



Base.@kwdef mutable struct Procedure_Performer <: AbstractProcedure_Performer
    actor::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    function_fhir::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onBehalfOf::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Procedure_Performer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Procedure_Performer} = true



Base.@kwdef mutable struct Procedure_FocalDevice <: AbstractProcedure_FocalDevice
    action::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    manipulated::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: Procedure_FocalDevice} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Procedure_FocalDevice} = true



Base.@kwdef mutable struct Provenance <: AbstractProvenance
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurredDateTime::Union{AbstractElement, Nothing} = nothing
    _policy::Vector{AbstractElement} = AbstractElement[]
    _recorded::Union{AbstractElement, Nothing} = nothing
    activity::Union{AbstractCodeableConcept, Nothing} = nothing
    agent::Vector{AbstractProvenance_Agent} = AbstractProvenance_Agent[]
    contained::Vector{ResourceList} = ResourceList[]
    entity::Vector{AbstractProvenance_Entity} = AbstractProvenance_Entity[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    occurredDateTime::Union{String, Nothing} = nothing
    occurredPeriod::Union{AbstractPeriod, Nothing} = nothing
    policy::Vector{String} = String[]
    reason::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    recorded::Union{ZonedDateTime, Nothing} = nothing
    resourceType::String = "Provenance"
    signature::Vector{AbstractSignature} = AbstractSignature[]
    target::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Provenance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Provenance} = true



Base.@kwdef mutable struct Provenance_Agent <: AbstractProvenance_Agent
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onBehalfOf::Union{AbstractReference, Nothing} = nothing
    role::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    who::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Provenance_Agent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Provenance_Agent} = true



Base.@kwdef mutable struct Provenance_Entity <: AbstractProvenance_Entity
    _role::Union{AbstractElement, Nothing} = nothing
    agent::Vector{AbstractProvenance_Agent} = AbstractProvenance_Agent[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    role::Union{String, Nothing} = nothing
    what::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Provenance_Entity} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Provenance_Entity} = true



Base.@kwdef mutable struct Questionnaire <: AbstractQuestionnaire
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subjectType::Vector{AbstractElement} = AbstractElement[]
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    code::Vector{AbstractCoding} = AbstractCoding[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    derivedFrom::Vector{String} = String[]
    description::Union{String, Nothing} = nothing
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    item::Vector{AbstractQuestionnaire_Item} = AbstractQuestionnaire_Item[]
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "Questionnaire"
    status::Union{String, Nothing} = nothing
    subjectType::Vector{String} = String[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Questionnaire} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Questionnaire} = true



Base.@kwdef mutable struct Questionnaire_Item <: AbstractQuestionnaire_Item
    _definition::Union{AbstractElement, Nothing} = nothing
    _enableBehavior::Union{AbstractElement, Nothing} = nothing
    _linkId::Union{AbstractElement, Nothing} = nothing
    _maxLength::Union{AbstractElement, Nothing} = nothing
    _prefix::Union{AbstractElement, Nothing} = nothing
    _readOnly::Union{AbstractElement, Nothing} = nothing
    _repeats::Union{AbstractElement, Nothing} = nothing
    _required::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    answerOption::Vector{AbstractQuestionnaire_AnswerOption} = AbstractQuestionnaire_AnswerOption[]
    answerValueSet::Union{String, Nothing} = nothing
    code::Vector{AbstractCoding} = AbstractCoding[]
    definition::Union{String, Nothing} = nothing
    enableBehavior::Union{String, Nothing} = nothing
    enableWhen::Vector{AbstractQuestionnaire_EnableWhen} = AbstractQuestionnaire_EnableWhen[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    initial::Vector{AbstractQuestionnaire_Initial} = AbstractQuestionnaire_Initial[]
    item::Vector{AbstractQuestionnaire_Item} = AbstractQuestionnaire_Item[]
    linkId::Union{String, Nothing} = nothing
    maxLength::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    prefix::Union{String, Nothing} = nothing
    readOnly::Union{Bool, Nothing} = nothing
    repeats::Union{Bool, Nothing} = nothing
    required::Union{Bool, Nothing} = nothing
    text::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Questionnaire_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Questionnaire_Item} = true



Base.@kwdef mutable struct Questionnaire_EnableWhen <: AbstractQuestionnaire_EnableWhen
    _answerBoolean::Union{AbstractElement, Nothing} = nothing
    _answerDate::Union{AbstractElement, Nothing} = nothing
    _answerDateTime::Union{AbstractElement, Nothing} = nothing
    _answerDecimal::Union{AbstractElement, Nothing} = nothing
    _answerInteger::Union{AbstractElement, Nothing} = nothing
    _answerString::Union{AbstractElement, Nothing} = nothing
    _answerTime::Union{AbstractElement, Nothing} = nothing
    _operator::Union{AbstractElement, Nothing} = nothing
    _question::Union{AbstractElement, Nothing} = nothing
    answerBoolean::Union{Bool, Nothing} = nothing
    answerCoding::Union{AbstractCoding, Nothing} = nothing
    answerDate::Union{String, Nothing} = nothing
    answerDateTime::Union{String, Nothing} = nothing
    answerDecimal::Union{FHIRNumber, Nothing} = nothing
    answerInteger::Union{FHIRInt32, Nothing} = nothing
    answerQuantity::Union{AbstractQuantity, Nothing} = nothing
    answerReference::Union{AbstractReference, Nothing} = nothing
    answerString::Union{String, Nothing} = nothing
    answerTime::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operator::Union{String, Nothing} = nothing
    question::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Questionnaire_EnableWhen} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Questionnaire_EnableWhen} = true



Base.@kwdef mutable struct Questionnaire_AnswerOption <: AbstractQuestionnaire_AnswerOption
    _initialSelected::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    initialSelected::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Questionnaire_AnswerOption} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Questionnaire_AnswerOption} = true



Base.@kwdef mutable struct Questionnaire_Initial <: AbstractQuestionnaire_Initial
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Questionnaire_Initial} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Questionnaire_Initial} = true



Base.@kwdef mutable struct QuestionnaireResponse <: AbstractQuestionnaireResponse
    _authored::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    author::Union{AbstractReference, Nothing} = nothing
    authored::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    item::Vector{AbstractQuestionnaireResponse_Item} = AbstractQuestionnaireResponse_Item[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    questionnaire::Union{String, Nothing} = nothing
    resourceType::String = "QuestionnaireResponse"
    source::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: QuestionnaireResponse} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: QuestionnaireResponse} = true



Base.@kwdef mutable struct QuestionnaireResponse_Item <: AbstractQuestionnaireResponse_Item
    _definition::Union{AbstractElement, Nothing} = nothing
    _linkId::Union{AbstractElement, Nothing} = nothing
    _text::Union{AbstractElement, Nothing} = nothing
    answer::Vector{AbstractQuestionnaireResponse_Answer} = AbstractQuestionnaireResponse_Answer[]
    definition::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    item::Vector{AbstractQuestionnaireResponse_Item} = AbstractQuestionnaireResponse_Item[]
    linkId::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    text::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: QuestionnaireResponse_Item} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: QuestionnaireResponse_Item} = true



Base.@kwdef mutable struct QuestionnaireResponse_Answer <: AbstractQuestionnaireResponse_Answer
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    item::Vector{AbstractQuestionnaireResponse_Item} = AbstractQuestionnaireResponse_Item[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: QuestionnaireResponse_Answer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: QuestionnaireResponse_Answer} = true



Base.@kwdef mutable struct RelatedPerson <: AbstractRelatedPerson
    _active::Union{AbstractElement, Nothing} = nothing
    _birthDate::Union{AbstractElement, Nothing} = nothing
    _gender::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    address::Vector{AbstractAddress} = AbstractAddress[]
    birthDate::Union{Date, Nothing} = nothing
    communication::Vector{AbstractRelatedPerson_Communication} = AbstractRelatedPerson_Communication[]
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gender::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Vector{AbstractHumanName} = AbstractHumanName[]
    patient::Union{AbstractReference, Nothing} = nothing
    period::Union{AbstractPeriod, Nothing} = nothing
    photo::Vector{AbstractAttachment} = AbstractAttachment[]
    relationship::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    resourceType::String = "RelatedPerson"
    telecom::Vector{AbstractContactPoint} = AbstractContactPoint[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RelatedPerson} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RelatedPerson} = true



Base.@kwdef mutable struct RelatedPerson_Communication <: AbstractRelatedPerson_Communication
    _preferred::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    preferred::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RelatedPerson_Communication} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RelatedPerson_Communication} = true



Base.@kwdef mutable struct RequestGroup <: AbstractRequestGroup
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesCanonical::Vector{AbstractElement} = AbstractElement[]
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractRequestGroup_Action} = AbstractRequestGroup_Action[]
    author::Union{AbstractReference, Nothing} = nothing
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    priority::Union{String, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    replaces::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "RequestGroup"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RequestGroup} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RequestGroup} = true



Base.@kwdef mutable struct RequestGroup_Action <: AbstractRequestGroup_Action
    _cardinalityBehavior::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _groupingBehavior::Union{AbstractElement, Nothing} = nothing
    _precheckBehavior::Union{AbstractElement, Nothing} = nothing
    _prefix::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _requiredBehavior::Union{AbstractElement, Nothing} = nothing
    _selectionBehavior::Union{AbstractElement, Nothing} = nothing
    _textEquivalent::Union{AbstractElement, Nothing} = nothing
    _timingDateTime::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractRequestGroup_Action} = AbstractRequestGroup_Action[]
    cardinalityBehavior::Union{String, Nothing} = nothing
    code::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    condition::Vector{AbstractRequestGroup_Condition} = AbstractRequestGroup_Condition[]
    description::Union{String, Nothing} = nothing
    documentation::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    groupingBehavior::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    participant::Vector{AbstractReference} = AbstractReference[]
    precheckBehavior::Union{String, Nothing} = nothing
    prefix::Union{String, Nothing} = nothing
    priority::Union{String, Nothing} = nothing
    relatedAction::Vector{AbstractRequestGroup_RelatedAction} = AbstractRequestGroup_RelatedAction[]
    requiredBehavior::Union{String, Nothing} = nothing
    resource::Union{AbstractReference, Nothing} = nothing
    selectionBehavior::Union{String, Nothing} = nothing
    textEquivalent::Union{String, Nothing} = nothing
    timingAge::Union{AbstractAge, Nothing} = nothing
    timingDateTime::Union{String, Nothing} = nothing
    timingDuration::Union{AbstractDuration, Nothing} = nothing
    timingPeriod::Union{AbstractPeriod, Nothing} = nothing
    timingRange::Union{AbstractRange, Nothing} = nothing
    timingTiming::Union{AbstractTiming, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RequestGroup_Action} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RequestGroup_Action} = true



Base.@kwdef mutable struct RequestGroup_Condition <: AbstractRequestGroup_Condition
    _kind::Union{AbstractElement, Nothing} = nothing
    expression::Union{AbstractExpression, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    kind::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: RequestGroup_Condition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RequestGroup_Condition} = true



Base.@kwdef mutable struct RequestGroup_RelatedAction <: AbstractRequestGroup_RelatedAction
    _actionId::Union{AbstractElement, Nothing} = nothing
    _relationship::Union{AbstractElement, Nothing} = nothing
    actionId::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    offsetDuration::Union{AbstractDuration, Nothing} = nothing
    offsetRange::Union{AbstractRange, Nothing} = nothing
    relationship::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RequestGroup_RelatedAction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RequestGroup_RelatedAction} = true



Base.@kwdef mutable struct ResearchDefinition <: AbstractResearchDefinition
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _comment::Vector{AbstractElement} = AbstractElement[]
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _shortTitle::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    comment::Vector{String} = String[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    exposure::Union{AbstractReference, Nothing} = nothing
    exposureAlternative::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    library::Vector{String} = String[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    outcome::Union{AbstractReference, Nothing} = nothing
    population::Union{AbstractReference, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "ResearchDefinition"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    shortTitle::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchDefinition} = true



Base.@kwdef mutable struct ResearchElementDefinition <: AbstractResearchElementDefinition
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _comment::Vector{AbstractElement} = AbstractElement[]
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _shortTitle::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _subtitle::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _usage::Union{AbstractElement, Nothing} = nothing
    _variableType::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    characteristic::Vector{AbstractResearchElementDefinition_Characteristic} = AbstractResearchElementDefinition_Characteristic[]
    comment::Vector{String} = String[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    library::Vector{String} = String[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "ResearchElementDefinition"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    shortTitle::Union{String, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    subjectCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    subjectReference::Union{AbstractReference, Nothing} = nothing
    subtitle::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    usage::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    variableType::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchElementDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchElementDefinition} = true



Base.@kwdef mutable struct ResearchElementDefinition_Characteristic <: AbstractResearchElementDefinition_Characteristic
    _definitionCanonical::Union{AbstractElement, Nothing} = nothing
    _exclude::Union{AbstractElement, Nothing} = nothing
    _participantEffectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _participantEffectiveDescription::Union{AbstractElement, Nothing} = nothing
    _participantEffectiveGroupMeasure::Union{AbstractElement, Nothing} = nothing
    _studyEffectiveDateTime::Union{AbstractElement, Nothing} = nothing
    _studyEffectiveDescription::Union{AbstractElement, Nothing} = nothing
    _studyEffectiveGroupMeasure::Union{AbstractElement, Nothing} = nothing
    definitionCanonical::Union{String, Nothing} = nothing
    definitionCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    definitionDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    definitionExpression::Union{AbstractExpression, Nothing} = nothing
    exclude::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    participantEffectiveDateTime::Union{String, Nothing} = nothing
    participantEffectiveDescription::Union{String, Nothing} = nothing
    participantEffectiveDuration::Union{AbstractDuration, Nothing} = nothing
    participantEffectiveGroupMeasure::Union{String, Nothing} = nothing
    participantEffectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    participantEffectiveTimeFromStart::Union{AbstractDuration, Nothing} = nothing
    participantEffectiveTiming::Union{AbstractTiming, Nothing} = nothing
    studyEffectiveDateTime::Union{String, Nothing} = nothing
    studyEffectiveDescription::Union{String, Nothing} = nothing
    studyEffectiveDuration::Union{AbstractDuration, Nothing} = nothing
    studyEffectiveGroupMeasure::Union{String, Nothing} = nothing
    studyEffectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    studyEffectiveTimeFromStart::Union{AbstractDuration, Nothing} = nothing
    studyEffectiveTiming::Union{AbstractTiming, Nothing} = nothing
    unitOfMeasure::Union{AbstractCodeableConcept, Nothing} = nothing
    usageContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchElementDefinition_Characteristic} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchElementDefinition_Characteristic} = true



Base.@kwdef mutable struct ResearchStudy <: AbstractResearchStudy
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    arm::Vector{AbstractResearchStudy_Arm} = AbstractResearchStudy_Arm[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    condition::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    enrollment::Vector{AbstractReference} = AbstractReference[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focus::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    keyword::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    location::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    objective::Vector{AbstractResearchStudy_Objective} = AbstractResearchStudy_Objective[]
    partOf::Vector{AbstractReference} = AbstractReference[]
    period::Union{AbstractPeriod, Nothing} = nothing
    phase::Union{AbstractCodeableConcept, Nothing} = nothing
    primaryPurposeType::Union{AbstractCodeableConcept, Nothing} = nothing
    principalInvestigator::Union{AbstractReference, Nothing} = nothing
    protocol::Vector{AbstractReference} = AbstractReference[]
    reasonStopped::Union{AbstractCodeableConcept, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "ResearchStudy"
    site::Vector{AbstractReference} = AbstractReference[]
    sponsor::Union{AbstractReference, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchStudy} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchStudy} = true



Base.@kwdef mutable struct ResearchStudy_Arm <: AbstractResearchStudy_Arm
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchStudy_Arm} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchStudy_Arm} = true



Base.@kwdef mutable struct ResearchStudy_Objective <: AbstractResearchStudy_Objective
    _name::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchStudy_Objective} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchStudy_Objective} = true



Base.@kwdef mutable struct ResearchSubject <: AbstractResearchSubject
    _actualArm::Union{AbstractElement, Nothing} = nothing
    _assignedArm::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    actualArm::Union{String, Nothing} = nothing
    assignedArm::Union{String, Nothing} = nothing
    consent::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    individual::Union{AbstractReference, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    resourceType::String = "ResearchSubject"
    status::Union{String, Nothing} = nothing
    study::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ResearchSubject} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ResearchSubject} = true



Base.@kwdef mutable struct RiskAssessment <: AbstractRiskAssessment
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _mitigation::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    basedOn::Union{AbstractReference, Nothing} = nothing
    basis::Vector{AbstractReference} = AbstractReference[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    condition::Union{AbstractReference, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    mitigation::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    parent::Union{AbstractReference, Nothing} = nothing
    performer::Union{AbstractReference, Nothing} = nothing
    prediction::Vector{AbstractRiskAssessment_Prediction} = AbstractRiskAssessment_Prediction[]
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "RiskAssessment"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskAssessment} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskAssessment} = true



Base.@kwdef mutable struct RiskAssessment_Prediction <: AbstractRiskAssessment_Prediction
    _probabilityDecimal::Union{AbstractElement, Nothing} = nothing
    _rationale::Union{AbstractElement, Nothing} = nothing
    _relativeRisk::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    outcome::Union{AbstractCodeableConcept, Nothing} = nothing
    probabilityDecimal::Union{FHIRNumber, Nothing} = nothing
    probabilityRange::Union{AbstractRange, Nothing} = nothing
    qualitativeRisk::Union{AbstractCodeableConcept, Nothing} = nothing
    rationale::Union{String, Nothing} = nothing
    relativeRisk::Union{FHIRNumber, Nothing} = nothing
    whenPeriod::Union{AbstractPeriod, Nothing} = nothing
    whenRange::Union{AbstractRange, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskAssessment_Prediction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskAssessment_Prediction} = true



Base.@kwdef mutable struct RiskEvidenceSynthesis <: AbstractRiskEvidenceSynthesis
    _approvalDate::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastReviewDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    approvalDate::Union{Date, Nothing} = nothing
    author::Vector{AbstractContactDetail} = AbstractContactDetail[]
    certainty::Vector{AbstractRiskEvidenceSynthesis_Certainty} = AbstractRiskEvidenceSynthesis_Certainty[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    editor::Vector{AbstractContactDetail} = AbstractContactDetail[]
    effectivePeriod::Union{AbstractPeriod, Nothing} = nothing
    endorser::Vector{AbstractContactDetail} = AbstractContactDetail[]
    exposure::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    lastReviewDate::Union{Date, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    outcome::Union{AbstractReference, Nothing} = nothing
    population::Union{AbstractReference, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    relatedArtifact::Vector{AbstractRelatedArtifact} = AbstractRelatedArtifact[]
    resourceType::String = "RiskEvidenceSynthesis"
    reviewer::Vector{AbstractContactDetail} = AbstractContactDetail[]
    riskEstimate::Union{AbstractRiskEvidenceSynthesis_RiskEstimate, Nothing} = nothing
    sampleSize::Union{AbstractRiskEvidenceSynthesis_SampleSize, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    studyType::Union{AbstractCodeableConcept, Nothing} = nothing
    synthesisType::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    topic::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskEvidenceSynthesis} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskEvidenceSynthesis} = true



Base.@kwdef mutable struct RiskEvidenceSynthesis_SampleSize <: AbstractRiskEvidenceSynthesis_SampleSize
    _description::Union{AbstractElement, Nothing} = nothing
    _numberOfParticipants::Union{AbstractElement, Nothing} = nothing
    _numberOfStudies::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numberOfParticipants::Union{SafeInt32, Nothing} = nothing
    numberOfStudies::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskEvidenceSynthesis_SampleSize} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskEvidenceSynthesis_SampleSize} = true



Base.@kwdef mutable struct RiskEvidenceSynthesis_RiskEstimate <: AbstractRiskEvidenceSynthesis_RiskEstimate
    _denominatorCount::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _numeratorCount::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    denominatorCount::Union{SafeInt32, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numeratorCount::Union{SafeInt32, Nothing} = nothing
    precisionEstimate::Vector{AbstractRiskEvidenceSynthesis_PrecisionEstimate} = AbstractRiskEvidenceSynthesis_PrecisionEstimate[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    unitOfMeasure::Union{AbstractCodeableConcept, Nothing} = nothing
    value::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskEvidenceSynthesis_RiskEstimate} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskEvidenceSynthesis_RiskEstimate} = true



Base.@kwdef mutable struct RiskEvidenceSynthesis_PrecisionEstimate <: AbstractRiskEvidenceSynthesis_PrecisionEstimate
    _from::Union{AbstractElement, Nothing} = nothing
    _level::Union{AbstractElement, Nothing} = nothing
    _to::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    from::Union{FHIRNumber, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    level::Union{FHIRNumber, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    to::Union{FHIRNumber, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskEvidenceSynthesis_PrecisionEstimate} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskEvidenceSynthesis_PrecisionEstimate} = true



Base.@kwdef mutable struct RiskEvidenceSynthesis_Certainty <: AbstractRiskEvidenceSynthesis_Certainty
    certaintySubcomponent::Vector{AbstractRiskEvidenceSynthesis_CertaintySubcomponent} = AbstractRiskEvidenceSynthesis_CertaintySubcomponent[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    rating::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskEvidenceSynthesis_Certainty} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskEvidenceSynthesis_Certainty} = true



Base.@kwdef mutable struct RiskEvidenceSynthesis_CertaintySubcomponent <: AbstractRiskEvidenceSynthesis_CertaintySubcomponent
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    rating::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: RiskEvidenceSynthesis_CertaintySubcomponent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: RiskEvidenceSynthesis_CertaintySubcomponent} = true



Base.@kwdef mutable struct Schedule <: AbstractSchedule
    _active::Union{AbstractElement, Nothing} = nothing
    _comment::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    active::Union{Bool, Nothing} = nothing
    actor::Vector{AbstractReference} = AbstractReference[]
    comment::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    planningHorizon::Union{AbstractPeriod, Nothing} = nothing
    resourceType::String = "Schedule"
    serviceCategory::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    serviceType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    specialty::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Schedule} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Schedule} = true



Base.@kwdef mutable struct SearchParameter <: AbstractSearchParameter
    _base::Vector{AbstractElement} = AbstractElement[]
    _chain::Vector{AbstractElement} = AbstractElement[]
    _code::Union{AbstractElement, Nothing} = nothing
    _comparator::Vector{AbstractElement} = AbstractElement[]
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _expression::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _modifier::Vector{AbstractElement} = AbstractElement[]
    _multipleAnd::Union{AbstractElement, Nothing} = nothing
    _multipleOr::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _target::Vector{AbstractElement} = AbstractElement[]
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    _xpath::Union{AbstractElement, Nothing} = nothing
    _xpathUsage::Union{AbstractElement, Nothing} = nothing
    base::Vector{String} = String[]
    chain::Vector{String} = String[]
    code::Union{String, Nothing} = nothing
    comparator::Vector{String} = String[]
    component::Vector{AbstractSearchParameter_Component} = AbstractSearchParameter_Component[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    date::Union{FHIRDateTime, Nothing} = nothing
    derivedFrom::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifier::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    multipleAnd::Union{Bool, Nothing} = nothing
    multipleOr::Union{Bool, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "SearchParameter"
    status::Union{String, Nothing} = nothing
    target::Vector{String} = String[]
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
    xpath::Union{String, Nothing} = nothing
    xpathUsage::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SearchParameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SearchParameter} = true



Base.@kwdef mutable struct SearchParameter_Component <: AbstractSearchParameter_Component
    _expression::Union{AbstractElement, Nothing} = nothing
    definition::Union{String, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SearchParameter_Component} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SearchParameter_Component} = true



Base.@kwdef mutable struct ServiceRequest <: AbstractServiceRequest
    _asNeededBoolean::Union{AbstractElement, Nothing} = nothing
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _doNotPerform::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Vector{AbstractElement} = AbstractElement[]
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _patientInstruction::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    asNeededBoolean::Union{Bool, Nothing} = nothing
    asNeededCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    bodySite::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    doNotPerform::Union{Bool, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    instantiatesCanonical::Vector{String} = String[]
    instantiatesUri::Vector{String} = String[]
    insurance::Vector{AbstractReference} = AbstractReference[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    locationCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    locationReference::Vector{AbstractReference} = AbstractReference[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    occurrenceTiming::Union{AbstractTiming, Nothing} = nothing
    orderDetail::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    patientInstruction::Union{String, Nothing} = nothing
    performer::Vector{AbstractReference} = AbstractReference[]
    performerType::Union{AbstractCodeableConcept, Nothing} = nothing
    priority::Union{String, Nothing} = nothing
    quantityQuantity::Union{AbstractQuantity, Nothing} = nothing
    quantityRange::Union{AbstractRange, Nothing} = nothing
    quantityRatio::Union{AbstractRatio, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    relevantHistory::Vector{AbstractReference} = AbstractReference[]
    replaces::Vector{AbstractReference} = AbstractReference[]
    requester::Union{AbstractReference, Nothing} = nothing
    requisition::Union{AbstractIdentifier, Nothing} = nothing
    resourceType::String = "ServiceRequest"
    specimen::Vector{AbstractReference} = AbstractReference[]
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    supportingInfo::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ServiceRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ServiceRequest} = true



Base.@kwdef mutable struct Slot <: AbstractSlot
    _comment::Union{AbstractElement, Nothing} = nothing
    _end::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _overbooked::Union{AbstractElement, Nothing} = nothing
    _start::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    appointmentType::Union{AbstractCodeableConcept, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    end_fhir::Union{ZonedDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    overbooked::Union{Bool, Nothing} = nothing
    resourceType::String = "Slot"
    schedule::Union{AbstractReference, Nothing} = nothing
    serviceCategory::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    serviceType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    specialty::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    start::Union{ZonedDateTime, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Slot} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Slot} = true



Base.@kwdef mutable struct Specimen <: AbstractSpecimen
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _receivedTime::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    accessionIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    collection::Union{AbstractSpecimen_Collection, Nothing} = nothing
    condition::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    container::Vector{AbstractSpecimen_Container} = AbstractSpecimen_Container[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    parent::Vector{AbstractReference} = AbstractReference[]
    processing::Vector{AbstractSpecimen_Processing} = AbstractSpecimen_Processing[]
    receivedTime::Union{FHIRDateTime, Nothing} = nothing
    request::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "Specimen"
    status::Union{String, Nothing} = nothing
    subject::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Specimen} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Specimen} = true



Base.@kwdef mutable struct Specimen_Collection <: AbstractSpecimen_Collection
    _collectedDateTime::Union{AbstractElement, Nothing} = nothing
    bodySite::Union{AbstractCodeableConcept, Nothing} = nothing
    collectedDateTime::Union{String, Nothing} = nothing
    collectedPeriod::Union{AbstractPeriod, Nothing} = nothing
    collector::Union{AbstractReference, Nothing} = nothing
    duration::Union{AbstractDuration, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fastingStatusCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    fastingStatusDuration::Union{AbstractDuration, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Specimen_Collection} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Specimen_Collection} = true



Base.@kwdef mutable struct Specimen_Processing <: AbstractSpecimen_Processing
    _description::Union{AbstractElement, Nothing} = nothing
    _timeDateTime::Union{AbstractElement, Nothing} = nothing
    additive::Vector{AbstractReference} = AbstractReference[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    procedure::Union{AbstractCodeableConcept, Nothing} = nothing
    timeDateTime::Union{String, Nothing} = nothing
    timePeriod::Union{AbstractPeriod, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Specimen_Processing} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Specimen_Processing} = true



Base.@kwdef mutable struct Specimen_Container <: AbstractSpecimen_Container
    _description::Union{AbstractElement, Nothing} = nothing
    additiveCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    additiveReference::Union{AbstractReference, Nothing} = nothing
    capacity::Union{AbstractQuantity, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    specimenQuantity::Union{AbstractQuantity, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Specimen_Container} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Specimen_Container} = true



Base.@kwdef mutable struct SpecimenDefinition <: AbstractSpecimenDefinition
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _timeAspect::Union{AbstractElement, Nothing} = nothing
    collection::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patientPreparation::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    resourceType::String = "SpecimenDefinition"
    text::Union{AbstractNarrative, Nothing} = nothing
    timeAspect::Union{String, Nothing} = nothing
    typeCollected::Union{AbstractCodeableConcept, Nothing} = nothing
    typeTested::Vector{AbstractSpecimenDefinition_TypeTested} = AbstractSpecimenDefinition_TypeTested[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SpecimenDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SpecimenDefinition} = true



Base.@kwdef mutable struct SpecimenDefinition_TypeTested <: AbstractSpecimenDefinition_TypeTested
    _isDerived::Union{AbstractElement, Nothing} = nothing
    _preference::Union{AbstractElement, Nothing} = nothing
    _requirement::Union{AbstractElement, Nothing} = nothing
    container::Union{AbstractSpecimenDefinition_Container, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    handling::Vector{AbstractSpecimenDefinition_Handling} = AbstractSpecimenDefinition_Handling[]
    id::Union{String, Nothing} = nothing
    isDerived::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    preference::Union{String, Nothing} = nothing
    rejectionCriterion::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    requirement::Union{String, Nothing} = nothing
    retentionTime::Union{AbstractDuration, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SpecimenDefinition_TypeTested} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SpecimenDefinition_TypeTested} = true



Base.@kwdef mutable struct SpecimenDefinition_Container <: AbstractSpecimenDefinition_Container
    _description::Union{AbstractElement, Nothing} = nothing
    _minimumVolumeString::Union{AbstractElement, Nothing} = nothing
    _preparation::Union{AbstractElement, Nothing} = nothing
    additive::Vector{AbstractSpecimenDefinition_Additive} = AbstractSpecimenDefinition_Additive[]
    cap::Union{AbstractCodeableConcept, Nothing} = nothing
    capacity::Union{AbstractQuantity, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    material::Union{AbstractCodeableConcept, Nothing} = nothing
    minimumVolumeQuantity::Union{AbstractQuantity, Nothing} = nothing
    minimumVolumeString::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    preparation::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SpecimenDefinition_Container} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SpecimenDefinition_Container} = true



Base.@kwdef mutable struct SpecimenDefinition_Additive <: AbstractSpecimenDefinition_Additive
    additiveCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    additiveReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SpecimenDefinition_Additive} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SpecimenDefinition_Additive} = true



Base.@kwdef mutable struct SpecimenDefinition_Handling <: AbstractSpecimenDefinition_Handling
    _instruction::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    instruction::Union{String, Nothing} = nothing
    maxDuration::Union{AbstractDuration, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    temperatureQualifier::Union{AbstractCodeableConcept, Nothing} = nothing
    temperatureRange::Union{AbstractRange, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SpecimenDefinition_Handling} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SpecimenDefinition_Handling} = true



Base.@kwdef mutable struct StructureDefinition <: AbstractStructureDefinition
    _abstract::Union{AbstractElement, Nothing} = nothing
    _contextInvariant::Vector{AbstractElement} = AbstractElement[]
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _derivation::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _fhirVersion::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _kind::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    abstract::Union{Bool, Nothing} = nothing
    baseDefinition::Union{String, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    context::Vector{AbstractStructureDefinition_Context} = AbstractStructureDefinition_Context[]
    contextInvariant::Vector{String} = String[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    derivation::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    differential::Union{AbstractStructureDefinition_Differential, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fhirVersion::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    keyword::Vector{AbstractCoding} = AbstractCoding[]
    kind::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    mapping::Vector{AbstractStructureDefinition_Mapping} = AbstractStructureDefinition_Mapping[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "StructureDefinition"
    snapshot::Union{AbstractStructureDefinition_Snapshot, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureDefinition} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureDefinition} = true



Base.@kwdef mutable struct StructureDefinition_Mapping <: AbstractStructureDefinition_Mapping
    _comment::Union{AbstractElement, Nothing} = nothing
    _identity::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _uri::Union{AbstractElement, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identity::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    uri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureDefinition_Mapping} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureDefinition_Mapping} = true



Base.@kwdef mutable struct StructureDefinition_Context <: AbstractStructureDefinition_Context
    _expression::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureDefinition_Context} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureDefinition_Context} = true



Base.@kwdef mutable struct StructureDefinition_Snapshot <: AbstractStructureDefinition_Snapshot
    element::Vector{AbstractElementDefinition} = AbstractElementDefinition[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureDefinition_Snapshot} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureDefinition_Snapshot} = true



Base.@kwdef mutable struct StructureDefinition_Differential <: AbstractStructureDefinition_Differential
    element::Vector{AbstractElementDefinition} = AbstractElementDefinition[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureDefinition_Differential} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureDefinition_Differential} = true



Base.@kwdef mutable struct StructureMap <: AbstractStructureMap
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    group::Vector{AbstractStructureMap_Group} = AbstractStructureMap_Group[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    import_fhir::Vector{String} = String[]
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "StructureMap"
    status::Union{String, Nothing} = nothing
    structure::Vector{AbstractStructureMap_Structure} = AbstractStructureMap_Structure[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap} = true



Base.@kwdef mutable struct StructureMap_Structure <: AbstractStructureMap_Structure
    _alias::Union{AbstractElement, Nothing} = nothing
    _documentation::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    alias::Union{String, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Structure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Structure} = true



Base.@kwdef mutable struct StructureMap_Group <: AbstractStructureMap_Group
    _documentation::Union{AbstractElement, Nothing} = nothing
    _extends::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _typeMode::Union{AbstractElement, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extends::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    input::Vector{AbstractStructureMap_Input} = AbstractStructureMap_Input[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    rule::Vector{AbstractStructureMap_Rule} = AbstractStructureMap_Rule[]
    typeMode::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Group} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Group} = true



Base.@kwdef mutable struct StructureMap_Input <: AbstractStructureMap_Input
    _documentation::Union{AbstractElement, Nothing} = nothing
    _mode::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    mode::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Input} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Input} = true



Base.@kwdef mutable struct StructureMap_Rule <: AbstractStructureMap_Rule
    _documentation::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    dependent::Vector{AbstractStructureMap_Dependent} = AbstractStructureMap_Dependent[]
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    rule::Vector{AbstractStructureMap_Rule} = AbstractStructureMap_Rule[]
    source::Vector{AbstractStructureMap_Source} = AbstractStructureMap_Source[]
    target::Vector{AbstractStructureMap_Target} = AbstractStructureMap_Target[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Rule} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Rule} = true



Base.@kwdef mutable struct StructureMap_Source <: AbstractStructureMap_Source
    _check::Union{AbstractElement, Nothing} = nothing
    _condition::Union{AbstractElement, Nothing} = nothing
    _context::Union{AbstractElement, Nothing} = nothing
    _defaultValueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _defaultValueBoolean::Union{AbstractElement, Nothing} = nothing
    _defaultValueCanonical::Union{AbstractElement, Nothing} = nothing
    _defaultValueCode::Union{AbstractElement, Nothing} = nothing
    _defaultValueDate::Union{AbstractElement, Nothing} = nothing
    _defaultValueDateTime::Union{AbstractElement, Nothing} = nothing
    _defaultValueDecimal::Union{AbstractElement, Nothing} = nothing
    _defaultValueId::Union{AbstractElement, Nothing} = nothing
    _defaultValueInstant::Union{AbstractElement, Nothing} = nothing
    _defaultValueInteger::Union{AbstractElement, Nothing} = nothing
    _defaultValueMarkdown::Union{AbstractElement, Nothing} = nothing
    _defaultValueOid::Union{AbstractElement, Nothing} = nothing
    _defaultValuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _defaultValueString::Union{AbstractElement, Nothing} = nothing
    _defaultValueTime::Union{AbstractElement, Nothing} = nothing
    _defaultValueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _defaultValueUri::Union{AbstractElement, Nothing} = nothing
    _defaultValueUrl::Union{AbstractElement, Nothing} = nothing
    _defaultValueUuid::Union{AbstractElement, Nothing} = nothing
    _element::Union{AbstractElement, Nothing} = nothing
    _listMode::Union{AbstractElement, Nothing} = nothing
    _logMessage::Union{AbstractElement, Nothing} = nothing
    _max::Union{AbstractElement, Nothing} = nothing
    _min::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _variable::Union{AbstractElement, Nothing} = nothing
    check::Union{String, Nothing} = nothing
    condition::Union{String, Nothing} = nothing
    context::Union{String, Nothing} = nothing
    defaultValueAddress::Union{AbstractAddress, Nothing} = nothing
    defaultValueAge::Union{AbstractAge, Nothing} = nothing
    defaultValueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    defaultValueAttachment::Union{AbstractAttachment, Nothing} = nothing
    defaultValueBase64Binary::Union{String, Nothing} = nothing
    defaultValueBoolean::Union{Bool, Nothing} = nothing
    defaultValueCanonical::Union{String, Nothing} = nothing
    defaultValueCode::Union{String, Nothing} = nothing
    defaultValueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    defaultValueCoding::Union{AbstractCoding, Nothing} = nothing
    defaultValueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    defaultValueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    defaultValueContributor::Union{AbstractContributor, Nothing} = nothing
    defaultValueCount::Union{AbstractCount, Nothing} = nothing
    defaultValueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    defaultValueDate::Union{String, Nothing} = nothing
    defaultValueDateTime::Union{String, Nothing} = nothing
    defaultValueDecimal::Union{FHIRNumber, Nothing} = nothing
    defaultValueDistance::Union{AbstractDistance, Nothing} = nothing
    defaultValueDosage::Union{AbstractDosage, Nothing} = nothing
    defaultValueDuration::Union{AbstractDuration, Nothing} = nothing
    defaultValueExpression::Union{AbstractExpression, Nothing} = nothing
    defaultValueHumanName::Union{AbstractHumanName, Nothing} = nothing
    defaultValueId::Union{String, Nothing} = nothing
    defaultValueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    defaultValueInstant::Union{String, Nothing} = nothing
    defaultValueInteger::Union{FHIRInt32, Nothing} = nothing
    defaultValueMarkdown::Union{String, Nothing} = nothing
    defaultValueMeta::Union{AbstractMeta, Nothing} = nothing
    defaultValueMoney::Union{AbstractMoney, Nothing} = nothing
    defaultValueOid::Union{String, Nothing} = nothing
    defaultValueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    defaultValuePeriod::Union{AbstractPeriod, Nothing} = nothing
    defaultValuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    defaultValueQuantity::Union{AbstractQuantity, Nothing} = nothing
    defaultValueRange::Union{AbstractRange, Nothing} = nothing
    defaultValueRatio::Union{AbstractRatio, Nothing} = nothing
    defaultValueReference::Union{AbstractReference, Nothing} = nothing
    defaultValueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    defaultValueSampledData::Union{AbstractSampledData, Nothing} = nothing
    defaultValueSignature::Union{AbstractSignature, Nothing} = nothing
    defaultValueString::Union{String, Nothing} = nothing
    defaultValueTime::Union{String, Nothing} = nothing
    defaultValueTiming::Union{AbstractTiming, Nothing} = nothing
    defaultValueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    defaultValueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    defaultValueUri::Union{String, Nothing} = nothing
    defaultValueUrl::Union{String, Nothing} = nothing
    defaultValueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    defaultValueUuid::Union{String, Nothing} = nothing
    element::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    listMode::Union{String, Nothing} = nothing
    logMessage::Union{String, Nothing} = nothing
    max::Union{String, Nothing} = nothing
    min::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
    variable::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Source} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Source} = true



Base.@kwdef mutable struct StructureMap_Target <: AbstractStructureMap_Target
    _context::Union{AbstractElement, Nothing} = nothing
    _contextType::Union{AbstractElement, Nothing} = nothing
    _element::Union{AbstractElement, Nothing} = nothing
    _listMode::Vector{AbstractElement} = AbstractElement[]
    _listRuleId::Union{AbstractElement, Nothing} = nothing
    _transform::Union{AbstractElement, Nothing} = nothing
    _variable::Union{AbstractElement, Nothing} = nothing
    context::Union{String, Nothing} = nothing
    contextType::Union{String, Nothing} = nothing
    element::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    listMode::Vector{String} = String[]
    listRuleId::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    parameter::Vector{AbstractStructureMap_Parameter} = AbstractStructureMap_Parameter[]
    transform::Union{String, Nothing} = nothing
    variable::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Target} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Target} = true



Base.@kwdef mutable struct StructureMap_Parameter <: AbstractStructureMap_Parameter
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueId::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueBoolean::Union{Bool, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueId::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Parameter} = true



Base.@kwdef mutable struct StructureMap_Dependent <: AbstractStructureMap_Dependent
    _name::Union{AbstractElement, Nothing} = nothing
    _variable::Vector{AbstractElement} = AbstractElement[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    variable::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: StructureMap_Dependent} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: StructureMap_Dependent} = true



Base.@kwdef mutable struct Subscription <: AbstractSubscription
    _criteria::Union{AbstractElement, Nothing} = nothing
    _end::Union{AbstractElement, Nothing} = nothing
    _error::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _reason::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    channel::Union{AbstractSubscription_Channel, Nothing} = nothing
    contact::Vector{AbstractContactPoint} = AbstractContactPoint[]
    contained::Vector{ResourceList} = ResourceList[]
    criteria::Union{String, Nothing} = nothing
    end_fhir::Union{ZonedDateTime, Nothing} = nothing
    error::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    reason::Union{String, Nothing} = nothing
    resourceType::String = "Subscription"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Subscription} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Subscription} = true



Base.@kwdef mutable struct Subscription_Channel <: AbstractSubscription_Channel
    _endpoint::Union{AbstractElement, Nothing} = nothing
    _header::Vector{AbstractElement} = AbstractElement[]
    _payload::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    endpoint::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    header::Vector{String} = String[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    payload::Union{String, Nothing} = nothing
    type::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Subscription_Channel} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Subscription_Channel} = true



Base.@kwdef mutable struct Substance <: AbstractSubstance
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    category::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    ingredient::Vector{AbstractSubstance_Ingredient} = AbstractSubstance_Ingredient[]
    instance::Vector{AbstractSubstance_Instance} = AbstractSubstance_Instance[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "Substance"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Substance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Substance} = true



Base.@kwdef mutable struct Substance_Instance <: AbstractSubstance_Instance
    _expiry::Union{AbstractElement, Nothing} = nothing
    expiry::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Substance_Instance} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Substance_Instance} = true



Base.@kwdef mutable struct Substance_Ingredient <: AbstractSubstance_Ingredient
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractRatio, Nothing} = nothing
    substanceCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    substanceReference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Substance_Ingredient} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Substance_Ingredient} = true



Base.@kwdef mutable struct SubstanceNucleicAcid <: AbstractSubstanceNucleicAcid
    _areaOfHybridisation::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _numberOfSubunits::Union{AbstractElement, Nothing} = nothing
    areaOfHybridisation::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numberOfSubunits::Union{SafeInt32, Nothing} = nothing
    oligoNucleotideType::Union{AbstractCodeableConcept, Nothing} = nothing
    resourceType::String = "SubstanceNucleicAcid"
    sequenceType::Union{AbstractCodeableConcept, Nothing} = nothing
    subunit::Vector{AbstractSubstanceNucleicAcid_Subunit} = AbstractSubstanceNucleicAcid_Subunit[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceNucleicAcid} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceNucleicAcid} = true



Base.@kwdef mutable struct SubstanceNucleicAcid_Subunit <: AbstractSubstanceNucleicAcid_Subunit
    _length::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    _subunit::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fivePrime::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    length::Union{SafeInt32, Nothing} = nothing
    linkage::Vector{AbstractSubstanceNucleicAcid_Linkage} = AbstractSubstanceNucleicAcid_Linkage[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    sequence::Union{String, Nothing} = nothing
    sequenceAttachment::Union{AbstractAttachment, Nothing} = nothing
    subunit::Union{SafeInt32, Nothing} = nothing
    sugar::Vector{AbstractSubstanceNucleicAcid_Sugar} = AbstractSubstanceNucleicAcid_Sugar[]
    threePrime::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceNucleicAcid_Subunit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceNucleicAcid_Subunit} = true



Base.@kwdef mutable struct SubstanceNucleicAcid_Linkage <: AbstractSubstanceNucleicAcid_Linkage
    _connectivity::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _residueSite::Union{AbstractElement, Nothing} = nothing
    connectivity::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    residueSite::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceNucleicAcid_Linkage} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceNucleicAcid_Linkage} = true



Base.@kwdef mutable struct SubstanceNucleicAcid_Sugar <: AbstractSubstanceNucleicAcid_Sugar
    _name::Union{AbstractElement, Nothing} = nothing
    _residueSite::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    residueSite::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceNucleicAcid_Sugar} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceNucleicAcid_Sugar} = true



Base.@kwdef mutable struct SubstancePolymer <: AbstractSubstancePolymer
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _modification::Vector{AbstractElement} = AbstractElement[]
    class::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    copolymerConnectivity::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    geometry::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modification::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    monomerSet::Vector{AbstractSubstancePolymer_MonomerSet} = AbstractSubstancePolymer_MonomerSet[]
    repeat::Vector{AbstractSubstancePolymer_Repeat} = AbstractSubstancePolymer_Repeat[]
    resourceType::String = "SubstancePolymer"
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer} = true



Base.@kwdef mutable struct SubstancePolymer_MonomerSet <: AbstractSubstancePolymer_MonomerSet
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    ratioType::Union{AbstractCodeableConcept, Nothing} = nothing
    startingMaterial::Vector{AbstractSubstancePolymer_StartingMaterial} = AbstractSubstancePolymer_StartingMaterial[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer_MonomerSet} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer_MonomerSet} = true



Base.@kwdef mutable struct SubstancePolymer_StartingMaterial <: AbstractSubstancePolymer_StartingMaterial
    _isDefining::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractSubstanceAmount, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    isDefining::Union{Bool, Nothing} = nothing
    material::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer_StartingMaterial} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer_StartingMaterial} = true



Base.@kwdef mutable struct SubstancePolymer_Repeat <: AbstractSubstancePolymer_Repeat
    _averageMolecularFormula::Union{AbstractElement, Nothing} = nothing
    _numberOfUnits::Union{AbstractElement, Nothing} = nothing
    averageMolecularFormula::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numberOfUnits::Union{SafeInt32, Nothing} = nothing
    repeatUnit::Vector{AbstractSubstancePolymer_RepeatUnit} = AbstractSubstancePolymer_RepeatUnit[]
    repeatUnitAmountType::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer_Repeat} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer_Repeat} = true



Base.@kwdef mutable struct SubstancePolymer_RepeatUnit <: AbstractSubstancePolymer_RepeatUnit
    _repeatUnit::Union{AbstractElement, Nothing} = nothing
    amount::Union{AbstractSubstanceAmount, Nothing} = nothing
    degreeOfPolymerisation::Vector{AbstractSubstancePolymer_DegreeOfPolymerisation} = AbstractSubstancePolymer_DegreeOfPolymerisation[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    orientationOfPolymerisation::Union{AbstractCodeableConcept, Nothing} = nothing
    repeatUnit::Union{String, Nothing} = nothing
    structuralRepresentation::Vector{AbstractSubstancePolymer_StructuralRepresentation} = AbstractSubstancePolymer_StructuralRepresentation[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer_RepeatUnit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer_RepeatUnit} = true



Base.@kwdef mutable struct SubstancePolymer_DegreeOfPolymerisation <: AbstractSubstancePolymer_DegreeOfPolymerisation
    amount::Union{AbstractSubstanceAmount, Nothing} = nothing
    degree::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer_DegreeOfPolymerisation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer_DegreeOfPolymerisation} = true



Base.@kwdef mutable struct SubstancePolymer_StructuralRepresentation <: AbstractSubstancePolymer_StructuralRepresentation
    _representation::Union{AbstractElement, Nothing} = nothing
    attachment::Union{AbstractAttachment, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    representation::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstancePolymer_StructuralRepresentation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstancePolymer_StructuralRepresentation} = true



Base.@kwdef mutable struct SubstanceProtein <: AbstractSubstanceProtein
    _disulfideLinkage::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _numberOfSubunits::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    disulfideLinkage::Vector{String} = String[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    numberOfSubunits::Union{SafeInt32, Nothing} = nothing
    resourceType::String = "SubstanceProtein"
    sequenceType::Union{AbstractCodeableConcept, Nothing} = nothing
    subunit::Vector{AbstractSubstanceProtein_Subunit} = AbstractSubstanceProtein_Subunit[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceProtein} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceProtein} = true



Base.@kwdef mutable struct SubstanceProtein_Subunit <: AbstractSubstanceProtein_Subunit
    _cTerminalModification::Union{AbstractElement, Nothing} = nothing
    _length::Union{AbstractElement, Nothing} = nothing
    _nTerminalModification::Union{AbstractElement, Nothing} = nothing
    _sequence::Union{AbstractElement, Nothing} = nothing
    _subunit::Union{AbstractElement, Nothing} = nothing
    cTerminalModification::Union{String, Nothing} = nothing
    cTerminalModificationId::Union{AbstractIdentifier, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    length::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    nTerminalModification::Union{String, Nothing} = nothing
    nTerminalModificationId::Union{AbstractIdentifier, Nothing} = nothing
    sequence::Union{String, Nothing} = nothing
    sequenceAttachment::Union{AbstractAttachment, Nothing} = nothing
    subunit::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceProtein_Subunit} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceProtein_Subunit} = true



Base.@kwdef mutable struct SubstanceReferenceInformation <: AbstractSubstanceReferenceInformation
    _comment::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    classification::Vector{AbstractSubstanceReferenceInformation_Classification} = AbstractSubstanceReferenceInformation_Classification[]
    comment::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gene::Vector{AbstractSubstanceReferenceInformation_Gene} = AbstractSubstanceReferenceInformation_Gene[]
    geneElement::Vector{AbstractSubstanceReferenceInformation_GeneElement} = AbstractSubstanceReferenceInformation_GeneElement[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resourceType::String = "SubstanceReferenceInformation"
    target::Vector{AbstractSubstanceReferenceInformation_Target} = AbstractSubstanceReferenceInformation_Target[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceReferenceInformation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceReferenceInformation} = true



Base.@kwdef mutable struct SubstanceReferenceInformation_Gene <: AbstractSubstanceReferenceInformation_Gene
    extension::Vector{AbstractExtension} = AbstractExtension[]
    gene::Union{AbstractCodeableConcept, Nothing} = nothing
    geneSequenceOrigin::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Vector{AbstractReference} = AbstractReference[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceReferenceInformation_Gene} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceReferenceInformation_Gene} = true



Base.@kwdef mutable struct SubstanceReferenceInformation_GeneElement <: AbstractSubstanceReferenceInformation_GeneElement
    element::Union{AbstractIdentifier, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Vector{AbstractReference} = AbstractReference[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceReferenceInformation_GeneElement} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceReferenceInformation_GeneElement} = true



Base.@kwdef mutable struct SubstanceReferenceInformation_Classification <: AbstractSubstanceReferenceInformation_Classification
    classification::Union{AbstractCodeableConcept, Nothing} = nothing
    domain::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Vector{AbstractReference} = AbstractReference[]
    subtype::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceReferenceInformation_Classification} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceReferenceInformation_Classification} = true



Base.@kwdef mutable struct SubstanceReferenceInformation_Target <: AbstractSubstanceReferenceInformation_Target
    _amountString::Union{AbstractElement, Nothing} = nothing
    amountQuantity::Union{AbstractQuantity, Nothing} = nothing
    amountRange::Union{AbstractRange, Nothing} = nothing
    amountString::Union{String, Nothing} = nothing
    amountType::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    interaction::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    organism::Union{AbstractCodeableConcept, Nothing} = nothing
    organismType::Union{AbstractCodeableConcept, Nothing} = nothing
    source::Vector{AbstractReference} = AbstractReference[]
    target::Union{AbstractIdentifier, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceReferenceInformation_Target} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceReferenceInformation_Target} = true



Base.@kwdef mutable struct SubstanceSourceMaterial <: AbstractSubstanceSourceMaterial
    _geographicalLocation::Vector{AbstractElement} = AbstractElement[]
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _organismName::Union{AbstractElement, Nothing} = nothing
    _parentSubstanceName::Vector{AbstractElement} = AbstractElement[]
    contained::Vector{ResourceList} = ResourceList[]
    countryOfOrigin::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    developmentStage::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fractionDescription::Vector{AbstractSubstanceSourceMaterial_FractionDescription} = AbstractSubstanceSourceMaterial_FractionDescription[]
    geographicalLocation::Vector{String} = String[]
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    organism::Union{AbstractSubstanceSourceMaterial_Organism, Nothing} = nothing
    organismId::Union{AbstractIdentifier, Nothing} = nothing
    organismName::Union{String, Nothing} = nothing
    parentSubstanceId::Vector{AbstractIdentifier} = AbstractIdentifier[]
    parentSubstanceName::Vector{String} = String[]
    partDescription::Vector{AbstractSubstanceSourceMaterial_PartDescription} = AbstractSubstanceSourceMaterial_PartDescription[]
    resourceType::String = "SubstanceSourceMaterial"
    sourceMaterialClass::Union{AbstractCodeableConcept, Nothing} = nothing
    sourceMaterialState::Union{AbstractCodeableConcept, Nothing} = nothing
    sourceMaterialType::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial} = true



Base.@kwdef mutable struct SubstanceSourceMaterial_FractionDescription <: AbstractSubstanceSourceMaterial_FractionDescription
    _fraction::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fraction::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    materialType::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial_FractionDescription} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial_FractionDescription} = true



Base.@kwdef mutable struct SubstanceSourceMaterial_Organism <: AbstractSubstanceSourceMaterial_Organism
    _intraspecificDescription::Union{AbstractElement, Nothing} = nothing
    author::Vector{AbstractSubstanceSourceMaterial_Author} = AbstractSubstanceSourceMaterial_Author[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    family::Union{AbstractCodeableConcept, Nothing} = nothing
    genus::Union{AbstractCodeableConcept, Nothing} = nothing
    hybrid::Union{AbstractSubstanceSourceMaterial_Hybrid, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    intraspecificDescription::Union{String, Nothing} = nothing
    intraspecificType::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    organismGeneral::Union{AbstractSubstanceSourceMaterial_OrganismGeneral, Nothing} = nothing
    species::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial_Organism} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial_Organism} = true



Base.@kwdef mutable struct SubstanceSourceMaterial_Author <: AbstractSubstanceSourceMaterial_Author
    _authorDescription::Union{AbstractElement, Nothing} = nothing
    authorDescription::Union{String, Nothing} = nothing
    authorType::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial_Author} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial_Author} = true



Base.@kwdef mutable struct SubstanceSourceMaterial_Hybrid <: AbstractSubstanceSourceMaterial_Hybrid
    _maternalOrganismId::Union{AbstractElement, Nothing} = nothing
    _maternalOrganismName::Union{AbstractElement, Nothing} = nothing
    _paternalOrganismId::Union{AbstractElement, Nothing} = nothing
    _paternalOrganismName::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    hybridType::Union{AbstractCodeableConcept, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    maternalOrganismId::Union{String, Nothing} = nothing
    maternalOrganismName::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    paternalOrganismId::Union{String, Nothing} = nothing
    paternalOrganismName::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial_Hybrid} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial_Hybrid} = true



Base.@kwdef mutable struct SubstanceSourceMaterial_OrganismGeneral <: AbstractSubstanceSourceMaterial_OrganismGeneral
    class::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    kingdom::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    order::Union{AbstractCodeableConcept, Nothing} = nothing
    phylum::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial_OrganismGeneral} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial_OrganismGeneral} = true



Base.@kwdef mutable struct SubstanceSourceMaterial_PartDescription <: AbstractSubstanceSourceMaterial_PartDescription
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    part::Union{AbstractCodeableConcept, Nothing} = nothing
    partLocation::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSourceMaterial_PartDescription} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSourceMaterial_PartDescription} = true



Base.@kwdef mutable struct SubstanceSpecification <: AbstractSubstanceSpecification
    _comment::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    code::Vector{AbstractSubstanceSpecification_Code} = AbstractSubstanceSpecification_Code[]
    comment::Union{String, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    domain::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    moiety::Vector{AbstractSubstanceSpecification_Moiety} = AbstractSubstanceSpecification_Moiety[]
    molecularWeight::Vector{AbstractSubstanceSpecification_MolecularWeight} = AbstractSubstanceSpecification_MolecularWeight[]
    name::Vector{AbstractSubstanceSpecification_Name} = AbstractSubstanceSpecification_Name[]
    nucleicAcid::Union{AbstractReference, Nothing} = nothing
    polymer::Union{AbstractReference, Nothing} = nothing
    property::Vector{AbstractSubstanceSpecification_Property} = AbstractSubstanceSpecification_Property[]
    protein::Union{AbstractReference, Nothing} = nothing
    referenceInformation::Union{AbstractReference, Nothing} = nothing
    relationship::Vector{AbstractSubstanceSpecification_Relationship} = AbstractSubstanceSpecification_Relationship[]
    resourceType::String = "SubstanceSpecification"
    source::Vector{AbstractReference} = AbstractReference[]
    sourceMaterial::Union{AbstractReference, Nothing} = nothing
    status::Union{AbstractCodeableConcept, Nothing} = nothing
    structure::Union{AbstractSubstanceSpecification_Structure, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification} = true



Base.@kwdef mutable struct SubstanceSpecification_Moiety <: AbstractSubstanceSpecification_Moiety
    _amountString::Union{AbstractElement, Nothing} = nothing
    _molecularFormula::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    amountQuantity::Union{AbstractQuantity, Nothing} = nothing
    amountString::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    molecularFormula::Union{String, Nothing} = nothing
    name::Union{String, Nothing} = nothing
    opticalActivity::Union{AbstractCodeableConcept, Nothing} = nothing
    role::Union{AbstractCodeableConcept, Nothing} = nothing
    stereochemistry::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Moiety} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Moiety} = true



Base.@kwdef mutable struct SubstanceSpecification_Property <: AbstractSubstanceSpecification_Property
    _amountString::Union{AbstractElement, Nothing} = nothing
    _parameters::Union{AbstractElement, Nothing} = nothing
    amountQuantity::Union{AbstractQuantity, Nothing} = nothing
    amountString::Union{String, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    definingSubstanceCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    definingSubstanceReference::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    parameters::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Property} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Property} = true



Base.@kwdef mutable struct SubstanceSpecification_Structure <: AbstractSubstanceSpecification_Structure
    _molecularFormula::Union{AbstractElement, Nothing} = nothing
    _molecularFormulaByMoiety::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    isotope::Vector{AbstractSubstanceSpecification_Isotope} = AbstractSubstanceSpecification_Isotope[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    molecularFormula::Union{String, Nothing} = nothing
    molecularFormulaByMoiety::Union{String, Nothing} = nothing
    molecularWeight::Union{AbstractSubstanceSpecification_MolecularWeight, Nothing} = nothing
    opticalActivity::Union{AbstractCodeableConcept, Nothing} = nothing
    representation::Vector{AbstractSubstanceSpecification_Representation} = AbstractSubstanceSpecification_Representation[]
    source::Vector{AbstractReference} = AbstractReference[]
    stereochemistry::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Structure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Structure} = true



Base.@kwdef mutable struct SubstanceSpecification_Isotope <: AbstractSubstanceSpecification_Isotope
    extension::Vector{AbstractExtension} = AbstractExtension[]
    halfLife::Union{AbstractQuantity, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    molecularWeight::Union{AbstractSubstanceSpecification_MolecularWeight, Nothing} = nothing
    name::Union{AbstractCodeableConcept, Nothing} = nothing
    substitution::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Isotope} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Isotope} = true



Base.@kwdef mutable struct SubstanceSpecification_MolecularWeight <: AbstractSubstanceSpecification_MolecularWeight
    amount::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    method::Union{AbstractCodeableConcept, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_MolecularWeight} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_MolecularWeight} = true



Base.@kwdef mutable struct SubstanceSpecification_Representation <: AbstractSubstanceSpecification_Representation
    _representation::Union{AbstractElement, Nothing} = nothing
    attachment::Union{AbstractAttachment, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    representation::Union{String, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Representation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Representation} = true



Base.@kwdef mutable struct SubstanceSpecification_Code <: AbstractSubstanceSpecification_Code
    _comment::Union{AbstractElement, Nothing} = nothing
    _statusDate::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    comment::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    source::Vector{AbstractReference} = AbstractReference[]
    status::Union{AbstractCodeableConcept, Nothing} = nothing
    statusDate::Union{FHIRDateTime, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Code} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Code} = true



Base.@kwdef mutable struct SubstanceSpecification_Name <: AbstractSubstanceSpecification_Name
    _name::Union{AbstractElement, Nothing} = nothing
    _preferred::Union{AbstractElement, Nothing} = nothing
    domain::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    official::Vector{AbstractSubstanceSpecification_Official} = AbstractSubstanceSpecification_Official[]
    preferred::Union{Bool, Nothing} = nothing
    source::Vector{AbstractReference} = AbstractReference[]
    status::Union{AbstractCodeableConcept, Nothing} = nothing
    synonym::Vector{AbstractSubstanceSpecification_Name} = AbstractSubstanceSpecification_Name[]
    translation::Vector{AbstractSubstanceSpecification_Name} = AbstractSubstanceSpecification_Name[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Name} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Name} = true



Base.@kwdef mutable struct SubstanceSpecification_Official <: AbstractSubstanceSpecification_Official
    _date::Union{AbstractElement, Nothing} = nothing
    authority::Union{AbstractCodeableConcept, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    status::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Official} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Official} = true



Base.@kwdef mutable struct SubstanceSpecification_Relationship <: AbstractSubstanceSpecification_Relationship
    _amountString::Union{AbstractElement, Nothing} = nothing
    _isDefining::Union{AbstractElement, Nothing} = nothing
    amountQuantity::Union{AbstractQuantity, Nothing} = nothing
    amountRange::Union{AbstractRange, Nothing} = nothing
    amountRatio::Union{AbstractRatio, Nothing} = nothing
    amountRatioLowLimit::Union{AbstractRatio, Nothing} = nothing
    amountString::Union{String, Nothing} = nothing
    amountType::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    isDefining::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    relationship::Union{AbstractCodeableConcept, Nothing} = nothing
    source::Vector{AbstractReference} = AbstractReference[]
    substanceCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    substanceReference::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SubstanceSpecification_Relationship} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SubstanceSpecification_Relationship} = true



Base.@kwdef mutable struct SupplyDelivery <: AbstractSupplyDelivery
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    contained::Vector{ResourceList} = ResourceList[]
    destination::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    occurrenceTiming::Union{AbstractTiming, Nothing} = nothing
    partOf::Vector{AbstractReference} = AbstractReference[]
    patient::Union{AbstractReference, Nothing} = nothing
    receiver::Vector{AbstractReference} = AbstractReference[]
    resourceType::String = "SupplyDelivery"
    status::Union{String, Nothing} = nothing
    suppliedItem::Union{AbstractSupplyDelivery_SuppliedItem, Nothing} = nothing
    supplier::Union{AbstractReference, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    type::Union{AbstractCodeableConcept, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SupplyDelivery} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SupplyDelivery} = true



Base.@kwdef mutable struct SupplyDelivery_SuppliedItem <: AbstractSupplyDelivery_SuppliedItem
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    itemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    itemReference::Union{AbstractReference, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    quantity::Union{AbstractQuantity, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SupplyDelivery_SuppliedItem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SupplyDelivery_SuppliedItem} = true



Base.@kwdef mutable struct SupplyRequest <: AbstractSupplyRequest
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _occurrenceDateTime::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    category::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    deliverFrom::Union{AbstractReference, Nothing} = nothing
    deliverTo::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    itemCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    itemReference::Union{AbstractReference, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    occurrenceDateTime::Union{String, Nothing} = nothing
    occurrencePeriod::Union{AbstractPeriod, Nothing} = nothing
    occurrenceTiming::Union{AbstractTiming, Nothing} = nothing
    parameter::Vector{AbstractSupplyRequest_Parameter} = AbstractSupplyRequest_Parameter[]
    priority::Union{String, Nothing} = nothing
    quantity::Union{AbstractQuantity, Nothing} = nothing
    reasonCode::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    reasonReference::Vector{AbstractReference} = AbstractReference[]
    requester::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "SupplyRequest"
    status::Union{String, Nothing} = nothing
    supplier::Vector{AbstractReference} = AbstractReference[]
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SupplyRequest} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SupplyRequest} = true



Base.@kwdef mutable struct SupplyRequest_Parameter <: AbstractSupplyRequest_Parameter
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: SupplyRequest_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: SupplyRequest_Parameter} = true



Base.@kwdef mutable struct Task <: AbstractTask
    _authoredOn::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _instantiatesUri::Union{AbstractElement, Nothing} = nothing
    _intent::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastModified::Union{AbstractElement, Nothing} = nothing
    _priority::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    authoredOn::Union{FHIRDateTime, Nothing} = nothing
    basedOn::Vector{AbstractReference} = AbstractReference[]
    businessStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    code::Union{AbstractCodeableConcept, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    description::Union{String, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    executionPeriod::Union{AbstractPeriod, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    focus::Union{AbstractReference, Nothing} = nothing
    for_fhir::Union{AbstractReference, Nothing} = nothing
    groupIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    input::Vector{AbstractTask_Input} = AbstractTask_Input[]
    instantiatesCanonical::Union{String, Nothing} = nothing
    instantiatesUri::Union{String, Nothing} = nothing
    insurance::Vector{AbstractReference} = AbstractReference[]
    intent::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lastModified::Union{FHIRDateTime, Nothing} = nothing
    location::Union{AbstractReference, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    output::Vector{AbstractTask_Output} = AbstractTask_Output[]
    owner::Union{AbstractReference, Nothing} = nothing
    partOf::Vector{AbstractReference} = AbstractReference[]
    performerType::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    priority::Union{String, Nothing} = nothing
    reasonCode::Union{AbstractCodeableConcept, Nothing} = nothing
    reasonReference::Union{AbstractReference, Nothing} = nothing
    relevantHistory::Vector{AbstractReference} = AbstractReference[]
    requester::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "Task"
    restriction::Union{AbstractTask_Restriction, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    statusReason::Union{AbstractCodeableConcept, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Task} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Task} = true



Base.@kwdef mutable struct Task_Restriction <: AbstractTask_Restriction
    _repetitions::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    period::Union{AbstractPeriod, Nothing} = nothing
    recipient::Vector{AbstractReference} = AbstractReference[]
    repetitions::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Task_Restriction} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Task_Restriction} = true



Base.@kwdef mutable struct Task_Input <: AbstractTask_Input
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCanonical::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueId::Union{AbstractElement, Nothing} = nothing
    _valueInstant::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueMarkdown::Union{AbstractElement, Nothing} = nothing
    _valueOid::Union{AbstractElement, Nothing} = nothing
    _valuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    _valueUrl::Union{AbstractElement, Nothing} = nothing
    _valueUuid::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    valueAddress::Union{AbstractAddress, Nothing} = nothing
    valueAge::Union{AbstractAge, Nothing} = nothing
    valueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCanonical::Union{String, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    valueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    valueContributor::Union{AbstractContributor, Nothing} = nothing
    valueCount::Union{AbstractCount, Nothing} = nothing
    valueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueDistance::Union{AbstractDistance, Nothing} = nothing
    valueDosage::Union{AbstractDosage, Nothing} = nothing
    valueDuration::Union{AbstractDuration, Nothing} = nothing
    valueExpression::Union{AbstractExpression, Nothing} = nothing
    valueHumanName::Union{AbstractHumanName, Nothing} = nothing
    valueId::Union{String, Nothing} = nothing
    valueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    valueInstant::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueMarkdown::Union{String, Nothing} = nothing
    valueMeta::Union{AbstractMeta, Nothing} = nothing
    valueMoney::Union{AbstractMoney, Nothing} = nothing
    valueOid::Union{String, Nothing} = nothing
    valueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueSignature::Union{AbstractSignature, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueTiming::Union{AbstractTiming, Nothing} = nothing
    valueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    valueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
    valueUrl::Union{String, Nothing} = nothing
    valueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    valueUuid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Task_Input} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Task_Input} = true



Base.@kwdef mutable struct Task_Output <: AbstractTask_Output
    _valueBase64Binary::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCanonical::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDate::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueId::Union{AbstractElement, Nothing} = nothing
    _valueInstant::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueMarkdown::Union{AbstractElement, Nothing} = nothing
    _valueOid::Union{AbstractElement, Nothing} = nothing
    _valuePositiveInt::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueTime::Union{AbstractElement, Nothing} = nothing
    _valueUnsignedInt::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    _valueUrl::Union{AbstractElement, Nothing} = nothing
    _valueUuid::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{AbstractCodeableConcept, Nothing} = nothing
    valueAddress::Union{AbstractAddress, Nothing} = nothing
    valueAge::Union{AbstractAge, Nothing} = nothing
    valueAnnotation::Union{AbstractAnnotation, Nothing} = nothing
    valueAttachment::Union{AbstractAttachment, Nothing} = nothing
    valueBase64Binary::Union{String, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCanonical::Union{String, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueCodeableConcept::Union{AbstractCodeableConcept, Nothing} = nothing
    valueCoding::Union{AbstractCoding, Nothing} = nothing
    valueContactDetail::Union{AbstractContactDetail, Nothing} = nothing
    valueContactPoint::Union{AbstractContactPoint, Nothing} = nothing
    valueContributor::Union{AbstractContributor, Nothing} = nothing
    valueCount::Union{AbstractCount, Nothing} = nothing
    valueDataRequirement::Union{AbstractDataRequirement, Nothing} = nothing
    valueDate::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueDistance::Union{AbstractDistance, Nothing} = nothing
    valueDosage::Union{AbstractDosage, Nothing} = nothing
    valueDuration::Union{AbstractDuration, Nothing} = nothing
    valueExpression::Union{AbstractExpression, Nothing} = nothing
    valueHumanName::Union{AbstractHumanName, Nothing} = nothing
    valueId::Union{String, Nothing} = nothing
    valueIdentifier::Union{AbstractIdentifier, Nothing} = nothing
    valueInstant::Union{String, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueMarkdown::Union{String, Nothing} = nothing
    valueMeta::Union{AbstractMeta, Nothing} = nothing
    valueMoney::Union{AbstractMoney, Nothing} = nothing
    valueOid::Union{String, Nothing} = nothing
    valueParameterDefinition::Union{AbstractParameterDefinition, Nothing} = nothing
    valuePeriod::Union{AbstractPeriod, Nothing} = nothing
    valuePositiveInt::Union{FHIRInt32, Nothing} = nothing
    valueQuantity::Union{AbstractQuantity, Nothing} = nothing
    valueRange::Union{AbstractRange, Nothing} = nothing
    valueRatio::Union{AbstractRatio, Nothing} = nothing
    valueReference::Union{AbstractReference, Nothing} = nothing
    valueRelatedArtifact::Union{AbstractRelatedArtifact, Nothing} = nothing
    valueSampledData::Union{AbstractSampledData, Nothing} = nothing
    valueSignature::Union{AbstractSignature, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueTime::Union{String, Nothing} = nothing
    valueTiming::Union{AbstractTiming, Nothing} = nothing
    valueTriggerDefinition::Union{AbstractTriggerDefinition, Nothing} = nothing
    valueUnsignedInt::Union{FHIRInt32, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
    valueUrl::Union{String, Nothing} = nothing
    valueUsageContext::Union{AbstractUsageContext, Nothing} = nothing
    valueUuid::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: Task_Output} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: Task_Output} = true



Base.@kwdef mutable struct TerminologyCapabilities <: AbstractTerminologyCapabilities
    _codeSearch::Union{AbstractElement, Nothing} = nothing
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _kind::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lockedDate::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    closure::Union{AbstractTerminologyCapabilities_Closure, Nothing} = nothing
    codeSearch::Union{String, Nothing} = nothing
    codeSystem::Vector{AbstractTerminologyCapabilities_CodeSystem} = AbstractTerminologyCapabilities_CodeSystem[]
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    expansion::Union{AbstractTerminologyCapabilities_Expansion, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    implementation::Union{AbstractTerminologyCapabilities_Implementation, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    kind::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lockedDate::Union{Bool, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "TerminologyCapabilities"
    software::Union{AbstractTerminologyCapabilities_Software, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    translation::Union{AbstractTerminologyCapabilities_Translation, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    validateCode::Union{AbstractTerminologyCapabilities_ValidateCode, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities} = true



Base.@kwdef mutable struct TerminologyCapabilities_Software <: AbstractTerminologyCapabilities_Software
    _name::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Software} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Software} = true



Base.@kwdef mutable struct TerminologyCapabilities_Implementation <: AbstractTerminologyCapabilities_Implementation
    _description::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Implementation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Implementation} = true



Base.@kwdef mutable struct TerminologyCapabilities_CodeSystem <: AbstractTerminologyCapabilities_CodeSystem
    _subsumption::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    subsumption::Union{Bool, Nothing} = nothing
    uri::Union{String, Nothing} = nothing
    version::Vector{AbstractTerminologyCapabilities_Version} = AbstractTerminologyCapabilities_Version[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_CodeSystem} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_CodeSystem} = true



Base.@kwdef mutable struct TerminologyCapabilities_Version <: AbstractTerminologyCapabilities_Version
    _code::Union{AbstractElement, Nothing} = nothing
    _compositional::Union{AbstractElement, Nothing} = nothing
    _isDefault::Union{AbstractElement, Nothing} = nothing
    _language::Vector{AbstractElement} = AbstractElement[]
    _property::Vector{AbstractElement} = AbstractElement[]
    code::Union{String, Nothing} = nothing
    compositional::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    filter::Vector{AbstractTerminologyCapabilities_Filter} = AbstractTerminologyCapabilities_Filter[]
    id::Union{String, Nothing} = nothing
    isDefault::Union{Bool, Nothing} = nothing
    language::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    property::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Version} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Version} = true



Base.@kwdef mutable struct TerminologyCapabilities_Filter <: AbstractTerminologyCapabilities_Filter
    _code::Union{AbstractElement, Nothing} = nothing
    _op::Vector{AbstractElement} = AbstractElement[]
    code::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    op::Vector{String} = String[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Filter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Filter} = true



Base.@kwdef mutable struct TerminologyCapabilities_Expansion <: AbstractTerminologyCapabilities_Expansion
    _hierarchical::Union{AbstractElement, Nothing} = nothing
    _incomplete::Union{AbstractElement, Nothing} = nothing
    _paging::Union{AbstractElement, Nothing} = nothing
    _textFilter::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    hierarchical::Union{Bool, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    incomplete::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    paging::Union{Bool, Nothing} = nothing
    parameter::Vector{AbstractTerminologyCapabilities_Parameter} = AbstractTerminologyCapabilities_Parameter[]
    textFilter::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Expansion} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Expansion} = true



Base.@kwdef mutable struct TerminologyCapabilities_Parameter <: AbstractTerminologyCapabilities_Parameter
    _documentation::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    documentation::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Parameter} = true



Base.@kwdef mutable struct TerminologyCapabilities_ValidateCode <: AbstractTerminologyCapabilities_ValidateCode
    _translations::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    translations::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_ValidateCode} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_ValidateCode} = true



Base.@kwdef mutable struct TerminologyCapabilities_Translation <: AbstractTerminologyCapabilities_Translation
    _needsMap::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    needsMap::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Translation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Translation} = true



Base.@kwdef mutable struct TerminologyCapabilities_Closure <: AbstractTerminologyCapabilities_Closure
    _translation::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    translation::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TerminologyCapabilities_Closure} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TerminologyCapabilities_Closure} = true



Base.@kwdef mutable struct TestReport <: AbstractTestReport
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _issued::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _result::Union{AbstractElement, Nothing} = nothing
    _score::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _tester::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    issued::Union{FHIRDateTime, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    participant::Vector{AbstractTestReport_Participant} = AbstractTestReport_Participant[]
    resourceType::String = "TestReport"
    result::Union{String, Nothing} = nothing
    score::Union{FHIRNumber, Nothing} = nothing
    setup::Union{AbstractTestReport_Setup, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    teardown::Union{AbstractTestReport_Teardown, Nothing} = nothing
    test::Vector{AbstractTestReport_Test} = AbstractTestReport_Test[]
    testScript::Union{AbstractReference, Nothing} = nothing
    tester::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport} = true



Base.@kwdef mutable struct TestReport_Participant <: AbstractTestReport_Participant
    _display::Union{AbstractElement, Nothing} = nothing
    _type::Union{AbstractElement, Nothing} = nothing
    _uri::Union{AbstractElement, Nothing} = nothing
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    type::Union{String, Nothing} = nothing
    uri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Participant} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Participant} = true



Base.@kwdef mutable struct TestReport_Setup <: AbstractTestReport_Setup
    action::Vector{AbstractTestReport_Action} = AbstractTestReport_Action[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Setup} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Setup} = true



Base.@kwdef mutable struct TestReport_Action <: AbstractTestReport_Action
    assert::Union{AbstractTestReport_Assert, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractTestReport_Operation, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Action} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Action} = true



Base.@kwdef mutable struct TestReport_Operation <: AbstractTestReport_Operation
    _detail::Union{AbstractElement, Nothing} = nothing
    _message::Union{AbstractElement, Nothing} = nothing
    _result::Union{AbstractElement, Nothing} = nothing
    detail::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    message::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    result::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Operation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Operation} = true



Base.@kwdef mutable struct TestReport_Assert <: AbstractTestReport_Assert
    _detail::Union{AbstractElement, Nothing} = nothing
    _message::Union{AbstractElement, Nothing} = nothing
    _result::Union{AbstractElement, Nothing} = nothing
    detail::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    message::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    result::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Assert} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Assert} = true



Base.@kwdef mutable struct TestReport_Test <: AbstractTestReport_Test
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractTestReport_Action1} = AbstractTestReport_Action1[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Test} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Test} = true



Base.@kwdef mutable struct TestReport_Action1 <: AbstractTestReport_Action1
    assert::Union{AbstractTestReport_Assert, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractTestReport_Operation, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Action1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Action1} = true



Base.@kwdef mutable struct TestReport_Teardown <: AbstractTestReport_Teardown
    action::Vector{AbstractTestReport_Action2} = AbstractTestReport_Action2[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Teardown} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Teardown} = true



Base.@kwdef mutable struct TestReport_Action2 <: AbstractTestReport_Action2
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractTestReport_Operation, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestReport_Action2} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestReport_Action2} = true



Base.@kwdef mutable struct TestScript <: AbstractTestScript
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    destination::Vector{AbstractTestScript_Destination} = AbstractTestScript_Destination[]
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    fixture::Vector{AbstractTestScript_Fixture} = AbstractTestScript_Fixture[]
    id::Union{String, Nothing} = nothing
    identifier::Union{AbstractIdentifier, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    metadata::Union{AbstractTestScript_Metadata, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    origin::Vector{AbstractTestScript_Origin} = AbstractTestScript_Origin[]
    profile::Vector{AbstractReference} = AbstractReference[]
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "TestScript"
    setup::Union{AbstractTestScript_Setup, Nothing} = nothing
    status::Union{String, Nothing} = nothing
    teardown::Union{AbstractTestScript_Teardown, Nothing} = nothing
    test::Vector{AbstractTestScript_Test} = AbstractTestScript_Test[]
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    variable::Vector{AbstractTestScript_Variable} = AbstractTestScript_Variable[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript} = true



Base.@kwdef mutable struct TestScript_Origin <: AbstractTestScript_Origin
    _index::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    index::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    profile::Union{AbstractCoding, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Origin} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Origin} = true



Base.@kwdef mutable struct TestScript_Destination <: AbstractTestScript_Destination
    _index::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    index::Union{SafeInt32, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    profile::Union{AbstractCoding, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Destination} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Destination} = true



Base.@kwdef mutable struct TestScript_Metadata <: AbstractTestScript_Metadata
    capability::Vector{AbstractTestScript_Capability} = AbstractTestScript_Capability[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    link::Vector{AbstractTestScript_Link} = AbstractTestScript_Link[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Metadata} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Metadata} = true



Base.@kwdef mutable struct TestScript_Link <: AbstractTestScript_Link
    _description::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Link} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Link} = true



Base.@kwdef mutable struct TestScript_Capability <: AbstractTestScript_Capability
    _description::Union{AbstractElement, Nothing} = nothing
    _destination::Union{AbstractElement, Nothing} = nothing
    _link::Vector{AbstractElement} = AbstractElement[]
    _origin::Vector{AbstractElement} = AbstractElement[]
    _required::Union{AbstractElement, Nothing} = nothing
    _validated::Union{AbstractElement, Nothing} = nothing
    capabilities::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    destination::Union{SafeInt32, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    link::Vector{String} = String[]
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    origin::Vector{SafeInt32} = SafeInt32[]
    required::Union{Bool, Nothing} = nothing
    validated::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Capability} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Capability} = true



Base.@kwdef mutable struct TestScript_Fixture <: AbstractTestScript_Fixture
    _autocreate::Union{AbstractElement, Nothing} = nothing
    _autodelete::Union{AbstractElement, Nothing} = nothing
    autocreate::Union{Bool, Nothing} = nothing
    autodelete::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    resource::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Fixture} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Fixture} = true



Base.@kwdef mutable struct TestScript_Variable <: AbstractTestScript_Variable
    _defaultValue::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _expression::Union{AbstractElement, Nothing} = nothing
    _headerField::Union{AbstractElement, Nothing} = nothing
    _hint::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _path::Union{AbstractElement, Nothing} = nothing
    _sourceId::Union{AbstractElement, Nothing} = nothing
    defaultValue::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    headerField::Union{String, Nothing} = nothing
    hint::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    path::Union{String, Nothing} = nothing
    sourceId::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Variable} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Variable} = true



Base.@kwdef mutable struct TestScript_Setup <: AbstractTestScript_Setup
    action::Vector{AbstractTestScript_Action} = AbstractTestScript_Action[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Setup} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Setup} = true



Base.@kwdef mutable struct TestScript_Action <: AbstractTestScript_Action
    assert::Union{AbstractTestScript_Assert, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractTestScript_Operation, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Action} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Action} = true



Base.@kwdef mutable struct TestScript_Operation <: AbstractTestScript_Operation
    _accept::Union{AbstractElement, Nothing} = nothing
    _contentType::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _destination::Union{AbstractElement, Nothing} = nothing
    _encodeRequestUrl::Union{AbstractElement, Nothing} = nothing
    _label::Union{AbstractElement, Nothing} = nothing
    _method::Union{AbstractElement, Nothing} = nothing
    _origin::Union{AbstractElement, Nothing} = nothing
    _params::Union{AbstractElement, Nothing} = nothing
    _requestId::Union{AbstractElement, Nothing} = nothing
    _resource::Union{AbstractElement, Nothing} = nothing
    _responseId::Union{AbstractElement, Nothing} = nothing
    _sourceId::Union{AbstractElement, Nothing} = nothing
    _targetId::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    accept::Union{String, Nothing} = nothing
    contentType::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    destination::Union{SafeInt32, Nothing} = nothing
    encodeRequestUrl::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    label::Union{String, Nothing} = nothing
    method::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    origin::Union{SafeInt32, Nothing} = nothing
    params::Union{String, Nothing} = nothing
    requestHeader::Vector{AbstractTestScript_RequestHeader} = AbstractTestScript_RequestHeader[]
    requestId::Union{String, Nothing} = nothing
    resource::Union{String, Nothing} = nothing
    responseId::Union{String, Nothing} = nothing
    sourceId::Union{String, Nothing} = nothing
    targetId::Union{String, Nothing} = nothing
    type::Union{AbstractCoding, Nothing} = nothing
    url::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Operation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Operation} = true



Base.@kwdef mutable struct TestScript_RequestHeader <: AbstractTestScript_RequestHeader
    _field::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    field::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_RequestHeader} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_RequestHeader} = true



Base.@kwdef mutable struct TestScript_Assert <: AbstractTestScript_Assert
    _compareToSourceExpression::Union{AbstractElement, Nothing} = nothing
    _compareToSourceId::Union{AbstractElement, Nothing} = nothing
    _compareToSourcePath::Union{AbstractElement, Nothing} = nothing
    _contentType::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _direction::Union{AbstractElement, Nothing} = nothing
    _expression::Union{AbstractElement, Nothing} = nothing
    _headerField::Union{AbstractElement, Nothing} = nothing
    _label::Union{AbstractElement, Nothing} = nothing
    _minimumId::Union{AbstractElement, Nothing} = nothing
    _navigationLinks::Union{AbstractElement, Nothing} = nothing
    _operator::Union{AbstractElement, Nothing} = nothing
    _path::Union{AbstractElement, Nothing} = nothing
    _requestMethod::Union{AbstractElement, Nothing} = nothing
    _requestURL::Union{AbstractElement, Nothing} = nothing
    _resource::Union{AbstractElement, Nothing} = nothing
    _response::Union{AbstractElement, Nothing} = nothing
    _responseCode::Union{AbstractElement, Nothing} = nothing
    _sourceId::Union{AbstractElement, Nothing} = nothing
    _validateProfileId::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    _warningOnly::Union{AbstractElement, Nothing} = nothing
    compareToSourceExpression::Union{String, Nothing} = nothing
    compareToSourceId::Union{String, Nothing} = nothing
    compareToSourcePath::Union{String, Nothing} = nothing
    contentType::Union{String, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    direction::Union{String, Nothing} = nothing
    expression::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    headerField::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    label::Union{String, Nothing} = nothing
    minimumId::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    navigationLinks::Union{Bool, Nothing} = nothing
    operator::Union{String, Nothing} = nothing
    path::Union{String, Nothing} = nothing
    requestMethod::Union{String, Nothing} = nothing
    requestURL::Union{String, Nothing} = nothing
    resource::Union{String, Nothing} = nothing
    response::Union{String, Nothing} = nothing
    responseCode::Union{String, Nothing} = nothing
    sourceId::Union{String, Nothing} = nothing
    validateProfileId::Union{String, Nothing} = nothing
    value::Union{String, Nothing} = nothing
    warningOnly::Union{Bool, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Assert} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Assert} = true



Base.@kwdef mutable struct TestScript_Test <: AbstractTestScript_Test
    _description::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    action::Vector{AbstractTestScript_Action1} = AbstractTestScript_Action1[]
    description::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Test} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Test} = true



Base.@kwdef mutable struct TestScript_Action1 <: AbstractTestScript_Action1
    assert::Union{AbstractTestScript_Assert, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractTestScript_Operation, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Action1} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Action1} = true



Base.@kwdef mutable struct TestScript_Teardown <: AbstractTestScript_Teardown
    action::Vector{AbstractTestScript_Action2} = AbstractTestScript_Action2[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Teardown} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Teardown} = true



Base.@kwdef mutable struct TestScript_Action2 <: AbstractTestScript_Action2
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    operation::Union{AbstractTestScript_Operation, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: TestScript_Action2} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: TestScript_Action2} = true



Base.@kwdef mutable struct ValueSet <: AbstractValueSet
    _copyright::Union{AbstractElement, Nothing} = nothing
    _date::Union{AbstractElement, Nothing} = nothing
    _description::Union{AbstractElement, Nothing} = nothing
    _experimental::Union{AbstractElement, Nothing} = nothing
    _immutable::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _name::Union{AbstractElement, Nothing} = nothing
    _publisher::Union{AbstractElement, Nothing} = nothing
    _purpose::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _title::Union{AbstractElement, Nothing} = nothing
    _url::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    compose::Union{AbstractValueSet_Compose, Nothing} = nothing
    contact::Vector{AbstractContactDetail} = AbstractContactDetail[]
    contained::Vector{ResourceList} = ResourceList[]
    copyright::Union{String, Nothing} = nothing
    date::Union{FHIRDateTime, Nothing} = nothing
    description::Union{String, Nothing} = nothing
    expansion::Union{AbstractValueSet_Expansion, Nothing} = nothing
    experimental::Union{Bool, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    immutable::Union{Bool, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    jurisdiction::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    language::Union{String, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    publisher::Union{String, Nothing} = nothing
    purpose::Union{String, Nothing} = nothing
    resourceType::String = "ValueSet"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
    title::Union{String, Nothing} = nothing
    url::Union{String, Nothing} = nothing
    useContext::Vector{AbstractUsageContext} = AbstractUsageContext[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet} = true



Base.@kwdef mutable struct ValueSet_Compose <: AbstractValueSet_Compose
    _inactive::Union{AbstractElement, Nothing} = nothing
    _lockedDate::Union{AbstractElement, Nothing} = nothing
    exclude::Vector{AbstractValueSet_Include} = AbstractValueSet_Include[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    inactive::Union{Bool, Nothing} = nothing
    include::Vector{AbstractValueSet_Include} = AbstractValueSet_Include[]
    lockedDate::Union{Date, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Compose} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Compose} = true



Base.@kwdef mutable struct ValueSet_Include <: AbstractValueSet_Include
    _system::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    concept::Vector{AbstractValueSet_Concept} = AbstractValueSet_Concept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    filter::Vector{AbstractValueSet_Filter} = AbstractValueSet_Filter[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    system::Union{String, Nothing} = nothing
    valueSet::Vector{String} = String[]
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Include} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Include} = true



Base.@kwdef mutable struct ValueSet_Concept <: AbstractValueSet_Concept
    _code::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    designation::Vector{AbstractValueSet_Designation} = AbstractValueSet_Designation[]
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Concept} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Concept} = true



Base.@kwdef mutable struct ValueSet_Designation <: AbstractValueSet_Designation
    _language::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    use::Union{AbstractCoding, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Designation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Designation} = true



Base.@kwdef mutable struct ValueSet_Filter <: AbstractValueSet_Filter
    _op::Union{AbstractElement, Nothing} = nothing
    _property::Union{AbstractElement, Nothing} = nothing
    _value::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    op::Union{String, Nothing} = nothing
    property::Union{String, Nothing} = nothing
    value::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Filter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Filter} = true



Base.@kwdef mutable struct ValueSet_Expansion <: AbstractValueSet_Expansion
    _identifier::Union{AbstractElement, Nothing} = nothing
    _offset::Union{AbstractElement, Nothing} = nothing
    _timestamp::Union{AbstractElement, Nothing} = nothing
    _total::Union{AbstractElement, Nothing} = nothing
    contains::Vector{AbstractValueSet_Contains} = AbstractValueSet_Contains[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    offset::Union{SafeInt32, Nothing} = nothing
    parameter::Vector{AbstractValueSet_Parameter} = AbstractValueSet_Parameter[]
    timestamp::Union{FHIRDateTime, Nothing} = nothing
    total::Union{SafeInt32, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Expansion} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Expansion} = true



Base.@kwdef mutable struct ValueSet_Parameter <: AbstractValueSet_Parameter
    _name::Union{AbstractElement, Nothing} = nothing
    _valueBoolean::Union{AbstractElement, Nothing} = nothing
    _valueCode::Union{AbstractElement, Nothing} = nothing
    _valueDateTime::Union{AbstractElement, Nothing} = nothing
    _valueDecimal::Union{AbstractElement, Nothing} = nothing
    _valueInteger::Union{AbstractElement, Nothing} = nothing
    _valueString::Union{AbstractElement, Nothing} = nothing
    _valueUri::Union{AbstractElement, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    name::Union{String, Nothing} = nothing
    valueBoolean::Union{Bool, Nothing} = nothing
    valueCode::Union{String, Nothing} = nothing
    valueDateTime::Union{String, Nothing} = nothing
    valueDecimal::Union{FHIRNumber, Nothing} = nothing
    valueInteger::Union{FHIRInt32, Nothing} = nothing
    valueString::Union{String, Nothing} = nothing
    valueUri::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Parameter} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Parameter} = true



Base.@kwdef mutable struct ValueSet_Contains <: AbstractValueSet_Contains
    _abstract::Union{AbstractElement, Nothing} = nothing
    _code::Union{AbstractElement, Nothing} = nothing
    _display::Union{AbstractElement, Nothing} = nothing
    _inactive::Union{AbstractElement, Nothing} = nothing
    _system::Union{AbstractElement, Nothing} = nothing
    _version::Union{AbstractElement, Nothing} = nothing
    abstract::Union{Bool, Nothing} = nothing
    code::Union{String, Nothing} = nothing
    contains::Vector{AbstractValueSet_Contains} = AbstractValueSet_Contains[]
    designation::Vector{AbstractValueSet_Designation} = AbstractValueSet_Designation[]
    display::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    inactive::Union{Bool, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    system::Union{String, Nothing} = nothing
    version::Union{String, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: ValueSet_Contains} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: ValueSet_Contains} = true



Base.@kwdef mutable struct VerificationResult <: AbstractVerificationResult
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _lastPerformed::Union{AbstractElement, Nothing} = nothing
    _nextScheduled::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    _statusDate::Union{AbstractElement, Nothing} = nothing
    _targetLocation::Vector{AbstractElement} = AbstractElement[]
    attestation::Union{AbstractVerificationResult_Attestation, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    failureAction::Union{AbstractCodeableConcept, Nothing} = nothing
    frequency::Union{AbstractTiming, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lastPerformed::Union{FHIRDateTime, Nothing} = nothing
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    need::Union{AbstractCodeableConcept, Nothing} = nothing
    nextScheduled::Union{Date, Nothing} = nothing
    primarySource::Vector{AbstractVerificationResult_PrimarySource} = AbstractVerificationResult_PrimarySource[]
    resourceType::String = "VerificationResult"
    status::Union{String, Nothing} = nothing
    statusDate::Union{FHIRDateTime, Nothing} = nothing
    target::Vector{AbstractReference} = AbstractReference[]
    targetLocation::Vector{String} = String[]
    text::Union{AbstractNarrative, Nothing} = nothing
    validationProcess::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    validationType::Union{AbstractCodeableConcept, Nothing} = nothing
    validator::Vector{AbstractVerificationResult_Validator} = AbstractVerificationResult_Validator[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: VerificationResult} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VerificationResult} = true



Base.@kwdef mutable struct VerificationResult_PrimarySource <: AbstractVerificationResult_PrimarySource
    _validationDate::Union{AbstractElement, Nothing} = nothing
    canPushUpdates::Union{AbstractCodeableConcept, Nothing} = nothing
    communicationMethod::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    pushTypeAvailable::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    type::Vector{AbstractCodeableConcept} = AbstractCodeableConcept[]
    validationDate::Union{FHIRDateTime, Nothing} = nothing
    validationStatus::Union{AbstractCodeableConcept, Nothing} = nothing
    who::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: VerificationResult_PrimarySource} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VerificationResult_PrimarySource} = true



Base.@kwdef mutable struct VerificationResult_Attestation <: AbstractVerificationResult_Attestation
    _date::Union{AbstractElement, Nothing} = nothing
    _proxyIdentityCertificate::Union{AbstractElement, Nothing} = nothing
    _sourceIdentityCertificate::Union{AbstractElement, Nothing} = nothing
    communicationMethod::Union{AbstractCodeableConcept, Nothing} = nothing
    date::Union{Date, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    onBehalfOf::Union{AbstractReference, Nothing} = nothing
    proxyIdentityCertificate::Union{String, Nothing} = nothing
    proxySignature::Union{AbstractSignature, Nothing} = nothing
    sourceIdentityCertificate::Union{String, Nothing} = nothing
    sourceSignature::Union{AbstractSignature, Nothing} = nothing
    who::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: VerificationResult_Attestation} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VerificationResult_Attestation} = true



Base.@kwdef mutable struct VerificationResult_Validator <: AbstractVerificationResult_Validator
    _identityCertificate::Union{AbstractElement, Nothing} = nothing
    attestationSignature::Union{AbstractSignature, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identityCertificate::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    organization::Union{AbstractReference, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: VerificationResult_Validator} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VerificationResult_Validator} = true



Base.@kwdef mutable struct VisionPrescription <: AbstractVisionPrescription
    _created::Union{AbstractElement, Nothing} = nothing
    _dateWritten::Union{AbstractElement, Nothing} = nothing
    _implicitRules::Union{AbstractElement, Nothing} = nothing
    _language::Union{AbstractElement, Nothing} = nothing
    _status::Union{AbstractElement, Nothing} = nothing
    contained::Vector{ResourceList} = ResourceList[]
    created::Union{FHIRDateTime, Nothing} = nothing
    dateWritten::Union{FHIRDateTime, Nothing} = nothing
    encounter::Union{AbstractReference, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    identifier::Vector{AbstractIdentifier} = AbstractIdentifier[]
    implicitRules::Union{String, Nothing} = nothing
    language::Union{String, Nothing} = nothing
    lensSpecification::Vector{AbstractVisionPrescription_LensSpecification} = AbstractVisionPrescription_LensSpecification[]
    meta::Union{AbstractMeta, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    patient::Union{AbstractReference, Nothing} = nothing
    prescriber::Union{AbstractReference, Nothing} = nothing
    resourceType::String = "VisionPrescription"
    status::Union{String, Nothing} = nothing
    text::Union{AbstractNarrative, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: VisionPrescription} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VisionPrescription} = true



Base.@kwdef mutable struct VisionPrescription_LensSpecification <: AbstractVisionPrescription_LensSpecification
    _add::Union{AbstractElement, Nothing} = nothing
    _axis::Union{AbstractElement, Nothing} = nothing
    _backCurve::Union{AbstractElement, Nothing} = nothing
    _brand::Union{AbstractElement, Nothing} = nothing
    _color::Union{AbstractElement, Nothing} = nothing
    _cylinder::Union{AbstractElement, Nothing} = nothing
    _diameter::Union{AbstractElement, Nothing} = nothing
    _eye::Union{AbstractElement, Nothing} = nothing
    _power::Union{AbstractElement, Nothing} = nothing
    _sphere::Union{AbstractElement, Nothing} = nothing
    add::Union{FHIRNumber, Nothing} = nothing
    axis::Union{SafeInt32, Nothing} = nothing
    backCurve::Union{FHIRNumber, Nothing} = nothing
    brand::Union{String, Nothing} = nothing
    color::Union{String, Nothing} = nothing
    cylinder::Union{FHIRNumber, Nothing} = nothing
    diameter::Union{FHIRNumber, Nothing} = nothing
    duration::Union{AbstractQuantity, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    eye::Union{String, Nothing} = nothing
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
    note::Vector{AbstractAnnotation} = AbstractAnnotation[]
    power::Union{FHIRNumber, Nothing} = nothing
    prism::Vector{AbstractVisionPrescription_Prism} = AbstractVisionPrescription_Prism[]
    product::Union{AbstractCodeableConcept, Nothing} = nothing
    sphere::Union{FHIRNumber, Nothing} = nothing
end
@inline StructTypes.StructType(::Type{T}) where {T <: VisionPrescription_LensSpecification} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VisionPrescription_LensSpecification} = true



Base.@kwdef mutable struct VisionPrescription_Prism <: AbstractVisionPrescription_Prism
    _amount::Union{AbstractElement, Nothing} = nothing
    _base::Union{AbstractElement, Nothing} = nothing
    amount::Union{FHIRNumber, Nothing} = nothing
    base::Union{String, Nothing} = nothing
    extension::Vector{AbstractExtension} = AbstractExtension[]
    id::Union{String, Nothing} = nothing
    modifierExtension::Vector{AbstractExtension} = AbstractExtension[]
end
@inline StructTypes.StructType(::Type{T}) where {T <: VisionPrescription_Prism} = StructTypes.Mutable()
# @inline StructTypes.omitempties(::Type{T}) where {T <: VisionPrescription_Prism} = true

StructTypes.subtypes(::Type{T}) where {T <: AbstractElement} = (Element=Element,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExtension} = (Extension=Extension,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNarrative} = (Narrative=Narrative,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAnnotation} = (Annotation=Annotation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAttachment} = (Attachment=Attachment,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractIdentifier} = (Identifier=Identifier,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeableConcept} = (CodeableConcept=CodeableConcept,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoding} = (Coding=Coding,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuantity} = (Quantity=Quantity,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDuration} = (Duration=Duration,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDistance} = (Distance=Distance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCount} = (Count=Count,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMoney} = (Money=Money,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAge} = (Age=Age,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRange} = (Range=Range,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPeriod} = (Period=Period,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRatio} = (Ratio=Ratio,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractReference} = (Reference=Reference,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSampledData} = (SampledData=SampledData,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSignature} = (Signature=Signature,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractHumanName} = (HumanName=HumanName,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAddress} = (Address=Address,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContactPoint} = (ContactPoint=ContactPoint,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTiming} = (Timing=Timing,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTiming_Repeat} = (Timing_Repeat=Timing_Repeat,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeta} = (Meta=Meta,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContactDetail} = (ContactDetail=ContactDetail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContributor} = (Contributor=Contributor,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDataRequirement} = (DataRequirement=DataRequirement,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDataRequirement_CodeFilter} = (DataRequirement_CodeFilter=DataRequirement_CodeFilter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDataRequirement_DateFilter} = (DataRequirement_DateFilter=DataRequirement_DateFilter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDataRequirement_Sort} = (DataRequirement_Sort=DataRequirement_Sort,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractParameterDefinition} = (ParameterDefinition=ParameterDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRelatedArtifact} = (RelatedArtifact=RelatedArtifact,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTriggerDefinition} = (TriggerDefinition=TriggerDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractUsageContext} = (UsageContext=UsageContext,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDosage} = (Dosage=Dosage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDosage_DoseAndRate} = (Dosage_DoseAndRate=Dosage_DoseAndRate,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPopulation} = (Population=Population,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProductShelfLife} = (ProductShelfLife=ProductShelfLife,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProdCharacteristic} = (ProdCharacteristic=ProdCharacteristic,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMarketingStatus} = (MarketingStatus=MarketingStatus,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceAmount} = (SubstanceAmount=SubstanceAmount,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceAmount_ReferenceRange} = (SubstanceAmount_ReferenceRange=SubstanceAmount_ReferenceRange,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExpression} = (Expression=Expression,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition} = (ElementDefinition=ElementDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Slicing} = (ElementDefinition_Slicing=ElementDefinition_Slicing,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Discriminator} = (ElementDefinition_Discriminator=ElementDefinition_Discriminator,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Base} = (ElementDefinition_Base=ElementDefinition_Base,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Type} = (ElementDefinition_Type=ElementDefinition_Type,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Example} = (ElementDefinition_Example=ElementDefinition_Example,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Constraint} = (ElementDefinition_Constraint=ElementDefinition_Constraint,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Binding} = (ElementDefinition_Binding=ElementDefinition_Binding,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractElementDefinition_Mapping} = (ElementDefinition_Mapping=ElementDefinition_Mapping,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAccount} = (Account=Account,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAccount_Coverage} = (Account_Coverage=Account_Coverage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAccount_Guarantor} = (Account_Guarantor=Account_Guarantor,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractActivityDefinition} = (ActivityDefinition=ActivityDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractActivityDefinition_Participant} = (ActivityDefinition_Participant=ActivityDefinition_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractActivityDefinition_DynamicValue} = (ActivityDefinition_DynamicValue=ActivityDefinition_DynamicValue,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAdverseEvent} = (AdverseEvent=AdverseEvent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAdverseEvent_SuspectEntity} = (AdverseEvent_SuspectEntity=AdverseEvent_SuspectEntity,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAdverseEvent_Causality} = (AdverseEvent_Causality=AdverseEvent_Causality,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAllergyIntolerance} = (AllergyIntolerance=AllergyIntolerance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAllergyIntolerance_Reaction} = (AllergyIntolerance_Reaction=AllergyIntolerance_Reaction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAppointment} = (Appointment=Appointment,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAppointment_Participant} = (Appointment_Participant=Appointment_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAppointmentResponse} = (AppointmentResponse=AppointmentResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAuditEvent} = (AuditEvent=AuditEvent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAuditEvent_Agent} = (AuditEvent_Agent=AuditEvent_Agent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAuditEvent_Network} = (AuditEvent_Network=AuditEvent_Network,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAuditEvent_Source} = (AuditEvent_Source=AuditEvent_Source,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAuditEvent_Entity} = (AuditEvent_Entity=AuditEvent_Entity,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractAuditEvent_Detail} = (AuditEvent_Detail=AuditEvent_Detail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBasic} = (Basic=Basic,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBinary} = (Binary=Binary,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct} = (BiologicallyDerivedProduct=BiologicallyDerivedProduct,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Collection} = (BiologicallyDerivedProduct_Collection=BiologicallyDerivedProduct_Collection,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Processing} = (BiologicallyDerivedProduct_Processing=BiologicallyDerivedProduct_Processing,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Manipulation} = (BiologicallyDerivedProduct_Manipulation=BiologicallyDerivedProduct_Manipulation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBiologicallyDerivedProduct_Storage} = (BiologicallyDerivedProduct_Storage=BiologicallyDerivedProduct_Storage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBodyStructure} = (BodyStructure=BodyStructure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBundle} = (Bundle=Bundle,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBundle_Link} = (Bundle_Link=Bundle_Link,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBundle_Entry} = (Bundle_Entry=Bundle_Entry,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBundle_Search} = (Bundle_Search=Bundle_Search,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBundle_Request} = (Bundle_Request=Bundle_Request,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractBundle_Response} = (Bundle_Response=Bundle_Response,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement} = (CapabilityStatement=CapabilityStatement,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Software} = (CapabilityStatement_Software=CapabilityStatement_Software,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Implementation} = (CapabilityStatement_Implementation=CapabilityStatement_Implementation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Rest} = (CapabilityStatement_Rest=CapabilityStatement_Rest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Security} = (CapabilityStatement_Security=CapabilityStatement_Security,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Resource} = (CapabilityStatement_Resource=CapabilityStatement_Resource,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Interaction} = (CapabilityStatement_Interaction=CapabilityStatement_Interaction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_SearchParam} = (CapabilityStatement_SearchParam=CapabilityStatement_SearchParam,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Operation} = (CapabilityStatement_Operation=CapabilityStatement_Operation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Interaction1} = (CapabilityStatement_Interaction1=CapabilityStatement_Interaction1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Messaging} = (CapabilityStatement_Messaging=CapabilityStatement_Messaging,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Endpoint} = (CapabilityStatement_Endpoint=CapabilityStatement_Endpoint,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_SupportedMessage} = (CapabilityStatement_SupportedMessage=CapabilityStatement_SupportedMessage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCapabilityStatement_Document} = (CapabilityStatement_Document=CapabilityStatement_Document,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCarePlan} = (CarePlan=CarePlan,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCarePlan_Activity} = (CarePlan_Activity=CarePlan_Activity,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCarePlan_Detail} = (CarePlan_Detail=CarePlan_Detail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCareTeam} = (CareTeam=CareTeam,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCareTeam_Participant} = (CareTeam_Participant=CareTeam_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCatalogEntry} = (CatalogEntry=CatalogEntry,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCatalogEntry_RelatedEntry} = (CatalogEntry_RelatedEntry=CatalogEntry_RelatedEntry,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractChargeItem} = (ChargeItem=ChargeItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractChargeItem_Performer} = (ChargeItem_Performer=ChargeItem_Performer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractChargeItemDefinition} = (ChargeItemDefinition=ChargeItemDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractChargeItemDefinition_Applicability} = (ChargeItemDefinition_Applicability=ChargeItemDefinition_Applicability,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractChargeItemDefinition_PropertyGroup} = (ChargeItemDefinition_PropertyGroup=ChargeItemDefinition_PropertyGroup,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractChargeItemDefinition_PriceComponent} = (ChargeItemDefinition_PriceComponent=ChargeItemDefinition_PriceComponent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim} = (Claim=Claim,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Related} = (Claim_Related=Claim_Related,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Payee} = (Claim_Payee=Claim_Payee,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_CareTeam} = (Claim_CareTeam=Claim_CareTeam,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_SupportingInfo} = (Claim_SupportingInfo=Claim_SupportingInfo,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Diagnosis} = (Claim_Diagnosis=Claim_Diagnosis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Procedure} = (Claim_Procedure=Claim_Procedure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Insurance} = (Claim_Insurance=Claim_Insurance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Accident} = (Claim_Accident=Claim_Accident,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Item} = (Claim_Item=Claim_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_Detail} = (Claim_Detail=Claim_Detail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaim_SubDetail} = (Claim_SubDetail=Claim_SubDetail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse} = (ClaimResponse=ClaimResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Item} = (ClaimResponse_Item=ClaimResponse_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Adjudication} = (ClaimResponse_Adjudication=ClaimResponse_Adjudication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Detail} = (ClaimResponse_Detail=ClaimResponse_Detail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_SubDetail} = (ClaimResponse_SubDetail=ClaimResponse_SubDetail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_AddItem} = (ClaimResponse_AddItem=ClaimResponse_AddItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Detail1} = (ClaimResponse_Detail1=ClaimResponse_Detail1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_SubDetail1} = (ClaimResponse_SubDetail1=ClaimResponse_SubDetail1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Total} = (ClaimResponse_Total=ClaimResponse_Total,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Payment} = (ClaimResponse_Payment=ClaimResponse_Payment,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_ProcessNote} = (ClaimResponse_ProcessNote=ClaimResponse_ProcessNote,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Insurance} = (ClaimResponse_Insurance=ClaimResponse_Insurance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClaimResponse_Error} = (ClaimResponse_Error=ClaimResponse_Error,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClinicalImpression} = (ClinicalImpression=ClinicalImpression,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClinicalImpression_Investigation} = (ClinicalImpression_Investigation=ClinicalImpression_Investigation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractClinicalImpression_Finding} = (ClinicalImpression_Finding=ClinicalImpression_Finding,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeSystem} = (CodeSystem=CodeSystem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeSystem_Filter} = (CodeSystem_Filter=CodeSystem_Filter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeSystem_Property} = (CodeSystem_Property=CodeSystem_Property,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeSystem_Concept} = (CodeSystem_Concept=CodeSystem_Concept,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeSystem_Designation} = (CodeSystem_Designation=CodeSystem_Designation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCodeSystem_Property1} = (CodeSystem_Property1=CodeSystem_Property1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCommunication} = (Communication=Communication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCommunication_Payload} = (Communication_Payload=Communication_Payload,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCommunicationRequest} = (CommunicationRequest=CommunicationRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCommunicationRequest_Payload} = (CommunicationRequest_Payload=CommunicationRequest_Payload,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCompartmentDefinition} = (CompartmentDefinition=CompartmentDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCompartmentDefinition_Resource} = (CompartmentDefinition_Resource=CompartmentDefinition_Resource,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractComposition} = (Composition=Composition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractComposition_Attester} = (Composition_Attester=Composition_Attester,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractComposition_RelatesTo} = (Composition_RelatesTo=Composition_RelatesTo,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractComposition_Event} = (Composition_Event=Composition_Event,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractComposition_Section} = (Composition_Section=Composition_Section,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConceptMap} = (ConceptMap=ConceptMap,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConceptMap_Group} = (ConceptMap_Group=ConceptMap_Group,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConceptMap_Element} = (ConceptMap_Element=ConceptMap_Element,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConceptMap_Target} = (ConceptMap_Target=ConceptMap_Target,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConceptMap_DependsOn} = (ConceptMap_DependsOn=ConceptMap_DependsOn,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConceptMap_Unmapped} = (ConceptMap_Unmapped=ConceptMap_Unmapped,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCondition} = (Condition=Condition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCondition_Stage} = (Condition_Stage=Condition_Stage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCondition_Evidence} = (Condition_Evidence=Condition_Evidence,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConsent} = (Consent=Consent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConsent_Policy} = (Consent_Policy=Consent_Policy,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConsent_Verification} = (Consent_Verification=Consent_Verification,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConsent_Provision} = (Consent_Provision=Consent_Provision,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConsent_Actor} = (Consent_Actor=Consent_Actor,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractConsent_Data} = (Consent_Data=Consent_Data,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract} = (Contract=Contract,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_ContentDefinition} = (Contract_ContentDefinition=Contract_ContentDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Term} = (Contract_Term=Contract_Term,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_SecurityLabel} = (Contract_SecurityLabel=Contract_SecurityLabel,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Offer} = (Contract_Offer=Contract_Offer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Party} = (Contract_Party=Contract_Party,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Answer} = (Contract_Answer=Contract_Answer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Asset} = (Contract_Asset=Contract_Asset,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Context} = (Contract_Context=Contract_Context,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_ValuedItem} = (Contract_ValuedItem=Contract_ValuedItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Action} = (Contract_Action=Contract_Action,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Subject} = (Contract_Subject=Contract_Subject,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Signer} = (Contract_Signer=Contract_Signer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Friendly} = (Contract_Friendly=Contract_Friendly,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Legal} = (Contract_Legal=Contract_Legal,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractContract_Rule} = (Contract_Rule=Contract_Rule,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverage} = (Coverage=Coverage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverage_Class} = (Coverage_Class=Coverage_Class,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverage_CostToBeneficiary} = (Coverage_CostToBeneficiary=Coverage_CostToBeneficiary,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverage_Exception} = (Coverage_Exception=Coverage_Exception,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityRequest} = (CoverageEligibilityRequest=CoverageEligibilityRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_SupportingInfo} = (CoverageEligibilityRequest_SupportingInfo=CoverageEligibilityRequest_SupportingInfo,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_Insurance} = (CoverageEligibilityRequest_Insurance=CoverageEligibilityRequest_Insurance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_Item} = (CoverageEligibilityRequest_Item=CoverageEligibilityRequest_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityRequest_Diagnosis} = (CoverageEligibilityRequest_Diagnosis=CoverageEligibilityRequest_Diagnosis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityResponse} = (CoverageEligibilityResponse=CoverageEligibilityResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Insurance} = (CoverageEligibilityResponse_Insurance=CoverageEligibilityResponse_Insurance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Item} = (CoverageEligibilityResponse_Item=CoverageEligibilityResponse_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Benefit} = (CoverageEligibilityResponse_Benefit=CoverageEligibilityResponse_Benefit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractCoverageEligibilityResponse_Error} = (CoverageEligibilityResponse_Error=CoverageEligibilityResponse_Error,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDetectedIssue} = (DetectedIssue=DetectedIssue,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDetectedIssue_Evidence} = (DetectedIssue_Evidence=DetectedIssue_Evidence,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDetectedIssue_Mitigation} = (DetectedIssue_Mitigation=DetectedIssue_Mitigation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDevice} = (Device=Device,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDevice_UdiCarrier} = (Device_UdiCarrier=Device_UdiCarrier,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDevice_DeviceName} = (Device_DeviceName=Device_DeviceName,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDevice_Specialization} = (Device_Specialization=Device_Specialization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDevice_Version} = (Device_Version=Device_Version,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDevice_Property} = (Device_Property=Device_Property,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition} = (DeviceDefinition=DeviceDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition_UdiDeviceIdentifier} = (DeviceDefinition_UdiDeviceIdentifier=DeviceDefinition_UdiDeviceIdentifier,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition_DeviceName} = (DeviceDefinition_DeviceName=DeviceDefinition_DeviceName,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition_Specialization} = (DeviceDefinition_Specialization=DeviceDefinition_Specialization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition_Capability} = (DeviceDefinition_Capability=DeviceDefinition_Capability,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition_Property} = (DeviceDefinition_Property=DeviceDefinition_Property,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceDefinition_Material} = (DeviceDefinition_Material=DeviceDefinition_Material,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceMetric} = (DeviceMetric=DeviceMetric,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceMetric_Calibration} = (DeviceMetric_Calibration=DeviceMetric_Calibration,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceRequest} = (DeviceRequest=DeviceRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceRequest_Parameter} = (DeviceRequest_Parameter=DeviceRequest_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDeviceUseStatement} = (DeviceUseStatement=DeviceUseStatement,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDiagnosticReport} = (DiagnosticReport=DiagnosticReport,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDiagnosticReport_Media} = (DiagnosticReport_Media=DiagnosticReport_Media,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDocumentManifest} = (DocumentManifest=DocumentManifest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDocumentManifest_Related} = (DocumentManifest_Related=DocumentManifest_Related,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDocumentReference} = (DocumentReference=DocumentReference,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDocumentReference_RelatesTo} = (DocumentReference_RelatesTo=DocumentReference_RelatesTo,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDocumentReference_Content} = (DocumentReference_Content=DocumentReference_Content,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractDocumentReference_Context} = (DocumentReference_Context=DocumentReference_Context,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis} = (EffectEvidenceSynthesis=EffectEvidenceSynthesis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_SampleSize} = (EffectEvidenceSynthesis_SampleSize=EffectEvidenceSynthesis_SampleSize,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_ResultsByExposure} = (EffectEvidenceSynthesis_ResultsByExposure=EffectEvidenceSynthesis_ResultsByExposure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_EffectEstimate} = (EffectEvidenceSynthesis_EffectEstimate=EffectEvidenceSynthesis_EffectEstimate,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_PrecisionEstimate} = (EffectEvidenceSynthesis_PrecisionEstimate=EffectEvidenceSynthesis_PrecisionEstimate,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_Certainty} = (EffectEvidenceSynthesis_Certainty=EffectEvidenceSynthesis_Certainty,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEffectEvidenceSynthesis_CertaintySubcomponent} = (EffectEvidenceSynthesis_CertaintySubcomponent=EffectEvidenceSynthesis_CertaintySubcomponent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter} = (Encounter=Encounter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter_StatusHistory} = (Encounter_StatusHistory=Encounter_StatusHistory,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter_ClassHistory} = (Encounter_ClassHistory=Encounter_ClassHistory,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter_Participant} = (Encounter_Participant=Encounter_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter_Diagnosis} = (Encounter_Diagnosis=Encounter_Diagnosis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter_Hospitalization} = (Encounter_Hospitalization=Encounter_Hospitalization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEncounter_Location} = (Encounter_Location=Encounter_Location,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEndpoint} = (Endpoint=Endpoint,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEnrollmentRequest} = (EnrollmentRequest=EnrollmentRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEnrollmentResponse} = (EnrollmentResponse=EnrollmentResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEpisodeOfCare} = (EpisodeOfCare=EpisodeOfCare,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEpisodeOfCare_StatusHistory} = (EpisodeOfCare_StatusHistory=EpisodeOfCare_StatusHistory,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEpisodeOfCare_Diagnosis} = (EpisodeOfCare_Diagnosis=EpisodeOfCare_Diagnosis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEventDefinition} = (EventDefinition=EventDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEvidence} = (Evidence=Evidence,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEvidenceVariable} = (EvidenceVariable=EvidenceVariable,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractEvidenceVariable_Characteristic} = (EvidenceVariable_Characteristic=EvidenceVariable_Characteristic,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario} = (ExampleScenario=ExampleScenario,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Actor} = (ExampleScenario_Actor=ExampleScenario_Actor,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Instance} = (ExampleScenario_Instance=ExampleScenario_Instance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Version} = (ExampleScenario_Version=ExampleScenario_Version,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_ContainedInstance} = (ExampleScenario_ContainedInstance=ExampleScenario_ContainedInstance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Process} = (ExampleScenario_Process=ExampleScenario_Process,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Step} = (ExampleScenario_Step=ExampleScenario_Step,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Operation} = (ExampleScenario_Operation=ExampleScenario_Operation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExampleScenario_Alternative} = (ExampleScenario_Alternative=ExampleScenario_Alternative,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit} = (ExplanationOfBenefit=ExplanationOfBenefit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Related} = (ExplanationOfBenefit_Related=ExplanationOfBenefit_Related,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Payee} = (ExplanationOfBenefit_Payee=ExplanationOfBenefit_Payee,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_CareTeam} = (ExplanationOfBenefit_CareTeam=ExplanationOfBenefit_CareTeam,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_SupportingInfo} = (ExplanationOfBenefit_SupportingInfo=ExplanationOfBenefit_SupportingInfo,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Diagnosis} = (ExplanationOfBenefit_Diagnosis=ExplanationOfBenefit_Diagnosis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Procedure} = (ExplanationOfBenefit_Procedure=ExplanationOfBenefit_Procedure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Insurance} = (ExplanationOfBenefit_Insurance=ExplanationOfBenefit_Insurance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Accident} = (ExplanationOfBenefit_Accident=ExplanationOfBenefit_Accident,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Item} = (ExplanationOfBenefit_Item=ExplanationOfBenefit_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Adjudication} = (ExplanationOfBenefit_Adjudication=ExplanationOfBenefit_Adjudication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Detail} = (ExplanationOfBenefit_Detail=ExplanationOfBenefit_Detail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_SubDetail} = (ExplanationOfBenefit_SubDetail=ExplanationOfBenefit_SubDetail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_AddItem} = (ExplanationOfBenefit_AddItem=ExplanationOfBenefit_AddItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Detail1} = (ExplanationOfBenefit_Detail1=ExplanationOfBenefit_Detail1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_SubDetail1} = (ExplanationOfBenefit_SubDetail1=ExplanationOfBenefit_SubDetail1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Total} = (ExplanationOfBenefit_Total=ExplanationOfBenefit_Total,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Payment} = (ExplanationOfBenefit_Payment=ExplanationOfBenefit_Payment,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_ProcessNote} = (ExplanationOfBenefit_ProcessNote=ExplanationOfBenefit_ProcessNote,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_BenefitBalance} = (ExplanationOfBenefit_BenefitBalance=ExplanationOfBenefit_BenefitBalance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractExplanationOfBenefit_Financial} = (ExplanationOfBenefit_Financial=ExplanationOfBenefit_Financial,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractFamilyMemberHistory} = (FamilyMemberHistory=FamilyMemberHistory,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractFamilyMemberHistory_Condition} = (FamilyMemberHistory_Condition=FamilyMemberHistory_Condition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractFlag} = (Flag=Flag,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGoal} = (Goal=Goal,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGoal_Target} = (Goal_Target=Goal_Target,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGraphDefinition} = (GraphDefinition=GraphDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGraphDefinition_Link} = (GraphDefinition_Link=GraphDefinition_Link,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGraphDefinition_Target} = (GraphDefinition_Target=GraphDefinition_Target,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGraphDefinition_Compartment} = (GraphDefinition_Compartment=GraphDefinition_Compartment,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGroup} = (Group=Group,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGroup_Characteristic} = (Group_Characteristic=Group_Characteristic,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGroup_Member} = (Group_Member=Group_Member,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractGuidanceResponse} = (GuidanceResponse=GuidanceResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractHealthcareService} = (HealthcareService=HealthcareService,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractHealthcareService_Eligibility} = (HealthcareService_Eligibility=HealthcareService_Eligibility,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractHealthcareService_AvailableTime} = (HealthcareService_AvailableTime=HealthcareService_AvailableTime,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractHealthcareService_NotAvailable} = (HealthcareService_NotAvailable=HealthcareService_NotAvailable,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImagingStudy} = (ImagingStudy=ImagingStudy,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImagingStudy_Series} = (ImagingStudy_Series=ImagingStudy_Series,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImagingStudy_Performer} = (ImagingStudy_Performer=ImagingStudy_Performer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImagingStudy_Instance} = (ImagingStudy_Instance=ImagingStudy_Instance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunization} = (Immunization=Immunization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunization_Performer} = (Immunization_Performer=Immunization_Performer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunization_Education} = (Immunization_Education=Immunization_Education,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunization_Reaction} = (Immunization_Reaction=Immunization_Reaction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunization_ProtocolApplied} = (Immunization_ProtocolApplied=Immunization_ProtocolApplied,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunizationEvaluation} = (ImmunizationEvaluation=ImmunizationEvaluation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunizationRecommendation} = (ImmunizationRecommendation=ImmunizationRecommendation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunizationRecommendation_Recommendation} = (ImmunizationRecommendation_Recommendation=ImmunizationRecommendation_Recommendation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImmunizationRecommendation_DateCriterion} = (ImmunizationRecommendation_DateCriterion=ImmunizationRecommendation_DateCriterion,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide} = (ImplementationGuide=ImplementationGuide,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_DependsOn} = (ImplementationGuide_DependsOn=ImplementationGuide_DependsOn,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Global} = (ImplementationGuide_Global=ImplementationGuide_Global,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Definition} = (ImplementationGuide_Definition=ImplementationGuide_Definition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Grouping} = (ImplementationGuide_Grouping=ImplementationGuide_Grouping,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Resource} = (ImplementationGuide_Resource=ImplementationGuide_Resource,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Page} = (ImplementationGuide_Page=ImplementationGuide_Page,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Parameter} = (ImplementationGuide_Parameter=ImplementationGuide_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Template} = (ImplementationGuide_Template=ImplementationGuide_Template,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Manifest} = (ImplementationGuide_Manifest=ImplementationGuide_Manifest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Resource1} = (ImplementationGuide_Resource1=ImplementationGuide_Resource1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractImplementationGuide_Page1} = (ImplementationGuide_Page1=ImplementationGuide_Page1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan} = (InsurancePlan=InsurancePlan,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Contact} = (InsurancePlan_Contact=InsurancePlan_Contact,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Coverage} = (InsurancePlan_Coverage=InsurancePlan_Coverage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Benefit} = (InsurancePlan_Benefit=InsurancePlan_Benefit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Limit} = (InsurancePlan_Limit=InsurancePlan_Limit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Plan} = (InsurancePlan_Plan=InsurancePlan_Plan,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_GeneralCost} = (InsurancePlan_GeneralCost=InsurancePlan_GeneralCost,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_SpecificCost} = (InsurancePlan_SpecificCost=InsurancePlan_SpecificCost,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Benefit1} = (InsurancePlan_Benefit1=InsurancePlan_Benefit1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInsurancePlan_Cost} = (InsurancePlan_Cost=InsurancePlan_Cost,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInvoice} = (Invoice=Invoice,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInvoice_Participant} = (Invoice_Participant=Invoice_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInvoice_LineItem} = (Invoice_LineItem=Invoice_LineItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractInvoice_PriceComponent} = (Invoice_PriceComponent=Invoice_PriceComponent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractLibrary} = (Library=Library,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractLinkage} = (Linkage=Linkage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractLinkage_Item} = (Linkage_Item=Linkage_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractList} = (List=List,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractList_Entry} = (List_Entry=List_Entry,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractLocation} = (Location=Location,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractLocation_Position} = (Location_Position=Location_Position,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractLocation_HoursOfOperation} = (Location_HoursOfOperation=Location_HoursOfOperation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasure} = (Measure=Measure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasure_Group} = (Measure_Group=Measure_Group,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasure_Population} = (Measure_Population=Measure_Population,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasure_Stratifier} = (Measure_Stratifier=Measure_Stratifier,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasure_Component} = (Measure_Component=Measure_Component,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasure_SupplementalData} = (Measure_SupplementalData=Measure_SupplementalData,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport} = (MeasureReport=MeasureReport,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport_Group} = (MeasureReport_Group=MeasureReport_Group,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport_Population} = (MeasureReport_Population=MeasureReport_Population,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport_Stratifier} = (MeasureReport_Stratifier=MeasureReport_Stratifier,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport_Stratum} = (MeasureReport_Stratum=MeasureReport_Stratum,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport_Component} = (MeasureReport_Component=MeasureReport_Component,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMeasureReport_Population1} = (MeasureReport_Population1=MeasureReport_Population1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedia} = (Media=Media,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedication} = (Medication=Medication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedication_Ingredient} = (Medication_Ingredient=Medication_Ingredient,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedication_Batch} = (Medication_Batch=Medication_Batch,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationAdministration} = (MedicationAdministration=MedicationAdministration,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationAdministration_Performer} = (MedicationAdministration_Performer=MedicationAdministration_Performer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationAdministration_Dosage} = (MedicationAdministration_Dosage=MedicationAdministration_Dosage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationDispense} = (MedicationDispense=MedicationDispense,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationDispense_Performer} = (MedicationDispense_Performer=MedicationDispense_Performer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationDispense_Substitution} = (MedicationDispense_Substitution=MedicationDispense_Substitution,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge} = (MedicationKnowledge=MedicationKnowledge,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_RelatedMedicationKnowledge} = (MedicationKnowledge_RelatedMedicationKnowledge=MedicationKnowledge_RelatedMedicationKnowledge,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Monograph} = (MedicationKnowledge_Monograph=MedicationKnowledge_Monograph,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Ingredient} = (MedicationKnowledge_Ingredient=MedicationKnowledge_Ingredient,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Cost} = (MedicationKnowledge_Cost=MedicationKnowledge_Cost,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_MonitoringProgram} = (MedicationKnowledge_MonitoringProgram=MedicationKnowledge_MonitoringProgram,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_AdministrationGuidelines} = (MedicationKnowledge_AdministrationGuidelines=MedicationKnowledge_AdministrationGuidelines,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Dosage} = (MedicationKnowledge_Dosage=MedicationKnowledge_Dosage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_PatientCharacteristics} = (MedicationKnowledge_PatientCharacteristics=MedicationKnowledge_PatientCharacteristics,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_MedicineClassification} = (MedicationKnowledge_MedicineClassification=MedicationKnowledge_MedicineClassification,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Packaging} = (MedicationKnowledge_Packaging=MedicationKnowledge_Packaging,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_DrugCharacteristic} = (MedicationKnowledge_DrugCharacteristic=MedicationKnowledge_DrugCharacteristic,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Regulatory} = (MedicationKnowledge_Regulatory=MedicationKnowledge_Regulatory,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Substitution} = (MedicationKnowledge_Substitution=MedicationKnowledge_Substitution,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Schedule} = (MedicationKnowledge_Schedule=MedicationKnowledge_Schedule,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_MaxDispense} = (MedicationKnowledge_MaxDispense=MedicationKnowledge_MaxDispense,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationKnowledge_Kinetics} = (MedicationKnowledge_Kinetics=MedicationKnowledge_Kinetics,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationRequest} = (MedicationRequest=MedicationRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationRequest_DispenseRequest} = (MedicationRequest_DispenseRequest=MedicationRequest_DispenseRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationRequest_InitialFill} = (MedicationRequest_InitialFill=MedicationRequest_InitialFill,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationRequest_Substitution} = (MedicationRequest_Substitution=MedicationRequest_Substitution,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicationStatement} = (MedicationStatement=MedicationStatement,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProduct} = (MedicinalProduct=MedicinalProduct,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProduct_Name} = (MedicinalProduct_Name=MedicinalProduct_Name,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProduct_NamePart} = (MedicinalProduct_NamePart=MedicinalProduct_NamePart,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProduct_CountryLanguage} = (MedicinalProduct_CountryLanguage=MedicinalProduct_CountryLanguage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProduct_ManufacturingBusinessOperation} = (MedicinalProduct_ManufacturingBusinessOperation=MedicinalProduct_ManufacturingBusinessOperation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProduct_SpecialDesignation} = (MedicinalProduct_SpecialDesignation=MedicinalProduct_SpecialDesignation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductAuthorization} = (MedicinalProductAuthorization=MedicinalProductAuthorization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductAuthorization_JurisdictionalAuthorization} = (MedicinalProductAuthorization_JurisdictionalAuthorization=MedicinalProductAuthorization_JurisdictionalAuthorization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductAuthorization_Procedure} = (MedicinalProductAuthorization_Procedure=MedicinalProductAuthorization_Procedure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductContraindication} = (MedicinalProductContraindication=MedicinalProductContraindication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductContraindication_OtherTherapy} = (MedicinalProductContraindication_OtherTherapy=MedicinalProductContraindication_OtherTherapy,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIndication} = (MedicinalProductIndication=MedicinalProductIndication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIndication_OtherTherapy} = (MedicinalProductIndication_OtherTherapy=MedicinalProductIndication_OtherTherapy,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIngredient} = (MedicinalProductIngredient=MedicinalProductIngredient,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIngredient_SpecifiedSubstance} = (MedicinalProductIngredient_SpecifiedSubstance=MedicinalProductIngredient_SpecifiedSubstance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIngredient_Strength} = (MedicinalProductIngredient_Strength=MedicinalProductIngredient_Strength,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIngredient_ReferenceStrength} = (MedicinalProductIngredient_ReferenceStrength=MedicinalProductIngredient_ReferenceStrength,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductIngredient_Substance} = (MedicinalProductIngredient_Substance=MedicinalProductIngredient_Substance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductInteraction} = (MedicinalProductInteraction=MedicinalProductInteraction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductInteraction_Interactant} = (MedicinalProductInteraction_Interactant=MedicinalProductInteraction_Interactant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductManufactured} = (MedicinalProductManufactured=MedicinalProductManufactured,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPackaged} = (MedicinalProductPackaged=MedicinalProductPackaged,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPackaged_BatchIdentifier} = (MedicinalProductPackaged_BatchIdentifier=MedicinalProductPackaged_BatchIdentifier,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPackaged_PackageItem} = (MedicinalProductPackaged_PackageItem=MedicinalProductPackaged_PackageItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical} = (MedicinalProductPharmaceutical=MedicinalProductPharmaceutical,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_Characteristics} = (MedicinalProductPharmaceutical_Characteristics=MedicinalProductPharmaceutical_Characteristics,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_RouteOfAdministration} = (MedicinalProductPharmaceutical_RouteOfAdministration=MedicinalProductPharmaceutical_RouteOfAdministration,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_TargetSpecies} = (MedicinalProductPharmaceutical_TargetSpecies=MedicinalProductPharmaceutical_TargetSpecies,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductPharmaceutical_WithdrawalPeriod} = (MedicinalProductPharmaceutical_WithdrawalPeriod=MedicinalProductPharmaceutical_WithdrawalPeriod,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMedicinalProductUndesirableEffect} = (MedicinalProductUndesirableEffect=MedicinalProductUndesirableEffect,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageDefinition} = (MessageDefinition=MessageDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageDefinition_Focus} = (MessageDefinition_Focus=MessageDefinition_Focus,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageDefinition_AllowedResponse} = (MessageDefinition_AllowedResponse=MessageDefinition_AllowedResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageHeader} = (MessageHeader=MessageHeader,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageHeader_Destination} = (MessageHeader_Destination=MessageHeader_Destination,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageHeader_Source} = (MessageHeader_Source=MessageHeader_Source,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMessageHeader_Response} = (MessageHeader_Response=MessageHeader_Response,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence} = (MolecularSequence=MolecularSequence,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_ReferenceSeq} = (MolecularSequence_ReferenceSeq=MolecularSequence_ReferenceSeq,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_Variant} = (MolecularSequence_Variant=MolecularSequence_Variant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_Quality} = (MolecularSequence_Quality=MolecularSequence_Quality,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_Roc} = (MolecularSequence_Roc=MolecularSequence_Roc,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_Repository} = (MolecularSequence_Repository=MolecularSequence_Repository,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_StructureVariant} = (MolecularSequence_StructureVariant=MolecularSequence_StructureVariant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_Outer} = (MolecularSequence_Outer=MolecularSequence_Outer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractMolecularSequence_Inner} = (MolecularSequence_Inner=MolecularSequence_Inner,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNamingSystem} = (NamingSystem=NamingSystem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNamingSystem_UniqueId} = (NamingSystem_UniqueId=NamingSystem_UniqueId,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder} = (NutritionOrder=NutritionOrder,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder_OralDiet} = (NutritionOrder_OralDiet=NutritionOrder_OralDiet,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder_Nutrient} = (NutritionOrder_Nutrient=NutritionOrder_Nutrient,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder_Texture} = (NutritionOrder_Texture=NutritionOrder_Texture,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder_Supplement} = (NutritionOrder_Supplement=NutritionOrder_Supplement,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder_EnteralFormula} = (NutritionOrder_EnteralFormula=NutritionOrder_EnteralFormula,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractNutritionOrder_Administration} = (NutritionOrder_Administration=NutritionOrder_Administration,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractObservation} = (Observation=Observation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractObservation_ReferenceRange} = (Observation_ReferenceRange=Observation_ReferenceRange,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractObservation_Component} = (Observation_Component=Observation_Component,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractObservationDefinition} = (ObservationDefinition=ObservationDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractObservationDefinition_QuantitativeDetails} = (ObservationDefinition_QuantitativeDetails=ObservationDefinition_QuantitativeDetails,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractObservationDefinition_QualifiedInterval} = (ObservationDefinition_QualifiedInterval=ObservationDefinition_QualifiedInterval,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationDefinition} = (OperationDefinition=OperationDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationDefinition_Parameter} = (OperationDefinition_Parameter=OperationDefinition_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationDefinition_Binding} = (OperationDefinition_Binding=OperationDefinition_Binding,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationDefinition_ReferencedFrom} = (OperationDefinition_ReferencedFrom=OperationDefinition_ReferencedFrom,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationDefinition_Overload} = (OperationDefinition_Overload=OperationDefinition_Overload,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationOutcome} = (OperationOutcome=OperationOutcome,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOperationOutcome_Issue} = (OperationOutcome_Issue=OperationOutcome_Issue,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOrganization} = (Organization=Organization,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOrganization_Contact} = (Organization_Contact=Organization_Contact,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractOrganizationAffiliation} = (OrganizationAffiliation=OrganizationAffiliation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractParameters} = (Parameters=Parameters,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractParameters_Parameter} = (Parameters_Parameter=Parameters_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPatient} = (Patient=Patient,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPatient_Contact} = (Patient_Contact=Patient_Contact,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPatient_Communication} = (Patient_Communication=Patient_Communication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPatient_Link} = (Patient_Link=Patient_Link,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPaymentNotice} = (PaymentNotice=PaymentNotice,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPaymentReconciliation} = (PaymentReconciliation=PaymentReconciliation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPaymentReconciliation_Detail} = (PaymentReconciliation_Detail=PaymentReconciliation_Detail,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPaymentReconciliation_ProcessNote} = (PaymentReconciliation_ProcessNote=PaymentReconciliation_ProcessNote,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPerson} = (Person=Person,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPerson_Link} = (Person_Link=Person_Link,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition} = (PlanDefinition=PlanDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_Goal} = (PlanDefinition_Goal=PlanDefinition_Goal,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_Target} = (PlanDefinition_Target=PlanDefinition_Target,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_Action} = (PlanDefinition_Action=PlanDefinition_Action,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_Condition} = (PlanDefinition_Condition=PlanDefinition_Condition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_RelatedAction} = (PlanDefinition_RelatedAction=PlanDefinition_RelatedAction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_Participant} = (PlanDefinition_Participant=PlanDefinition_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPlanDefinition_DynamicValue} = (PlanDefinition_DynamicValue=PlanDefinition_DynamicValue,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPractitioner} = (Practitioner=Practitioner,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPractitioner_Qualification} = (Practitioner_Qualification=Practitioner_Qualification,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPractitionerRole} = (PractitionerRole=PractitionerRole,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPractitionerRole_AvailableTime} = (PractitionerRole_AvailableTime=PractitionerRole_AvailableTime,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractPractitionerRole_NotAvailable} = (PractitionerRole_NotAvailable=PractitionerRole_NotAvailable,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProcedure} = (Procedure=Procedure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProcedure_Performer} = (Procedure_Performer=Procedure_Performer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProcedure_FocalDevice} = (Procedure_FocalDevice=Procedure_FocalDevice,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProvenance} = (Provenance=Provenance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProvenance_Agent} = (Provenance_Agent=Provenance_Agent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractProvenance_Entity} = (Provenance_Entity=Provenance_Entity,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaire} = (Questionnaire=Questionnaire,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaire_Item} = (Questionnaire_Item=Questionnaire_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaire_EnableWhen} = (Questionnaire_EnableWhen=Questionnaire_EnableWhen,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaire_AnswerOption} = (Questionnaire_AnswerOption=Questionnaire_AnswerOption,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaire_Initial} = (Questionnaire_Initial=Questionnaire_Initial,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaireResponse} = (QuestionnaireResponse=QuestionnaireResponse,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaireResponse_Item} = (QuestionnaireResponse_Item=QuestionnaireResponse_Item,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractQuestionnaireResponse_Answer} = (QuestionnaireResponse_Answer=QuestionnaireResponse_Answer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRelatedPerson} = (RelatedPerson=RelatedPerson,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRelatedPerson_Communication} = (RelatedPerson_Communication=RelatedPerson_Communication,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRequestGroup} = (RequestGroup=RequestGroup,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRequestGroup_Action} = (RequestGroup_Action=RequestGroup_Action,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRequestGroup_Condition} = (RequestGroup_Condition=RequestGroup_Condition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRequestGroup_RelatedAction} = (RequestGroup_RelatedAction=RequestGroup_RelatedAction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchDefinition} = (ResearchDefinition=ResearchDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchElementDefinition} = (ResearchElementDefinition=ResearchElementDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchElementDefinition_Characteristic} = (ResearchElementDefinition_Characteristic=ResearchElementDefinition_Characteristic,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchStudy} = (ResearchStudy=ResearchStudy,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchStudy_Arm} = (ResearchStudy_Arm=ResearchStudy_Arm,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchStudy_Objective} = (ResearchStudy_Objective=ResearchStudy_Objective,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractResearchSubject} = (ResearchSubject=ResearchSubject,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskAssessment} = (RiskAssessment=RiskAssessment,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskAssessment_Prediction} = (RiskAssessment_Prediction=RiskAssessment_Prediction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis} = (RiskEvidenceSynthesis=RiskEvidenceSynthesis,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_SampleSize} = (RiskEvidenceSynthesis_SampleSize=RiskEvidenceSynthesis_SampleSize,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_RiskEstimate} = (RiskEvidenceSynthesis_RiskEstimate=RiskEvidenceSynthesis_RiskEstimate,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_PrecisionEstimate} = (RiskEvidenceSynthesis_PrecisionEstimate=RiskEvidenceSynthesis_PrecisionEstimate,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_Certainty} = (RiskEvidenceSynthesis_Certainty=RiskEvidenceSynthesis_Certainty,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractRiskEvidenceSynthesis_CertaintySubcomponent} = (RiskEvidenceSynthesis_CertaintySubcomponent=RiskEvidenceSynthesis_CertaintySubcomponent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSchedule} = (Schedule=Schedule,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSearchParameter} = (SearchParameter=SearchParameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSearchParameter_Component} = (SearchParameter_Component=SearchParameter_Component,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractServiceRequest} = (ServiceRequest=ServiceRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSlot} = (Slot=Slot,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimen} = (Specimen=Specimen,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimen_Collection} = (Specimen_Collection=Specimen_Collection,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimen_Processing} = (Specimen_Processing=Specimen_Processing,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimen_Container} = (Specimen_Container=Specimen_Container,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimenDefinition} = (SpecimenDefinition=SpecimenDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimenDefinition_TypeTested} = (SpecimenDefinition_TypeTested=SpecimenDefinition_TypeTested,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimenDefinition_Container} = (SpecimenDefinition_Container=SpecimenDefinition_Container,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimenDefinition_Additive} = (SpecimenDefinition_Additive=SpecimenDefinition_Additive,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSpecimenDefinition_Handling} = (SpecimenDefinition_Handling=SpecimenDefinition_Handling,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureDefinition} = (StructureDefinition=StructureDefinition,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureDefinition_Mapping} = (StructureDefinition_Mapping=StructureDefinition_Mapping,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureDefinition_Context} = (StructureDefinition_Context=StructureDefinition_Context,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureDefinition_Snapshot} = (StructureDefinition_Snapshot=StructureDefinition_Snapshot,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureDefinition_Differential} = (StructureDefinition_Differential=StructureDefinition_Differential,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap} = (StructureMap=StructureMap,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Structure} = (StructureMap_Structure=StructureMap_Structure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Group} = (StructureMap_Group=StructureMap_Group,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Input} = (StructureMap_Input=StructureMap_Input,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Rule} = (StructureMap_Rule=StructureMap_Rule,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Source} = (StructureMap_Source=StructureMap_Source,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Target} = (StructureMap_Target=StructureMap_Target,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Parameter} = (StructureMap_Parameter=StructureMap_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractStructureMap_Dependent} = (StructureMap_Dependent=StructureMap_Dependent,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubscription} = (Subscription=Subscription,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubscription_Channel} = (Subscription_Channel=Subscription_Channel,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstance} = (Substance=Substance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstance_Instance} = (Substance_Instance=Substance_Instance,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstance_Ingredient} = (Substance_Ingredient=Substance_Ingredient,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceNucleicAcid} = (SubstanceNucleicAcid=SubstanceNucleicAcid,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceNucleicAcid_Subunit} = (SubstanceNucleicAcid_Subunit=SubstanceNucleicAcid_Subunit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceNucleicAcid_Linkage} = (SubstanceNucleicAcid_Linkage=SubstanceNucleicAcid_Linkage,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceNucleicAcid_Sugar} = (SubstanceNucleicAcid_Sugar=SubstanceNucleicAcid_Sugar,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer} = (SubstancePolymer=SubstancePolymer,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer_MonomerSet} = (SubstancePolymer_MonomerSet=SubstancePolymer_MonomerSet,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer_StartingMaterial} = (SubstancePolymer_StartingMaterial=SubstancePolymer_StartingMaterial,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer_Repeat} = (SubstancePolymer_Repeat=SubstancePolymer_Repeat,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer_RepeatUnit} = (SubstancePolymer_RepeatUnit=SubstancePolymer_RepeatUnit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer_DegreeOfPolymerisation} = (SubstancePolymer_DegreeOfPolymerisation=SubstancePolymer_DegreeOfPolymerisation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstancePolymer_StructuralRepresentation} = (SubstancePolymer_StructuralRepresentation=SubstancePolymer_StructuralRepresentation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceProtein} = (SubstanceProtein=SubstanceProtein,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceProtein_Subunit} = (SubstanceProtein_Subunit=SubstanceProtein_Subunit,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceReferenceInformation} = (SubstanceReferenceInformation=SubstanceReferenceInformation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_Gene} = (SubstanceReferenceInformation_Gene=SubstanceReferenceInformation_Gene,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_GeneElement} = (SubstanceReferenceInformation_GeneElement=SubstanceReferenceInformation_GeneElement,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_Classification} = (SubstanceReferenceInformation_Classification=SubstanceReferenceInformation_Classification,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceReferenceInformation_Target} = (SubstanceReferenceInformation_Target=SubstanceReferenceInformation_Target,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial} = (SubstanceSourceMaterial=SubstanceSourceMaterial,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_FractionDescription} = (SubstanceSourceMaterial_FractionDescription=SubstanceSourceMaterial_FractionDescription,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_Organism} = (SubstanceSourceMaterial_Organism=SubstanceSourceMaterial_Organism,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_Author} = (SubstanceSourceMaterial_Author=SubstanceSourceMaterial_Author,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_Hybrid} = (SubstanceSourceMaterial_Hybrid=SubstanceSourceMaterial_Hybrid,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_OrganismGeneral} = (SubstanceSourceMaterial_OrganismGeneral=SubstanceSourceMaterial_OrganismGeneral,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSourceMaterial_PartDescription} = (SubstanceSourceMaterial_PartDescription=SubstanceSourceMaterial_PartDescription,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification} = (SubstanceSpecification=SubstanceSpecification,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Moiety} = (SubstanceSpecification_Moiety=SubstanceSpecification_Moiety,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Property} = (SubstanceSpecification_Property=SubstanceSpecification_Property,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Structure} = (SubstanceSpecification_Structure=SubstanceSpecification_Structure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Isotope} = (SubstanceSpecification_Isotope=SubstanceSpecification_Isotope,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_MolecularWeight} = (SubstanceSpecification_MolecularWeight=SubstanceSpecification_MolecularWeight,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Representation} = (SubstanceSpecification_Representation=SubstanceSpecification_Representation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Code} = (SubstanceSpecification_Code=SubstanceSpecification_Code,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Name} = (SubstanceSpecification_Name=SubstanceSpecification_Name,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Official} = (SubstanceSpecification_Official=SubstanceSpecification_Official,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSubstanceSpecification_Relationship} = (SubstanceSpecification_Relationship=SubstanceSpecification_Relationship,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSupplyDelivery} = (SupplyDelivery=SupplyDelivery,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSupplyDelivery_SuppliedItem} = (SupplyDelivery_SuppliedItem=SupplyDelivery_SuppliedItem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSupplyRequest} = (SupplyRequest=SupplyRequest,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractSupplyRequest_Parameter} = (SupplyRequest_Parameter=SupplyRequest_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTask} = (Task=Task,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTask_Restriction} = (Task_Restriction=Task_Restriction,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTask_Input} = (Task_Input=Task_Input,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTask_Output} = (Task_Output=Task_Output,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities} = (TerminologyCapabilities=TerminologyCapabilities,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Software} = (TerminologyCapabilities_Software=TerminologyCapabilities_Software,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Implementation} = (TerminologyCapabilities_Implementation=TerminologyCapabilities_Implementation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_CodeSystem} = (TerminologyCapabilities_CodeSystem=TerminologyCapabilities_CodeSystem,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Version} = (TerminologyCapabilities_Version=TerminologyCapabilities_Version,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Filter} = (TerminologyCapabilities_Filter=TerminologyCapabilities_Filter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Expansion} = (TerminologyCapabilities_Expansion=TerminologyCapabilities_Expansion,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Parameter} = (TerminologyCapabilities_Parameter=TerminologyCapabilities_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_ValidateCode} = (TerminologyCapabilities_ValidateCode=TerminologyCapabilities_ValidateCode,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Translation} = (TerminologyCapabilities_Translation=TerminologyCapabilities_Translation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTerminologyCapabilities_Closure} = (TerminologyCapabilities_Closure=TerminologyCapabilities_Closure,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport} = (TestReport=TestReport,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Participant} = (TestReport_Participant=TestReport_Participant,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Setup} = (TestReport_Setup=TestReport_Setup,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Action} = (TestReport_Action=TestReport_Action,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Operation} = (TestReport_Operation=TestReport_Operation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Assert} = (TestReport_Assert=TestReport_Assert,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Test} = (TestReport_Test=TestReport_Test,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Action1} = (TestReport_Action1=TestReport_Action1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Teardown} = (TestReport_Teardown=TestReport_Teardown,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestReport_Action2} = (TestReport_Action2=TestReport_Action2,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript} = (TestScript=TestScript,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Origin} = (TestScript_Origin=TestScript_Origin,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Destination} = (TestScript_Destination=TestScript_Destination,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Metadata} = (TestScript_Metadata=TestScript_Metadata,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Link} = (TestScript_Link=TestScript_Link,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Capability} = (TestScript_Capability=TestScript_Capability,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Fixture} = (TestScript_Fixture=TestScript_Fixture,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Variable} = (TestScript_Variable=TestScript_Variable,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Setup} = (TestScript_Setup=TestScript_Setup,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Action} = (TestScript_Action=TestScript_Action,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Operation} = (TestScript_Operation=TestScript_Operation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_RequestHeader} = (TestScript_RequestHeader=TestScript_RequestHeader,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Assert} = (TestScript_Assert=TestScript_Assert,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Test} = (TestScript_Test=TestScript_Test,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Action1} = (TestScript_Action1=TestScript_Action1,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Teardown} = (TestScript_Teardown=TestScript_Teardown,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractTestScript_Action2} = (TestScript_Action2=TestScript_Action2,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet} = (ValueSet=ValueSet,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Compose} = (ValueSet_Compose=ValueSet_Compose,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Include} = (ValueSet_Include=ValueSet_Include,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Concept} = (ValueSet_Concept=ValueSet_Concept,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Designation} = (ValueSet_Designation=ValueSet_Designation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Filter} = (ValueSet_Filter=ValueSet_Filter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Expansion} = (ValueSet_Expansion=ValueSet_Expansion,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Parameter} = (ValueSet_Parameter=ValueSet_Parameter,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractValueSet_Contains} = (ValueSet_Contains=ValueSet_Contains,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVerificationResult} = (VerificationResult=VerificationResult,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVerificationResult_PrimarySource} = (VerificationResult_PrimarySource=VerificationResult_PrimarySource,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVerificationResult_Attestation} = (VerificationResult_Attestation=VerificationResult_Attestation,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVerificationResult_Validator} = (VerificationResult_Validator=VerificationResult_Validator,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVisionPrescription} = (VisionPrescription=VisionPrescription,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVisionPrescription_LensSpecification} = (VisionPrescription_LensSpecification=VisionPrescription_LensSpecification,)

StructTypes.subtypes(::Type{T}) where {T <: AbstractVisionPrescription_Prism} = (VisionPrescription_Prism=VisionPrescription_Prism,)
